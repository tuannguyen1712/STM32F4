
STM32F4_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016b0  0800ea70  0800ea70  0001ea70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010120  08010120  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  08010120  08010120  00020120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010128  08010128  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010128  08010128  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801012c  0801012c  0002012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08010130  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000920  20000250  08010380  00030250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b70  08010380  00030b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018313  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003068  00000000  00000000  00048593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0004b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0004cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a281  00000000  00000000  0004e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194e1  00000000  00000000  00068291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d3a  00000000  00000000  00081772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001224ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076f4  00000000  00000000  001224fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ea54 	.word	0x0800ea54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0800ea54 	.word	0x0800ea54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	609a      	str	r2, [r3, #8]
	dht->port = port;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	887a      	ldrh	r2, [r7, #2]
 8001026:	809a      	strh	r2, [r3, #4]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d111      	bne.n	800107a <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f107 020c 	add.w	r2, r7, #12
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fc08 	bl	8004888 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8001078:	e013      	b.n	80010a2 <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d110      	bne.n	80010a2 <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	889b      	ldrh	r3, [r3, #4]
 8001084:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f107 020c 	add.w	r2, r7, #12
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fbf3 	bl	8004888 <HAL_GPIO_Init>
}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b094      	sub	sp, #80	; 0x50
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80010b6:	2300      	movs	r3, #0
 80010b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 80010d2:	2101      	movs	r1, #1
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffad 	bl	8001034 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	889b      	ldrh	r3, [r3, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	f003 fd6b 	bl	8004bc0 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 80010ea:	2012      	movs	r0, #18
 80010ec:	f002 fe12 	bl	8003d14 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 ffc1 	bl	8007080 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 80010fe:	2100      	movs	r1, #0
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff97 	bl	8001034 <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001110:	e00b      	b.n	800112a <readDHT11+0x80>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	b29b      	uxth	r3, r3
 800111c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001120:	d903      	bls.n	800112a <readDHT11+0x80>
  __ASM volatile ("cpsie i" : : : "memory");
 8001122:	b662      	cpsie	i
}
 8001124:	bf00      	nop
			__enable_irq();
			return 0;
 8001126:	2300      	movs	r3, #0
 8001128:	e129      	b.n	800137e <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	889b      	ldrh	r3, [r3, #4]
 8001132:	4619      	mov	r1, r3
 8001134:	4610      	mov	r0, r2
 8001136:	f003 fd2b 	bl	8004b90 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d0e8      	beq.n	8001112 <readDHT11+0x68>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800114a:	e00b      	b.n	8001164 <readDHT11+0xba>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	b29b      	uxth	r3, r3
 8001156:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800115a:	d903      	bls.n	8001164 <readDHT11+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 800115c:	b662      	cpsie	i
}
 800115e:	bf00      	nop
			__enable_irq();
			return 0;
 8001160:	2300      	movs	r3, #0
 8001162:	e10c      	b.n	800137e <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	889b      	ldrh	r3, [r3, #4]
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f003 fd0e 	bl	8004b90 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0e8      	beq.n	800114c <readDHT11+0xa2>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800118e:	e00b      	b.n	80011a8 <readDHT11+0xfe>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	b29b      	uxth	r3, r3
 800119a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800119e:	d903      	bls.n	80011a8 <readDHT11+0xfe>
  __ASM volatile ("cpsie i" : : : "memory");
 80011a0:	b662      	cpsie	i
}
 80011a2:	bf00      	nop
			__enable_irq();
			return 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e0ea      	b.n	800137e <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4610      	mov	r0, r2
 80011b4:	f003 fcec 	bl	8004b90 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d0e8      	beq.n	8001190 <readDHT11+0xe6>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 80011c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011ca:	2b4a      	cmp	r3, #74	; 0x4a
 80011cc:	d80c      	bhi.n	80011e8 <readDHT11+0x13e>
 80011ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011d0:	2b55      	cmp	r3, #85	; 0x55
 80011d2:	d909      	bls.n	80011e8 <readDHT11+0x13e>
 80011d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011d6:	2b4a      	cmp	r3, #74	; 0x4a
 80011d8:	d806      	bhi.n	80011e8 <readDHT11+0x13e>
 80011da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011dc:	2b55      	cmp	r3, #85	; 0x55
 80011de:	d903      	bls.n	80011e8 <readDHT11+0x13e>
  __ASM volatile ("cpsie i" : : : "memory");
 80011e0:	b662      	cpsie	i
}
 80011e2:	bf00      	nop
	{
		__enable_irq();
		return 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e0ca      	b.n	800137e <readDHT11+0x2d4>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	647b      	str	r3, [r7, #68]	; 0x44
 80011ec:	e05d      	b.n	80012aa <readDHT11+0x200>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80011f8:	e00b      	b.n	8001212 <readDHT11+0x168>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	b29b      	uxth	r3, r3
 8001204:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001208:	d903      	bls.n	8001212 <readDHT11+0x168>
  __ASM volatile ("cpsie i" : : : "memory");
 800120a:	b662      	cpsie	i
}
 800120c:	bf00      	nop
				__enable_irq();
				return 0;
 800120e:	2300      	movs	r3, #0
 8001210:	e0b5      	b.n	800137e <readDHT11+0x2d4>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	889b      	ldrh	r3, [r3, #4]
 800121a:	4619      	mov	r1, r3
 800121c:	4610      	mov	r0, r2
 800121e:	f003 fcb7 	bl	8004b90 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0e8      	beq.n	80011fa <readDHT11+0x150>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001232:	e00b      	b.n	800124c <readDHT11+0x1a2>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	b29b      	uxth	r3, r3
 800123e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001242:	d903      	bls.n	800124c <readDHT11+0x1a2>
  __ASM volatile ("cpsie i" : : : "memory");
 8001244:	b662      	cpsie	i
}
 8001246:	bf00      	nop
				__enable_irq();
				return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e098      	b.n	800137e <readDHT11+0x2d4>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	4619      	mov	r1, r3
 8001256:	4610      	mov	r0, r2
 8001258:	f003 fc9a 	bl	8004b90 <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	2b01      	cmp	r3, #1
 8001260:	d0e8      	beq.n	8001234 <readDHT11+0x18a>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 800126c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800126e:	2b14      	cmp	r3, #20
 8001270:	d906      	bls.n	8001280 <readDHT11+0x1d6>
 8001272:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001274:	2b1d      	cmp	r3, #29
 8001276:	d803      	bhi.n	8001280 <readDHT11+0x1d6>
		{
			mBit = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800127e:	e008      	b.n	8001292 <readDHT11+0x1e8>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8001280:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001282:	2b3c      	cmp	r3, #60	; 0x3c
 8001284:	d905      	bls.n	8001292 <readDHT11+0x1e8>
 8001286:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001288:	2b4f      	cmp	r3, #79	; 0x4f
 800128a:	d802      	bhi.n	8001292 <readDHT11+0x1e8>
		{
			 mBit = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8001292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001296:	b2d9      	uxtb	r1, r3
 8001298:	f107 020c 	add.w	r2, r7, #12
 800129c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129e:	4413      	add	r3, r2
 80012a0:	460a      	mov	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 80012a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012a6:	3301      	adds	r3, #1
 80012a8:	647b      	str	r3, [r7, #68]	; 0x44
 80012aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ac:	2b27      	cmp	r3, #39	; 0x27
 80012ae:	dd9e      	ble.n	80011ee <readDHT11+0x144>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f005 ff3d 	bl	8007134 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 80012ba:	b662      	cpsie	i
}
 80012bc:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	643b      	str	r3, [r7, #64]	; 0x40
 80012c2:	e011      	b.n	80012e8 <readDHT11+0x23e>
	{
		humVal += mData[i];
 80012c4:	f107 020c 	add.w	r2, r7, #12
 80012c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ca:	4413      	add	r3, r2
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012d2:	4413      	add	r3, r2
 80012d4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 80012d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 80012e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012e4:	3301      	adds	r3, #1
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
 80012e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	ddea      	ble.n	80012c4 <readDHT11+0x21a>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 80012ee:	2310      	movs	r3, #16
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012f2:	e011      	b.n	8001318 <readDHT11+0x26e>
	{
		tempVal += mData[i];
 80012f4:	f107 020c 	add.w	r2, r7, #12
 80012f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012fa:	4413      	add	r3, r2
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001302:	4413      	add	r3, r2
 8001304:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 8001308:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 8001312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001314:	3301      	adds	r3, #1
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131a:	2b17      	cmp	r3, #23
 800131c:	ddea      	ble.n	80012f4 <readDHT11+0x24a>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 800131e:	2320      	movs	r3, #32
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
 8001322:	e011      	b.n	8001348 <readDHT11+0x29e>
	{
		parityVal += mData[i];
 8001324:	f107 020c 	add.w	r2, r7, #12
 8001328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800132a:	4413      	add	r3, r2
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001332:	4413      	add	r3, r2
 8001334:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 8001338:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 8001342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001344:	3301      	adds	r3, #1
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
 8001348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134a:	2b27      	cmp	r3, #39	; 0x27
 800134c:	ddea      	ble.n	8001324 <readDHT11+0x27a>
	}

	parityVal = parityVal >> 1;
 800134e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001352:	085b      	lsrs	r3, r3, #1
 8001354:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 8001358:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800135c:	085b      	lsrs	r3, r3, #1
 800135e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 8001362:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001366:	085b      	lsrs	r3, r3, #1
 8001368:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	dht->temperature = tempVal;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8001372:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800137a:	735a      	strb	r2, [r3, #13]


	return 1;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	3750      	adds	r7, #80	; 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <DS1307_DecodeBCD>:
#include "DS1307.h"

uint8_t DS1307_DecodeBCD(uint8_t bin) {				// bcd to dec
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	0092      	lsls	r2, r2, #2
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b2db      	uxtb	r3, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <DS1307_EncodeBCD>:
uint8_t DS1307_EncodeBCD(uint8_t dec) {				// dec to bcd
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80013c2:	79fa      	ldrb	r2, [r7, #7]
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <DS1307_EncodeBCD+0x40>)
 80013c6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ca:	08d9      	lsrs	r1, r3, #3
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4907      	ldr	r1, [pc, #28]	; (80013f8 <DS1307_EncodeBCD+0x40>)
 80013dc:	fba1 1303 	umull	r1, r3, r1, r3
 80013e0:	08db      	lsrs	r3, r3, #3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4413      	add	r3, r2
 80013ea:	b2db      	uxtb	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	cccccccd 	.word	0xcccccccd

080013fc <DS1307_gettime>:

void DS1307_gettime(I2C_HandleTypeDef *hi2c, DS1307_param_t *ds1307) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	uint16_t cen;
	ds1307->sec = DS1307_DecodeBCD(DS1307_GetRegByte(hi2c, DS1307_REG_SECOND) & 0x7f);
 8001406:	2100      	movs	r1, #0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f913 	bl	8001634 <DS1307_GetRegByte>
 800140e:	4603      	mov	r3, r0
 8001410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ffb5 	bl	8001386 <DS1307_DecodeBCD>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	701a      	strb	r2, [r3, #0]
	ds1307->min = DS1307_DecodeBCD(DS1307_GetRegByte(hi2c, DS1307_REG_MINUTE));
 8001424:	2101      	movs	r1, #1
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f904 	bl	8001634 <DS1307_GetRegByte>
 800142c:	4603      	mov	r3, r0
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ffa9 	bl	8001386 <DS1307_DecodeBCD>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	705a      	strb	r2, [r3, #1]
	ds1307->hour = DS1307_DecodeBCD(DS1307_GetRegByte(hi2c, DS1307_REG_HOUR) & 0x3f);
 800143c:	2102      	movs	r1, #2
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f8f8 	bl	8001634 <DS1307_GetRegByte>
 8001444:	4603      	mov	r3, r0
 8001446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff9a 	bl	8001386 <DS1307_DecodeBCD>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	709a      	strb	r2, [r3, #2]
	ds1307->dow = DS1307_DecodeBCD(DS1307_GetRegByte(hi2c, DS1307_REG_DOW));
 800145a:	2103      	movs	r1, #3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f8e9 	bl	8001634 <DS1307_GetRegByte>
 8001462:	4603      	mov	r3, r0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff8e 	bl	8001386 <DS1307_DecodeBCD>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	70da      	strb	r2, [r3, #3]
	ds1307->date = DS1307_DecodeBCD(DS1307_GetRegByte(hi2c, DS1307_REG_DATE));
 8001472:	2104      	movs	r1, #4
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f8dd 	bl	8001634 <DS1307_GetRegByte>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff82 	bl	8001386 <DS1307_DecodeBCD>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	711a      	strb	r2, [r3, #4]
	ds1307->month = DS1307_DecodeBCD(DS1307_GetRegByte(hi2c, DS1307_REG_MONTH));
 800148a:	2105      	movs	r1, #5
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f8d1 	bl	8001634 <DS1307_GetRegByte>
 8001492:	4603      	mov	r3, r0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff76 	bl	8001386 <DS1307_DecodeBCD>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	715a      	strb	r2, [r3, #5]
	cen = DS1307_GetRegByte(hi2c, DS1307_REG_CENT) * 100;
 80014a2:	2110      	movs	r1, #16
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f8c5 	bl	8001634 <DS1307_GetRegByte>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	0091      	lsls	r1, r2, #2
 80014b8:	461a      	mov	r2, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	81fb      	strh	r3, [r7, #14]
	ds1307->year = DS1307_DecodeBCD(DS1307_GetRegByte(hi2c, DS1307_REG_YEAR)) + cen;
 80014c2:	2106      	movs	r1, #6
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f8b5 	bl	8001634 <DS1307_GetRegByte>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5a 	bl	8001386 <DS1307_DecodeBCD>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	4413      	add	r3, r2
 80014da:	b29a      	uxth	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	80da      	strh	r2, [r3, #6]
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <DS1307_SetRegByte>:
void DS1307_SetRegByte(I2C_HandleTypeDef *hi2c, uint8_t regAddr, uint8_t val) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
 80014f4:	4613      	mov	r3, r2
 80014f6:	70bb      	strb	r3, [r7, #2]
	uint8_t bytes[2] = { regAddr, val };
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	733b      	strb	r3, [r7, #12]
 80014fc:	78bb      	ldrb	r3, [r7, #2]
 80014fe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, DS1307_I2C_ADDR << 1, bytes, 2,
 8001500:	f107 020c 	add.w	r2, r7, #12
 8001504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2302      	movs	r3, #2
 800150c:	21d0      	movs	r1, #208	; 0xd0
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f003 fce6 	bl	8004ee0 <HAL_I2C_Master_Transmit>
	DS1307_TIMEOUT);
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <DS1307_GetClockHalt>:
uint8_t DS1307_GetClockHalt(I2C_HandleTypeDef *hi2c) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	return (DS1307_GetRegByte(hi2c, DS1307_REG_SECOND) & 0x80) >> 7;
 8001524:	2100      	movs	r1, #0
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f884 	bl	8001634 <DS1307_GetRegByte>
 800152c:	4603      	mov	r3, r0
 800152e:	11db      	asrs	r3, r3, #7
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <DS1307_settime>:
void DS1307_settime(I2C_HandleTypeDef *hi2c, uint8_t sec, uint8_t min, uint8_t hour_24mode,
		uint8_t dayOfWeek, uint8_t date, uint8_t month, uint16_t year) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	4608      	mov	r0, r1
 800154a:	4611      	mov	r1, r2
 800154c:	461a      	mov	r2, r3
 800154e:	4603      	mov	r3, r0
 8001550:	70fb      	strb	r3, [r7, #3]
 8001552:	460b      	mov	r3, r1
 8001554:	70bb      	strb	r3, [r7, #2]
 8001556:	4613      	mov	r3, r2
 8001558:	707b      	strb	r3, [r7, #1]
	DS1307_SetRegByte(hi2c, DS1307_REG_SECOND,
			DS1307_EncodeBCD(sec | DS1307_GetClockHalt(hi2c)));
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffde 	bl	800151c <DS1307_GetClockHalt>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
	DS1307_SetRegByte(hi2c, DS1307_REG_SECOND,
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	4313      	orrs	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff24 	bl	80013b8 <DS1307_EncodeBCD>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffb6 	bl	80014e8 <DS1307_SetRegByte>
	DS1307_SetRegByte(hi2c, DS1307_REG_MINUTE, DS1307_EncodeBCD(min));
 800157c:	78bb      	ldrb	r3, [r7, #2]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff1a 	bl	80013b8 <DS1307_EncodeBCD>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	2101      	movs	r1, #1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffac 	bl	80014e8 <DS1307_SetRegByte>
	DS1307_SetRegByte(hi2c, DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f)); //hour_24mode Hour in 24h format, 0 to 23.
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff0d 	bl	80013b8 <DS1307_EncodeBCD>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	2102      	movs	r1, #2
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff9f 	bl	80014e8 <DS1307_SetRegByte>
	DS1307_SetRegByte(hi2c, DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek)); //dayOfWeek Days since last Sunday, 0 to 6.
 80015aa:	7c3b      	ldrb	r3, [r7, #16]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff03 	bl	80013b8 <DS1307_EncodeBCD>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	2103      	movs	r1, #3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff95 	bl	80014e8 <DS1307_SetRegByte>
	DS1307_SetRegByte(hi2c, DS1307_REG_DATE, DS1307_EncodeBCD(date)); //date Day of month, 1 to 31.
 80015be:	7d3b      	ldrb	r3, [r7, #20]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fef9 	bl	80013b8 <DS1307_EncodeBCD>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	2104      	movs	r1, #4
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff8b 	bl	80014e8 <DS1307_SetRegByte>
	DS1307_SetRegByte(hi2c, DS1307_REG_MONTH, DS1307_EncodeBCD(month)); //month Month, 1 to 12.
 80015d2:	7e3b      	ldrb	r3, [r7, #24]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff feef 	bl	80013b8 <DS1307_EncodeBCD>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	2105      	movs	r1, #5
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff81 	bl	80014e8 <DS1307_SetRegByte>
	DS1307_SetRegByte(hi2c, DS1307_REG_CENT, year / 100);
 80015e6:	8bbb      	ldrh	r3, [r7, #28]
 80015e8:	4a11      	ldr	r2, [pc, #68]	; (8001630 <DS1307_settime+0xf0>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	2110      	movs	r1, #16
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff75 	bl	80014e8 <DS1307_SetRegByte>
	DS1307_SetRegByte(hi2c, DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100)); //2000 to 2099.
 80015fe:	8bbb      	ldrh	r3, [r7, #28]
 8001600:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <DS1307_settime+0xf0>)
 8001602:	fba2 1203 	umull	r1, r2, r2, r3
 8001606:	0952      	lsrs	r2, r2, #5
 8001608:	2164      	movs	r1, #100	; 0x64
 800160a:	fb01 f202 	mul.w	r2, r1, r2
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	b29b      	uxth	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fecf 	bl	80013b8 <DS1307_EncodeBCD>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	2106      	movs	r1, #6
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff61 	bl	80014e8 <DS1307_SetRegByte>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	51eb851f 	.word	0x51eb851f

08001634 <DS1307_GetRegByte>:
uint8_t DS1307_GetRegByte(I2C_HandleTypeDef *hi2c, uint8_t regAddr) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af02      	add	r7, sp, #8
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	HAL_I2C_Master_Transmit(hi2c, DS1307_I2C_ADDR << 1, &regAddr, 1,
 8001640:	1cfa      	adds	r2, r7, #3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2301      	movs	r3, #1
 800164a:	21d0      	movs	r1, #208	; 0xd0
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f003 fc47 	bl	8004ee0 <HAL_I2C_Master_Transmit>
	DS1307_TIMEOUT);
	HAL_I2C_Master_Receive(hi2c, DS1307_I2C_ADDR << 1, &val, 1,
 8001652:	f107 020f 	add.w	r2, r7, #15
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	21d0      	movs	r1, #208	; 0xd0
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f003 fd3b 	bl	80050dc <HAL_I2C_Master_Receive>
	DS1307_TIMEOUT);
	return val;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <DS1307_SetClockHalt>:
void DS1307_SetClockHalt(I2C_HandleTypeDef *hi2c, uint8_t halt) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
	uint8_t ch = (halt ? 1 << 7 : 0);
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <DS1307_SetClockHalt+0x16>
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	e000      	b.n	8001688 <DS1307_SetClockHalt+0x18>
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(hi2c, DS1307_REG_SECOND,
			ch | (DS1307_GetRegByte(hi2c, DS1307_REG_SECOND) & 0x7f));
 800168a:	2100      	movs	r1, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ffd1 	bl	8001634 <DS1307_GetRegByte>
 8001692:	4603      	mov	r3, r0
 8001694:	b25b      	sxtb	r3, r3
 8001696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800169a:	b25a      	sxtb	r2, r3
 800169c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b25b      	sxtb	r3, r3
	DS1307_SetRegByte(hi2c, DS1307_REG_SECOND,
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff1c 	bl	80014e8 <DS1307_SetRegByte>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(I2C_HandleTypeDef *hi2c, int8_t hr, uint8_t min) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
 80016c4:	4613      	mov	r3, r2
 80016c6:	70bb      	strb	r3, [r7, #2]
	DS1307_SetRegByte(hi2c, DS1307_REG_UTC_HR, hr);
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	461a      	mov	r2, r3
 80016cc:	2108      	movs	r1, #8
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff0a 	bl	80014e8 <DS1307_SetRegByte>
	DS1307_SetRegByte(hi2c, DS1307_REG_UTC_MIN, min);
 80016d4:	78bb      	ldrb	r3, [r7, #2]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2109      	movs	r1, #9
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff04 	bl	80014e8 <DS1307_SetRegByte>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <DS1307_config>:
void DS1307_config(I2C_HandleTypeDef *hi2c) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	DS1307_SetClockHalt(hi2c, 0);
 80016f0:	2100      	movs	r1, #0
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffbc 	bl	8001670 <DS1307_SetClockHalt>
	DS1307_SetTimeZone(hi2c, +8, 00);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2108      	movs	r1, #8
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ffdb 	bl	80016b8 <DS1307_SetTimeZone>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <MQ135_getVoltage>:
#include "MQ135.h"

double Vs = (double) Vin / (Res - 1);

double MQ135_getVoltage(uint32_t ADC_val) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	return ADC_val * Vs;
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7fe fefd 	bl	8000514 <__aeabi_ui2d>
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <MQ135_getVoltage+0x30>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe ff72 	bl	8000608 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	ec43 2b17 	vmov	d7, r2, r3
}
 800172c:	eeb0 0a47 	vmov.f32	s0, s14
 8001730:	eef0 0a67 	vmov.f32	s1, s15
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000

08001740 <MQ135_getCorrectionFactor>:

double MQ135_getCorrectionFactor(float tem, float hum) {
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
 800174a:	edc7 0a00 	vstr	s1, [r7]
	return (CorrA * pow(tem, 3) + CorrB * pow(tem, 2) - CorrC * tem + CorrD
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe ff02 	bl	8000558 <__aeabi_f2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001830 <MQ135_getCorrectionFactor+0xf0>
 800175c:	ec43 2b10 	vmov	d0, r2, r3
 8001760:	f00c fa5e 	bl	800dc20 <pow>
 8001764:	ec51 0b10 	vmov	r0, r1, d0
 8001768:	a335      	add	r3, pc, #212	; (adr r3, 8001840 <MQ135_getCorrectionFactor+0x100>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe ff4b 	bl	8000608 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4614      	mov	r4, r2
 8001778:	461d      	mov	r5, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe feec 	bl	8000558 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001838 <MQ135_getCorrectionFactor+0xf8>
 8001788:	ec43 2b10 	vmov	d0, r2, r3
 800178c:	f00c fa48 	bl	800dc20 <pow>
 8001790:	ec51 0b10 	vmov	r0, r1, d0
 8001794:	a32c      	add	r3, pc, #176	; (adr r3, 8001848 <MQ135_getCorrectionFactor+0x108>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff35 	bl	8000608 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fd79 	bl	800029c <__adddf3>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4614      	mov	r4, r2
 80017b0:	461d      	mov	r5, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7fe fed0 	bl	8000558 <__aeabi_f2d>
 80017b8:	a325      	add	r3, pc, #148	; (adr r3, 8001850 <MQ135_getCorrectionFactor+0x110>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff23 	bl	8000608 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe fd65 	bl	8000298 <__aeabi_dsub>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	a320      	add	r3, pc, #128	; (adr r3, 8001858 <MQ135_getCorrectionFactor+0x118>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe fd5e 	bl	800029c <__adddf3>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4614      	mov	r4, r2
 80017e6:	461d      	mov	r5, r3
			- (CorrE * hum - CorrE * 33));
 80017e8:	6838      	ldr	r0, [r7, #0]
 80017ea:	f7fe feb5 	bl	8000558 <__aeabi_f2d>
 80017ee:	a31c      	add	r3, pc, #112	; (adr r3, 8001860 <MQ135_getCorrectionFactor+0x120>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe ff08 	bl	8000608 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	a319      	add	r3, pc, #100	; (adr r3, 8001868 <MQ135_getCorrectionFactor+0x128>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fd47 	bl	8000298 <__aeabi_dsub>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fd41 	bl	8000298 <__aeabi_dsub>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ec43 2b17 	vmov	d7, r2, r3
}
 800181e:	eeb0 0a47 	vmov.f32	s0, s14
 8001822:	eef0 0a67 	vmov.f32	s1, s15
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bdb0      	pop	{r4, r5, r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	00000000 	.word	0x00000000
 8001834:	40080000 	.word	0x40080000
 8001838:	00000000 	.word	0x00000000
 800183c:	40000000 	.word	0x40000000
 8001840:	df0c3774 	.word	0xdf0c3774
 8001844:	bec4b66d 	.word	0xbec4b66d
 8001848:	35d19cb8 	.word	0x35d19cb8
 800184c:	3f3f8deb 	.word	0x3f3f8deb
 8001850:	f9cdf9d8 	.word	0xf9cdf9d8
 8001854:	3f9c10af 	.word	0x3f9c10af
 8001858:	a272ad5b 	.word	0xa272ad5b
 800185c:	3ff60143 	.word	0x3ff60143
 8001860:	192a133c 	.word	0x192a133c
 8001864:	3f5f81f8 	.word	0x3f5f81f8
 8001868:	ecf9b1eb 	.word	0xecf9b1eb
 800186c:	3fb03f03 	.word	0x3fb03f03

08001870 <MQ135_getResistance>:

double MQ135_getResistance(uint32_t ADC_val) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	double vol = MQ135_getVoltage(ADC_val);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff47 	bl	800170c <MQ135_getVoltage>
 800187e:	ed87 0b04 	vstr	d0, [r7, #16]
	double rs = ((Vin * RL) / vol) - RL;
 8001882:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	4915      	ldr	r1, [pc, #84]	; (80018e0 <MQ135_getResistance+0x70>)
 800188c:	f7fe ffe6 	bl	800085c <__aeabi_ddiv>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MQ135_getResistance+0x74>)
 800189e:	f7fe fcfb 	bl	8000298 <__aeabi_dsub>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (rs > 0) {
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018b6:	f7ff f937 	bl	8000b28 <__aeabi_dcmpgt>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <MQ135_getResistance+0x56>
		return rs;
 80018c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c4:	e003      	b.n	80018ce <MQ135_getResistance+0x5e>
	} else
		return 0;
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
}
 80018ce:	ec43 2b17 	vmov	d7, r2, r3
 80018d2:	eeb0 0a47 	vmov.f32	s0, s14
 80018d6:	eef0 0a67 	vmov.f32	s1, s15
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40490000 	.word	0x40490000
 80018e4:	40240000 	.word	0x40240000

080018e8 <MQ135_getCorrectResistance>:

double MQ135_getCorrectResistance(double tem, double hum, uint32_t ADC_val) {
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	ed87 0b04 	vstr	d0, [r7, #16]
 80018f2:	ed87 1b02 	vstr	d1, [r7, #8]
 80018f6:	6078      	str	r0, [r7, #4]
	return MQ135_getResistance(ADC_val) / MQ135_getCorrectionFactor(tem, hum);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffb9 	bl	8001870 <MQ135_getResistance>
 80018fe:	ec55 4b10 	vmov	r4, r5, d0
 8001902:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001906:	f7ff f977 	bl	8000bf8 <__aeabi_d2f>
 800190a:	4606      	mov	r6, r0
 800190c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001910:	f7ff f972 	bl	8000bf8 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	ee00 3a90 	vmov	s1, r3
 800191a:	ee00 6a10 	vmov	s0, r6
 800191e:	f7ff ff0f 	bl	8001740 <MQ135_getCorrectionFactor>
 8001922:	ec53 2b10 	vmov	r2, r3, d0
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe ff97 	bl	800085c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	ec43 2b17 	vmov	d7, r2, r3
}
 8001936:	eeb0 0a47 	vmov.f32	s0, s14
 800193a:	eef0 0a67 	vmov.f32	s1, s15
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001944:	0000      	movs	r0, r0
	...

08001948 <MQ135_getPPM>:

// a and b dependent on type of gas
double MQ135_getPPM(float a, float b, uint32_t ADC_val) {
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001952:	edc7 0a02 	vstr	s1, [r7, #8]
 8001956:	6078      	str	r0, [r7, #4]
	double ratio = MQ135_getResistance(ADC_val) / R0;
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff89 	bl	8001870 <MQ135_getResistance>
 800195e:	ec51 0b10 	vmov	r0, r1, d0
 8001962:	a31f      	add	r3, pc, #124	; (adr r3, 80019e0 <MQ135_getPPM+0x98>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe ff78 	bl	800085c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double ppm = a * pow(ratio, b);
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f7fe fdef 	bl	8000558 <__aeabi_f2d>
 800197a:	4604      	mov	r4, r0
 800197c:	460d      	mov	r5, r1
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f7fe fdea 	bl	8000558 <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	ec43 2b11 	vmov	d1, r2, r3
 800198c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001990:	f00c f946 	bl	800dc20 <pow>
 8001994:	ec53 2b10 	vmov	r2, r3, d0
 8001998:	4620      	mov	r0, r4
 800199a:	4629      	mov	r1, r5
 800199c:	f7fe fe34 	bl	8000608 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (ppm > 0)
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019b4:	f7ff f8b8 	bl	8000b28 <__aeabi_dcmpgt>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <MQ135_getPPM+0x7c>
		return ppm;
 80019be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019c2:	e003      	b.n	80019cc <MQ135_getPPM+0x84>
	else
		return 0;
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
}
 80019cc:	ec43 2b17 	vmov	d7, r2, r3
 80019d0:	eeb0 0a47 	vmov.f32	s0, s14
 80019d4:	eef0 0a67 	vmov.f32	s1, s15
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bdb0      	pop	{r4, r5, r7, pc}
 80019de:	bf00      	nop
 80019e0:	eb851eb8 	.word	0xeb851eb8
 80019e4:	40532851 	.word	0x40532851

080019e8 <MQ135_getCorrectPPM>:

double MQ135_getCorrectPPM(float a, float b, float tem, float hum,
		uint32_t ADC_val) {
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80019f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80019f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80019fa:	edc7 1a02 	vstr	s3, [r7, #8]
 80019fe:	6078      	str	r0, [r7, #4]
	double ratio = MQ135_getCorrectResistance(tem, hum, ADC_val) / R0;
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7fe fda9 	bl	8000558 <__aeabi_f2d>
 8001a06:	4604      	mov	r4, r0
 8001a08:	460d      	mov	r5, r1
 8001a0a:	68b8      	ldr	r0, [r7, #8]
 8001a0c:	f7fe fda4 	bl	8000558 <__aeabi_f2d>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	ec43 2b11 	vmov	d1, r2, r3
 8001a1a:	ec45 4b10 	vmov	d0, r4, r5
 8001a1e:	f7ff ff63 	bl	80018e8 <MQ135_getCorrectResistance>
 8001a22:	ec51 0b10 	vmov	r0, r1, d0
 8001a26:	a318      	add	r3, pc, #96	; (adr r3, 8001a88 <MQ135_getCorrectPPM+0xa0>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe ff16 	bl	800085c <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double ppm = a * pow(ratio, b);
 8001a38:	6978      	ldr	r0, [r7, #20]
 8001a3a:	f7fe fd8d 	bl	8000558 <__aeabi_f2d>
 8001a3e:	4604      	mov	r4, r0
 8001a40:	460d      	mov	r5, r1
 8001a42:	6938      	ldr	r0, [r7, #16]
 8001a44:	f7fe fd88 	bl	8000558 <__aeabi_f2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	ec43 2b11 	vmov	d1, r2, r3
 8001a50:	ed97 0b08 	vldr	d0, [r7, #32]
 8001a54:	f00c f8e4 	bl	800dc20 <pow>
 8001a58:	ec53 2b10 	vmov	r2, r3, d0
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fdd2 	bl	8000608 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return ppm;
 8001a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a70:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a74:	eeb0 0a47 	vmov.f32	s0, s14
 8001a78:	eef0 0a67 	vmov.f32	s1, s15
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bdb0      	pop	{r4, r5, r7, pc}
 8001a82:	bf00      	nop
 8001a84:	f3af 8000 	nop.w
 8001a88:	eb851eb8 	.word	0xeb851eb8
 8001a8c:	40532851 	.word	0x40532851

08001a90 <MQ135_getAcetone>:
		return ppm;
	else
		return 0;
}

double MQ135_getAcetone(uint32_t ADC_val) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	return MQ135_getPPM(34.688, -3.369, ADC_val);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001abc <MQ135_getAcetone+0x2c>
 8001a9e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001ac0 <MQ135_getAcetone+0x30>
 8001aa2:	f7ff ff51 	bl	8001948 <MQ135_getPPM>
 8001aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aaa:	eef0 7a60 	vmov.f32	s15, s1
}
 8001aae:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab2:	eef0 0a67 	vmov.f32	s1, s15
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	c0579db2 	.word	0xc0579db2
 8001ac0:	420ac083 	.word	0x420ac083

08001ac4 <MQ135_getCorrectAcetone>:

double MQ135_getCorrectAcetone(float tem, float hum, uint32_t ADC_val) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ace:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ad2:	6078      	str	r0, [r7, #4]
	return MQ135_getCorrectPPM(34.688, -3.369, tem, hum, ADC_val);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	edd7 1a02 	vldr	s3, [r7, #8]
 8001ada:	ed97 1a03 	vldr	s2, [r7, #12]
 8001ade:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001b00 <MQ135_getCorrectAcetone+0x3c>
 8001ae2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001b04 <MQ135_getCorrectAcetone+0x40>
 8001ae6:	f7ff ff7f 	bl	80019e8 <MQ135_getCorrectPPM>
 8001aea:	eeb0 7a40 	vmov.f32	s14, s0
 8001aee:	eef0 7a60 	vmov.f32	s15, s1
}
 8001af2:	eeb0 0a47 	vmov.f32	s0, s14
 8001af6:	eef0 0a67 	vmov.f32	s1, s15
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	c0579db2 	.word	0xc0579db2
 8001b04:	420ac083 	.word	0x420ac083

08001b08 <MQ135_getAlcohol>:

double MQ135_getAlcohol(uint32_t ADC_val) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	return MQ135_getPPM(77.255, -3.18, ADC_val);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001b34 <MQ135_getAlcohol+0x2c>
 8001b16:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001b38 <MQ135_getAlcohol+0x30>
 8001b1a:	f7ff ff15 	bl	8001948 <MQ135_getPPM>
 8001b1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b22:	eef0 7a60 	vmov.f32	s15, s1
}
 8001b26:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2a:	eef0 0a67 	vmov.f32	s1, s15
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	c04b851f 	.word	0xc04b851f
 8001b38:	429a828f 	.word	0x429a828f

08001b3c <MQ135_getCorrectAlcohol>:

double MQ135_getCorrectAlcohol(float tem, float hum, uint32_t ADC_val) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b46:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b4a:	6078      	str	r0, [r7, #4]
	return MQ135_getCorrectPPM(77.255, -3.18, tem, hum, ADC_val);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	edd7 1a02 	vldr	s3, [r7, #8]
 8001b52:	ed97 1a03 	vldr	s2, [r7, #12]
 8001b56:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001b78 <MQ135_getCorrectAlcohol+0x3c>
 8001b5a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001b7c <MQ135_getCorrectAlcohol+0x40>
 8001b5e:	f7ff ff43 	bl	80019e8 <MQ135_getCorrectPPM>
 8001b62:	eeb0 7a40 	vmov.f32	s14, s0
 8001b66:	eef0 7a60 	vmov.f32	s15, s1
}
 8001b6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b6e:	eef0 0a67 	vmov.f32	s1, s15
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	c04b851f 	.word	0xc04b851f
 8001b7c:	429a828f 	.word	0x429a828f

08001b80 <MQ135_getCO2>:

double MQ135_getCO2(uint32_t ADC_val) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	return MQ135_getPPM(110.47, -2.862, ADC_val) + ATMOCO2;
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001bc8 <MQ135_getCO2+0x48>
 8001b8e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001bcc <MQ135_getCO2+0x4c>
 8001b92:	f7ff fed9 	bl	8001948 <MQ135_getPPM>
 8001b96:	ec51 0b10 	vmov	r0, r1, d0
 8001b9a:	a309      	add	r3, pc, #36	; (adr r3, 8001bc0 <MQ135_getCO2+0x40>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fb7c 	bl	800029c <__adddf3>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bac:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb0:	eef0 0a67 	vmov.f32	s1, s15
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	7ae147ae 	.word	0x7ae147ae
 8001bc4:	4078d214 	.word	0x4078d214
 8001bc8:	c0372b02 	.word	0xc0372b02
 8001bcc:	42dcf0a4 	.word	0x42dcf0a4

08001bd0 <MQ135_getCorrectCO2>:

double MQ135_getCorrectCO2(float tem, float hum, uint32_t ADC_val) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001bda:	edc7 0a02 	vstr	s1, [r7, #8]
 8001bde:	6078      	str	r0, [r7, #4]
	return MQ135_getCorrectPPM(110.47, -2.862, tem, hum, ADC_val) + ATMOCO2;
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	edd7 1a02 	vldr	s3, [r7, #8]
 8001be6:	ed97 1a03 	vldr	s2, [r7, #12]
 8001bea:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001c28 <MQ135_getCorrectCO2+0x58>
 8001bee:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001c2c <MQ135_getCorrectCO2+0x5c>
 8001bf2:	f7ff fef9 	bl	80019e8 <MQ135_getCorrectPPM>
 8001bf6:	ec51 0b10 	vmov	r0, r1, d0
 8001bfa:	a309      	add	r3, pc, #36	; (adr r3, 8001c20 <MQ135_getCorrectCO2+0x50>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fb4c 	bl	800029c <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c10:	eef0 0a67 	vmov.f32	s1, s15
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	7ae147ae 	.word	0x7ae147ae
 8001c24:	4078d214 	.word	0x4078d214
 8001c28:	c0372b02 	.word	0xc0372b02
 8001c2c:	42dcf0a4 	.word	0x42dcf0a4

08001c30 <MQ135_getCO>:

double MQ135_getCO(uint32_t ADC_val) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	return MQ135_getPPM(605.18, -3.937, ADC_val);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001c5c <MQ135_getCO+0x2c>
 8001c3e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001c60 <MQ135_getCO+0x30>
 8001c42:	f7ff fe81 	bl	8001948 <MQ135_getPPM>
 8001c46:	eeb0 7a40 	vmov.f32	s14, s0
 8001c4a:	eef0 7a60 	vmov.f32	s15, s1
}
 8001c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c52:	eef0 0a67 	vmov.f32	s1, s15
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	c07bf7cf 	.word	0xc07bf7cf
 8001c60:	44174b85 	.word	0x44174b85

08001c64 <MQ135_getCorrectCO>:

double MQ135_getCorrectCO(float tem, float hum, uint32_t ADC_val) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c72:	6078      	str	r0, [r7, #4]
	return MQ135_getCorrectPPM(605.18, -3.937, tem, hum, ADC_val);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	edd7 1a02 	vldr	s3, [r7, #8]
 8001c7a:	ed97 1a03 	vldr	s2, [r7, #12]
 8001c7e:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001ca0 <MQ135_getCorrectCO+0x3c>
 8001c82:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001ca4 <MQ135_getCorrectCO+0x40>
 8001c86:	f7ff feaf 	bl	80019e8 <MQ135_getCorrectPPM>
 8001c8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001c8e:	eef0 7a60 	vmov.f32	s15, s1
}
 8001c92:	eeb0 0a47 	vmov.f32	s0, s14
 8001c96:	eef0 0a67 	vmov.f32	s1, s15
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	c07bf7cf 	.word	0xc07bf7cf
 8001ca4:	44174b85 	.word	0x44174b85

08001ca8 <MQ135_getNH4>:

double MQ135_getNH4(uint32_t ADC_val) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	return MQ135_getPPM(102.2, -2.473, ADC_val);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001cd4 <MQ135_getNH4+0x2c>
 8001cb6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001cd8 <MQ135_getNH4+0x30>
 8001cba:	f7ff fe45 	bl	8001948 <MQ135_getPPM>
 8001cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8001cc2:	eef0 7a60 	vmov.f32	s15, s1
}
 8001cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cca:	eef0 0a67 	vmov.f32	s1, s15
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	c01e45a2 	.word	0xc01e45a2
 8001cd8:	42cc6666 	.word	0x42cc6666

08001cdc <MQ135_getCorrectNH4>:

double MQ135_getCorrectNH4(float tem, float hum, uint32_t ADC_val) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ce6:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cea:	6078      	str	r0, [r7, #4]
	return MQ135_getCorrectPPM(102.2, -2.473, tem, hum, ADC_val);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	edd7 1a02 	vldr	s3, [r7, #8]
 8001cf2:	ed97 1a03 	vldr	s2, [r7, #12]
 8001cf6:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001d18 <MQ135_getCorrectNH4+0x3c>
 8001cfa:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001d1c <MQ135_getCorrectNH4+0x40>
 8001cfe:	f7ff fe73 	bl	80019e8 <MQ135_getCorrectPPM>
 8001d02:	eeb0 7a40 	vmov.f32	s14, s0
 8001d06:	eef0 7a60 	vmov.f32	s15, s1
}
 8001d0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d0e:	eef0 0a67 	vmov.f32	s1, s15
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	c01e45a2 	.word	0xc01e45a2
 8001d1c:	42cc6666 	.word	0x42cc6666

08001d20 <MQ135_getToluene>:

double MQ135_getToluene(uint32_t ADC_val) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	return MQ135_getPPM(44.947, -3.445, ADC_val);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001d4c <MQ135_getToluene+0x2c>
 8001d2e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001d50 <MQ135_getToluene+0x30>
 8001d32:	f7ff fe09 	bl	8001948 <MQ135_getPPM>
 8001d36:	eeb0 7a40 	vmov.f32	s14, s0
 8001d3a:	eef0 7a60 	vmov.f32	s15, s1
}
 8001d3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d42:	eef0 0a67 	vmov.f32	s1, s15
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	c05c7ae1 	.word	0xc05c7ae1
 8001d50:	4233c9ba 	.word	0x4233c9ba

08001d54 <MQ135_getCorrectToluene>:

double MQ135_getCorrectToluene(float tem, float hum, uint32_t ADC_val) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d62:	6078      	str	r0, [r7, #4]
	return MQ135_getCorrectPPM(44.947, -3.445, tem, hum, ADC_val);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	edd7 1a02 	vldr	s3, [r7, #8]
 8001d6a:	ed97 1a03 	vldr	s2, [r7, #12]
 8001d6e:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001d90 <MQ135_getCorrectToluene+0x3c>
 8001d72:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001d94 <MQ135_getCorrectToluene+0x40>
 8001d76:	f7ff fe37 	bl	80019e8 <MQ135_getCorrectPPM>
 8001d7a:	eeb0 7a40 	vmov.f32	s14, s0
 8001d7e:	eef0 7a60 	vmov.f32	s15, s1
}
 8001d82:	eeb0 0a47 	vmov.f32	s0, s14
 8001d86:	eef0 0a67 	vmov.f32	s1, s15
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	c05c7ae1 	.word	0xc05c7ae1
 8001d94:	4233c9ba 	.word	0x4233c9ba

08001d98 <getAQI_val>:
 void MQ135::setR0(float r0) {
 R0 = r0;
 }
 */

void getAQI_val(Air_param_t *aqi, uint32_t ADC_val) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
	aqi->Acetone = MQ135_getAcetone(ADC_val);
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f7ff fe74 	bl	8001a90 <MQ135_getAcetone>
 8001da8:	ec53 2b10 	vmov	r2, r3, d0
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe ff02 	bl	8000bb8 <__aeabi_d2uiz>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	801a      	strh	r2, [r3, #0]
	aqi->Alcohol = MQ135_getAlcohol(ADC_val);
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f7ff fea3 	bl	8001b08 <MQ135_getAlcohol>
 8001dc2:	ec53 2b10 	vmov	r2, r3, d0
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe fef5 	bl	8000bb8 <__aeabi_d2uiz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	805a      	strh	r2, [r3, #2]
	aqi->CO = MQ135_getCO(ADC_val);
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f7ff ff2a 	bl	8001c30 <MQ135_getCO>
 8001ddc:	ec53 2b10 	vmov	r2, r3, d0
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f7fe fee8 	bl	8000bb8 <__aeabi_d2uiz>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	809a      	strh	r2, [r3, #4]
	aqi->CO2 = MQ135_getCO2(ADC_val);
 8001df0:	6838      	ldr	r0, [r7, #0]
 8001df2:	f7ff fec5 	bl	8001b80 <MQ135_getCO2>
 8001df6:	ec53 2b10 	vmov	r2, r3, d0
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fedb 	bl	8000bb8 <__aeabi_d2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	80da      	strh	r2, [r3, #6]
	aqi->NH4 = MQ135_getNH4(ADC_val);
 8001e0a:	6838      	ldr	r0, [r7, #0]
 8001e0c:	f7ff ff4c 	bl	8001ca8 <MQ135_getNH4>
 8001e10:	ec53 2b10 	vmov	r2, r3, d0
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe fece 	bl	8000bb8 <__aeabi_d2uiz>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	811a      	strh	r2, [r3, #8]
	aqi->Toluene = MQ135_getToluene(ADC_val);
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f7ff ff7b 	bl	8001d20 <MQ135_getToluene>
 8001e2a:	ec53 2b10 	vmov	r2, r3, d0
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe fec1 	bl	8000bb8 <__aeabi_d2uiz>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	815a      	strh	r2, [r3, #10]
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <getAQI_Correctval>:

void getAQI_Correctval(Air_param_t *aqi, int tem, int hum, uint32_t ADC_val) {
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
	aqi->Acetone = MQ135_getCorrectAcetone(tem, hum, ADC_val);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	ee07 3a10 	vmov	s14, r3
 8001e64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	eef0 0a47 	vmov.f32	s1, s14
 8001e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e72:	f7ff fe27 	bl	8001ac4 <MQ135_getCorrectAcetone>
 8001e76:	ec53 2b10 	vmov	r2, r3, d0
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fe9b 	bl	8000bb8 <__aeabi_d2uiz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	801a      	strh	r2, [r3, #0]
	aqi->Alcohol = MQ135_getCorrectAlcohol(tem, hum, ADC_val);
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	ee07 3a10 	vmov	s14, r3
 8001e9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e9e:	6838      	ldr	r0, [r7, #0]
 8001ea0:	eef0 0a47 	vmov.f32	s1, s14
 8001ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea8:	f7ff fe48 	bl	8001b3c <MQ135_getCorrectAlcohol>
 8001eac:	ec53 2b10 	vmov	r2, r3, d0
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fe80 	bl	8000bb8 <__aeabi_d2uiz>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	805a      	strh	r2, [r3, #2]
	aqi->CO = MQ135_getCorrectCO(tem, hum, ADC_val);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	ee07 3a10 	vmov	s14, r3
 8001ed0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ed4:	6838      	ldr	r0, [r7, #0]
 8001ed6:	eef0 0a47 	vmov.f32	s1, s14
 8001eda:	eeb0 0a67 	vmov.f32	s0, s15
 8001ede:	f7ff fec1 	bl	8001c64 <MQ135_getCorrectCO>
 8001ee2:	ec53 2b10 	vmov	r2, r3, d0
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fe65 	bl	8000bb8 <__aeabi_d2uiz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	809a      	strh	r2, [r3, #4]
	aqi->CO2 = MQ135_getCorrectCO2(tem, hum, ADC_val);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	ee07 3a10 	vmov	s14, r3
 8001f06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f0a:	6838      	ldr	r0, [r7, #0]
 8001f0c:	eef0 0a47 	vmov.f32	s1, s14
 8001f10:	eeb0 0a67 	vmov.f32	s0, s15
 8001f14:	f7ff fe5c 	bl	8001bd0 <MQ135_getCorrectCO2>
 8001f18:	ec53 2b10 	vmov	r2, r3, d0
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7fe fe4a 	bl	8000bb8 <__aeabi_d2uiz>
 8001f24:	4603      	mov	r3, r0
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	80da      	strh	r2, [r3, #6]
	aqi->NH4 = MQ135_getCorrectNH4(tem, hum, ADC_val);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	ee07 3a10 	vmov	s14, r3
 8001f3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f40:	6838      	ldr	r0, [r7, #0]
 8001f42:	eef0 0a47 	vmov.f32	s1, s14
 8001f46:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4a:	f7ff fec7 	bl	8001cdc <MQ135_getCorrectNH4>
 8001f4e:	ec53 2b10 	vmov	r2, r3, d0
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7fe fe2f 	bl	8000bb8 <__aeabi_d2uiz>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	811a      	strh	r2, [r3, #8]
	aqi->Toluene = MQ135_getCorrectToluene(tem, hum, ADC_val);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	ee07 3a10 	vmov	s14, r3
 8001f72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f76:	6838      	ldr	r0, [r7, #0]
 8001f78:	eef0 0a47 	vmov.f32	s1, s14
 8001f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f80:	f7ff fee8 	bl	8001d54 <MQ135_getCorrectToluene>
 8001f84:	ec53 2b10 	vmov	r2, r3, d0
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fe14 	bl	8000bb8 <__aeabi_d2uiz>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	815a      	strh	r2, [r3, #10]
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t byte) {
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af04      	add	r7, sp, #16
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	1cfb      	adds	r3, r7, #3
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2178      	movs	r1, #120	; 0x78
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f003 faaa 	bl	8005528 <HAL_I2C_Mem_Write>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(I2C_HandleTypeDef *hi2c, uint8_t* buffer, size_t buff_size) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	9202      	str	r2, [sp, #8]
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	2240      	movs	r2, #64	; 0x40
 8001ffc:	2178      	movs	r1, #120	; 0x78
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f003 fa92 	bl	8005528 <HAL_I2C_Mem_Write>
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(I2C_HandleTypeDef *hi2c) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    // Reset OLED
    ssd1306_Reset();
 8002014:	f7ff ffc4 	bl	8001fa0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002018:	2064      	movs	r0, #100	; 0x64
 800201a:	f001 fe7b 	bl	8003d14 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(hi2c, 0); //display off
 800201e:	2100      	movs	r1, #0
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f993 	bl	800234c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(hi2c, 0x20); //Set Memory Addressing Mode
 8002026:	2120      	movs	r1, #32
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ffc0 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800202e:	2100      	movs	r1, #0
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ffbc 	bl	8001fae <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(hi2c, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002036:	21b0      	movs	r1, #176	; 0xb0
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffb8 	bl	8001fae <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(hi2c, 0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(hi2c, 0xC8); //Set COM Output Scan Direction
 800203e:	21c8      	movs	r1, #200	; 0xc8
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ffb4 	bl	8001fae <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(hi2c, 0x00); //---set low column address
 8002046:	2100      	movs	r1, #0
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ffb0 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x10); //---set high column address
 800204e:	2110      	movs	r1, #16
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ffac 	bl	8001fae <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0x40); //--set start line address - CHECK
 8002056:	2140      	movs	r1, #64	; 0x40
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ffa8 	bl	8001fae <ssd1306_WriteCommand>

    ssd1306_SetContrast(hi2c, 0xFF);
 800205e:	21ff      	movs	r1, #255	; 0xff
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f95c 	bl	800231e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(hi2c, 0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(hi2c, 0xA1); //--set segment re-map 0 to 127 - CHECK
 8002066:	21a1      	movs	r1, #161	; 0xa1
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ffa0 	bl	8001fae <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(hi2c, 0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(hi2c, 0xA6); //--set normal color
 800206e:	21a6      	movs	r1, #166	; 0xa6
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff9c 	bl	8001fae <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(hi2c, 0xFF);
#else
    ssd1306_WriteCommand(hi2c, 0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002076:	21a8      	movs	r1, #168	; 0xa8
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff98 	bl	8001fae <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(hi2c, 0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(hi2c, 0x3F); //
 800207e:	213f      	movs	r1, #63	; 0x3f
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff94 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(hi2c, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002086:	21a4      	movs	r1, #164	; 0xa4
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff90 	bl	8001fae <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0xD3); //-set display offset - CHECK
 800208e:	21d3      	movs	r1, #211	; 0xd3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff8c 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x00); //-not offset
 8002096:	2100      	movs	r1, #0
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff88 	bl	8001fae <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0xD5); //--set display clock divide ratio/oscillator frequency
 800209e:	21d5      	movs	r1, #213	; 0xd5
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff84 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0xF0); //--set divide ratio
 80020a6:	21f0      	movs	r1, #240	; 0xf0
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff80 	bl	8001fae <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0xD9); //--set pre-charge period
 80020ae:	21d9      	movs	r1, #217	; 0xd9
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff7c 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x22); //
 80020b6:	2122      	movs	r1, #34	; 0x22
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff78 	bl	8001fae <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0xDA); //--set com pins hardware configuration - CHECK
 80020be:	21da      	movs	r1, #218	; 0xda
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff74 	bl	8001fae <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(hi2c, 0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(hi2c, 0x12);
 80020c6:	2112      	movs	r1, #18
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff70 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(hi2c, 0xDB); //--set vcomh
 80020ce:	21db      	movs	r1, #219	; 0xdb
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff6c 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x20); //0x20,0.77xVcc
 80020d6:	2120      	movs	r1, #32
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff68 	bl	8001fae <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0x8D); //--set DC-DC enable
 80020de:	218d      	movs	r1, #141	; 0x8d
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff64 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x14); //
 80020e6:	2114      	movs	r1, #20
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff60 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(hi2c, 1); //--turn on SSD1306 panel
 80020ee:	2101      	movs	r1, #1
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f92b 	bl	800234c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 f812 	bl	8002120 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f833 	bl	8002168 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <ssd1306_Init+0x110>)
 8002104:	2200      	movs	r2, #0
 8002106:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <ssd1306_Init+0x110>)
 800210a:	2200      	movs	r2, #0
 800210c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800210e:	4b03      	ldr	r3, [pc, #12]	; (800211c <ssd1306_Init+0x110>)
 8002110:	2201      	movs	r2, #1
 8002112:	711a      	strb	r2, [r3, #4]
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	2000066c 	.word	0x2000066c

08002120 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e00d      	b.n	800214c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <ssd1306_Fill+0x1a>
 8002136:	2100      	movs	r1, #0
 8002138:	e000      	b.n	800213c <ssd1306_Fill+0x1c>
 800213a:	21ff      	movs	r1, #255	; 0xff
 800213c:	4a09      	ldr	r2, [pc, #36]	; (8002164 <ssd1306_Fill+0x44>)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4413      	add	r3, r2
 8002142:	460a      	mov	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3301      	adds	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002152:	d3ed      	bcc.n	8002130 <ssd1306_Fill+0x10>
    }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	2000026c 	.word	0x2000026c

08002168 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e01a      	b.n	80021ac <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(hi2c, 0xB0 + i); // Set the current RAM page address.
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	3b50      	subs	r3, #80	; 0x50
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff15 	bl	8001fae <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00 + SSD1306_X_OFFSET_LOWER);
 8002184:	2100      	movs	r1, #0
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff11 	bl	8001fae <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10 + SSD1306_X_OFFSET_UPPER);
 800218c:	2110      	movs	r1, #16
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff0d 	bl	8001fae <ssd1306_WriteCommand>
        ssd1306_WriteData(hi2c, &SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	01db      	lsls	r3, r3, #7
 8002198:	4a08      	ldr	r2, [pc, #32]	; (80021bc <ssd1306_UpdateScreen+0x54>)
 800219a:	4413      	add	r3, r2
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	4619      	mov	r1, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff1b 	bl	8001fdc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	3301      	adds	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b07      	cmp	r3, #7
 80021b0:	d9e1      	bls.n	8002176 <ssd1306_UpdateScreen+0xe>
    }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	2000026c 	.word	0x2000026c

080021c0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	460b      	mov	r3, r1
 80021cc:	71bb      	strb	r3, [r7, #6]
 80021ce:	4613      	mov	r3, r2
 80021d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db3d      	blt.n	8002256 <ssd1306_DrawPixel+0x96>
 80021da:	79bb      	ldrb	r3, [r7, #6]
 80021dc:	2b3f      	cmp	r3, #63	; 0x3f
 80021de:	d83a      	bhi.n	8002256 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80021e0:	797b      	ldrb	r3, [r7, #5]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d11a      	bne.n	800221c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80021e6:	79fa      	ldrb	r2, [r7, #7]
 80021e8:	79bb      	ldrb	r3, [r7, #6]
 80021ea:	08db      	lsrs	r3, r3, #3
 80021ec:	b2d8      	uxtb	r0, r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	01db      	lsls	r3, r3, #7
 80021f2:	4413      	add	r3, r2
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <ssd1306_DrawPixel+0xa4>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	b25a      	sxtb	r2, r3
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	b25b      	sxtb	r3, r3
 8002208:	4313      	orrs	r3, r2
 800220a:	b259      	sxtb	r1, r3
 800220c:	79fa      	ldrb	r2, [r7, #7]
 800220e:	4603      	mov	r3, r0
 8002210:	01db      	lsls	r3, r3, #7
 8002212:	4413      	add	r3, r2
 8002214:	b2c9      	uxtb	r1, r1
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <ssd1306_DrawPixel+0xa4>)
 8002218:	54d1      	strb	r1, [r2, r3]
 800221a:	e01d      	b.n	8002258 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	79bb      	ldrb	r3, [r7, #6]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	b2d8      	uxtb	r0, r3
 8002224:	4603      	mov	r3, r0
 8002226:	01db      	lsls	r3, r3, #7
 8002228:	4413      	add	r3, r2
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <ssd1306_DrawPixel+0xa4>)
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	b25a      	sxtb	r2, r3
 8002230:	79bb      	ldrb	r3, [r7, #6]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25b      	sxtb	r3, r3
 8002242:	4013      	ands	r3, r2
 8002244:	b259      	sxtb	r1, r3
 8002246:	79fa      	ldrb	r2, [r7, #7]
 8002248:	4603      	mov	r3, r0
 800224a:	01db      	lsls	r3, r3, #7
 800224c:	4413      	add	r3, r2
 800224e:	b2c9      	uxtb	r1, r1
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <ssd1306_DrawPixel+0xa4>)
 8002252:	54d1      	strb	r1, [r2, r3]
 8002254:	e000      	b.n	8002258 <ssd1306_DrawPixel+0x98>
        return;
 8002256:	bf00      	nop
    }
}
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000026c 	.word	0x2000026c

08002268 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	603a      	str	r2, [r7, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	460b      	mov	r3, r1
 8002278:	71bb      	strb	r3, [r7, #6]
 800227a:	4613      	mov	r3, r2
 800227c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800227e:	797b      	ldrb	r3, [r7, #5]
 8002280:	3307      	adds	r3, #7
 8002282:	2b00      	cmp	r3, #0
 8002284:	da00      	bge.n	8002288 <ssd1306_DrawBitmap+0x20>
 8002286:	3307      	adds	r3, #7
 8002288:	10db      	asrs	r3, r3, #3
 800228a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db3e      	blt.n	8002316 <ssd1306_DrawBitmap+0xae>
 8002298:	79bb      	ldrb	r3, [r7, #6]
 800229a:	2b3f      	cmp	r3, #63	; 0x3f
 800229c:	d83b      	bhi.n	8002316 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800229e:	2300      	movs	r3, #0
 80022a0:	73bb      	strb	r3, [r7, #14]
 80022a2:	e033      	b.n	800230c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80022a4:	2300      	movs	r3, #0
 80022a6:	737b      	strb	r3, [r7, #13]
 80022a8:	e026      	b.n	80022f8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80022aa:	7b7b      	ldrb	r3, [r7, #13]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	e00d      	b.n	80022d8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80022bc:	7bbb      	ldrb	r3, [r7, #14]
 80022be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	7b7a      	ldrb	r2, [r7, #13]
 80022c8:	08d2      	lsrs	r2, r2, #3
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	4413      	add	r3, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80022d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da08      	bge.n	80022f2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80022e0:	79fa      	ldrb	r2, [r7, #7]
 80022e2:	7b7b      	ldrb	r3, [r7, #13]
 80022e4:	4413      	add	r3, r2
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	7f3a      	ldrb	r2, [r7, #28]
 80022ea:	79b9      	ldrb	r1, [r7, #6]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff67 	bl	80021c0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80022f2:	7b7b      	ldrb	r3, [r7, #13]
 80022f4:	3301      	adds	r3, #1
 80022f6:	737b      	strb	r3, [r7, #13]
 80022f8:	7b7a      	ldrb	r2, [r7, #13]
 80022fa:	797b      	ldrb	r3, [r7, #5]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d3d4      	bcc.n	80022aa <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	3301      	adds	r3, #1
 8002304:	73bb      	strb	r3, [r7, #14]
 8002306:	79bb      	ldrb	r3, [r7, #6]
 8002308:	3301      	adds	r3, #1
 800230a:	71bb      	strb	r3, [r7, #6]
 800230c:	7bba      	ldrb	r2, [r7, #14]
 800230e:	7e3b      	ldrb	r3, [r7, #24]
 8002310:	429a      	cmp	r2, r3
 8002312:	d3c7      	bcc.n	80022a4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002314:	e000      	b.n	8002318 <ssd1306_DrawBitmap+0xb0>
        return;
 8002316:	bf00      	nop
}
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <ssd1306_SetContrast>:

void ssd1306_SetContrast(I2C_HandleTypeDef *hi2c, const uint8_t value) {
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	70fb      	strb	r3, [r7, #3]
    const uint8_t kSetContrastControlRegister = 0x81;
 800232a:	2381      	movs	r3, #129	; 0x81
 800232c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(hi2c, kSetContrastControlRegister);
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fe3b 	bl	8001fae <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, value);
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fe36 	bl	8001fae <ssd1306_WriteCommand>
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(I2C_HandleTypeDef *hi2c, const uint8_t on) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    if (on) {
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <ssd1306_SetDisplayOn+0x1e>
        value = 0xAF;   // Display on
 800235e:	23af      	movs	r3, #175	; 0xaf
 8002360:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <ssd1306_SetDisplayOn+0x3c>)
 8002364:	2201      	movs	r2, #1
 8002366:	715a      	strb	r2, [r3, #5]
 8002368:	e004      	b.n	8002374 <ssd1306_SetDisplayOn+0x28>
    } else {
        value = 0xAE;   // Display off
 800236a:	23ae      	movs	r3, #174	; 0xae
 800236c:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <ssd1306_SetDisplayOn+0x3c>)
 8002370:	2200      	movs	r2, #0
 8002372:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(hi2c, value);
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4619      	mov	r1, r3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fe18 	bl	8001fae <ssd1306_WriteCommand>
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000066c 	.word	0x2000066c

0800238c <W25Q32_Init>:
GPIO_TypeDef *CS_PORT;
uint16_t CS_Pin;
SPI_HandleTypeDef *hspi;
uint8_t dum_byte = 0xff;

void W25Q32_Init(SPI_HandleTypeDef *hspix, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	4613      	mov	r3, r2
 8002398:	80fb      	strh	r3, [r7, #6]
	hspi = hspix;
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <W25Q32_Init+0x2c>)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6013      	str	r3, [r2, #0]
	CS_PORT = GPIOx;
 80023a0:	4a06      	ldr	r2, [pc, #24]	; (80023bc <W25Q32_Init+0x30>)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6013      	str	r3, [r2, #0]
	CS_Pin = GPIO_Pin;
 80023a6:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <W25Q32_Init+0x34>)
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	8013      	strh	r3, [r2, #0]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	2000067c 	.word	0x2000067c
 80023bc:	20000674 	.word	0x20000674
 80023c0:	20000678 	.word	0x20000678

080023c4 <W25Q32_CS_LOW>:

void W25Q32_CS_LOW() {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_Pin, 0);
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <W25Q32_CS_LOW+0x18>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <W25Q32_CS_LOW+0x1c>)
 80023ce:	8811      	ldrh	r1, [r2, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 fbf4 	bl	8004bc0 <HAL_GPIO_WritePin>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000674 	.word	0x20000674
 80023e0:	20000678 	.word	0x20000678

080023e4 <W25Q32_CS_HIGH>:

void W25Q32_CS_HIGH() {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_Pin, 1);
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <W25Q32_CS_HIGH+0x18>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <W25Q32_CS_HIGH+0x1c>)
 80023ee:	8811      	ldrh	r1, [r2, #0]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 fbe4 	bl	8004bc0 <HAL_GPIO_WritePin>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000674 	.word	0x20000674
 8002400:	20000678 	.word	0x20000678

08002404 <WriteEnable>:

void WriteEnable() {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
	uint8_t *tsm = malloc(sizeof(uint8_t));
 800240a:	2001      	movs	r0, #1
 800240c:	f006 fb52 	bl	8008ab4 <malloc>
 8002410:	4603      	mov	r3, r0
 8002412:	607b      	str	r3, [r7, #4]
	uint8_t *rev = malloc(sizeof(uint8_t));
 8002414:	2001      	movs	r0, #1
 8002416:	f006 fb4d 	bl	8008ab4 <malloc>
 800241a:	4603      	mov	r3, r0
 800241c:	603b      	str	r3, [r7, #0]
	tsm[0] = WRITE_EN;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2206      	movs	r2, #6
 8002422:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 8002424:	f7ff ffce 	bl	80023c4 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tsm, rev, 1);
 8002428:	2201      	movs	r2, #1
 800242a:	6839      	ldr	r1, [r7, #0]
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f867 	bl	8002500 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 8002432:	f7ff ffd7 	bl	80023e4 <W25Q32_CS_HIGH>

	free(tsm);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f006 fb44 	bl	8008ac4 <free>
	free(rev);
 800243c:	6838      	ldr	r0, [r7, #0]
 800243e:	f006 fb41 	bl	8008ac4 <free>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <WriteDisable>:

void WriteDisable() {
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
	uint8_t *tsm = (uint8_t*) malloc(sizeof(uint8_t));
 8002450:	2001      	movs	r0, #1
 8002452:	f006 fb2f 	bl	8008ab4 <malloc>
 8002456:	4603      	mov	r3, r0
 8002458:	607b      	str	r3, [r7, #4]
	uint8_t *rev = (uint8_t*) malloc(sizeof(uint8_t));
 800245a:	2001      	movs	r0, #1
 800245c:	f006 fb2a 	bl	8008ab4 <malloc>
 8002460:	4603      	mov	r3, r0
 8002462:	603b      	str	r3, [r7, #0]
	tsm[0] = WRITE_DIS;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2204      	movs	r2, #4
 8002468:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 800246a:	f7ff ffab 	bl	80023c4 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tsm, rev, 1);
 800246e:	2201      	movs	r2, #1
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f844 	bl	8002500 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 8002478:	f7ff ffb4 	bl	80023e4 <W25Q32_CS_HIGH>

	free(tsm);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f006 fb21 	bl	8008ac4 <free>
	free(rev);
 8002482:	6838      	ldr	r0, [r7, #0]
 8002484:	f006 fb1e 	bl	8008ac4 <free>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <W25Q32_WaitEndCycle>:

void W25Q32_WaitEndCycle() {
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
	W25Q32_CS_LOW();
 8002496:	f7ff ff95 	bl	80023c4 <W25Q32_CS_LOW>
	uint8_t check;
	uint8_t *tx = (uint8_t*) malloc(sizeof(uint8_t));
 800249a:	2001      	movs	r0, #1
 800249c:	f006 fb0a 	bl	8008ab4 <malloc>
 80024a0:	4603      	mov	r3, r0
 80024a2:	60fb      	str	r3, [r7, #12]
	uint8_t *rx = (uint8_t*) malloc(sizeof(uint8_t));
 80024a4:	2001      	movs	r0, #1
 80024a6:	f006 fb05 	bl	8008ab4 <malloc>
 80024aa:	4603      	mov	r3, r0
 80024ac:	60bb      	str	r3, [r7, #8]
	*tx = RDSR1;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2205      	movs	r2, #5
 80024b2:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 80024b4:	f7ff ff86 	bl	80023c4 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tx, rx, 1);
 80024b8:	2201      	movs	r2, #1
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f81f 	bl	8002500 <W25Q32_Send_Receive>
	do {
		*tx = dum_byte;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <W25Q32_WaitEndCycle+0x6c>)
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	701a      	strb	r2, [r3, #0]
		W25Q32_Send_Receive(tx, rx, 1);
 80024ca:	2201      	movs	r2, #1
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f816 	bl	8002500 <W25Q32_Send_Receive>
		check = *rx;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	71fb      	strb	r3, [r7, #7]
	} while (check & 0x01);
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ee      	bne.n	80024c2 <W25Q32_WaitEndCycle+0x32>
	W25Q32_CS_HIGH();
 80024e4:	f7ff ff7e 	bl	80023e4 <W25Q32_CS_HIGH>
	free(tx);
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f006 faeb 	bl	8008ac4 <free>
	free(rx);
 80024ee:	68b8      	ldr	r0, [r7, #8]
 80024f0:	f006 fae8 	bl	8008ac4 <free>
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000008 	.word	0x20000008

08002500 <W25Q32_Send_Receive>:

void W25Q32_Send_Receive(uint8_t *tx_buf, uint8_t *rx_buf, uint16_t tx_num) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
	rx_spi_flg = 0;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <W25Q32_Send_Receive+0x3c>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive_IT(hspi, tx_buf, rx_buf, tx_num);
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <W25Q32_Send_Receive+0x40>)
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	68f9      	ldr	r1, [r7, #12]
 800251e:	f004 f9a3 	bl	8006868 <HAL_SPI_TransmitReceive_IT>
	while (!rx_spi_flg) {
 8002522:	bf00      	nop
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <W25Q32_Send_Receive+0x3c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f083 0301 	eor.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f8      	bne.n	8002524 <W25Q32_Send_Receive+0x24>
	}
}
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	2000089c 	.word	0x2000089c
 8002540:	2000067c 	.word	0x2000067c

08002544 <W25Q32_ReadData>:

void W25Q32_ReadData(uint8_t *pBuffer, uint32_t ReadAddr, uint16_t len) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
	W25Q32_CS_LOW();
 8002552:	f7ff ff37 	bl	80023c4 <W25Q32_CS_LOW>

	uint8_t *cmd = malloc(sizeof(uint8_t) * (4 + len));
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	3304      	adds	r3, #4
 800255a:	4618      	mov	r0, r3
 800255c:	f006 faaa 	bl	8008ab4 <malloc>
 8002560:	4603      	mov	r3, r0
 8002562:	617b      	str	r3, [r7, #20]
	uint8_t *ret = malloc(sizeof(uint8_t) * len);
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	4618      	mov	r0, r3
 8002568:	f006 faa4 	bl	8008ab4 <malloc>
 800256c:	4603      	mov	r3, r0
 800256e:	613b      	str	r3, [r7, #16]
	cmd[0] = READ_DATA;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2203      	movs	r2, #3
 8002574:	701a      	strb	r2, [r3, #0]
	cmd[1] = (ReadAddr & 0x00FF0000) >> 16;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	0c1a      	lsrs	r2, r3, #16
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]
	cmd[2] = (ReadAddr & 0x0000FF00) >> 8;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	0a1a      	lsrs	r2, r3, #8
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3302      	adds	r3, #2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
	cmd[3] = ReadAddr & 0x000000FF;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3303      	adds	r3, #3
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
	W25Q32_Send_Receive(cmd, ret, 4);
 8002598:	2204      	movs	r2, #4
 800259a:	6939      	ldr	r1, [r7, #16]
 800259c:	6978      	ldr	r0, [r7, #20]
 800259e:	f7ff ffaf 	bl	8002500 <W25Q32_Send_Receive>
	W25Q32_Send_Receive(cmd + 4, pBuffer , len);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3304      	adds	r3, #4
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	68f9      	ldr	r1, [r7, #12]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ffa8 	bl	8002500 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80025b0:	f7ff ff18 	bl	80023e4 <W25Q32_CS_HIGH>
	free(cmd);
 80025b4:	6978      	ldr	r0, [r7, #20]
 80025b6:	f006 fa85 	bl	8008ac4 <free>
	free(ret);
 80025ba:	6938      	ldr	r0, [r7, #16]
 80025bc:	f006 fa82 	bl	8008ac4 <free>
}
 80025c0:	bf00      	nop
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <W25Q32_WriteData>:

void W25Q32_WriteData(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t len) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = malloc(sizeof(uint8_t) * (4 + len));
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	3304      	adds	r3, #4
 80025da:	4618      	mov	r0, r3
 80025dc:	f006 fa6a 	bl	8008ab4 <malloc>
 80025e0:	4603      	mov	r3, r0
 80025e2:	61bb      	str	r3, [r7, #24]
	uint8_t *data = malloc(sizeof(uint8_t) * len);
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f006 fa64 	bl	8008ab4 <malloc>
 80025ec:	4603      	mov	r3, r0
 80025ee:	617b      	str	r3, [r7, #20]
	uint8_t *ret = malloc(sizeof(uint8_t) * len);
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f006 fa5e 	bl	8008ab4 <malloc>
 80025f8:	4603      	mov	r3, r0
 80025fa:	613b      	str	r3, [r7, #16]

	WriteEnable();
 80025fc:	f7ff ff02 	bl	8002404 <WriteEnable>
	W25Q32_CS_LOW();
 8002600:	f7ff fee0 	bl	80023c4 <W25Q32_CS_LOW>
	cmd[0] = PAGE_PROGRAM;
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2202      	movs	r2, #2
 8002608:	701a      	strb	r2, [r3, #0]
	cmd[1] = (WriteAddr & 0x00FF0000) >> 16;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	0c1a      	lsrs	r2, r3, #16
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	3301      	adds	r3, #1
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
	cmd[2] = (WriteAddr & 0x0000FF00) >> 8;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	0a1a      	lsrs	r2, r3, #8
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	3302      	adds	r3, #2
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
	cmd[3] = WriteAddr & 0x000000FF;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3303      	adds	r3, #3
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
	W25Q32_Send_Receive(cmd, data, 4);
 800262c:	2204      	movs	r2, #4
 800262e:	6979      	ldr	r1, [r7, #20]
 8002630:	69b8      	ldr	r0, [r7, #24]
 8002632:	f7ff ff65 	bl	8002500 <W25Q32_Send_Receive>
	for (uint8_t i = 0; i < len; i++) {
 8002636:	2300      	movs	r3, #0
 8002638:	77fb      	strb	r3, [r7, #31]
 800263a:	e00a      	b.n	8002652 <W25Q32_WriteData+0x8a>
		*(data + i) = *(pBuffer + i);
 800263c:	7ffb      	ldrb	r3, [r7, #31]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	441a      	add	r2, r3
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	6979      	ldr	r1, [r7, #20]
 8002646:	440b      	add	r3, r1
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 800264c:	7ffb      	ldrb	r3, [r7, #31]
 800264e:	3301      	adds	r3, #1
 8002650:	77fb      	strb	r3, [r7, #31]
 8002652:	7ffb      	ldrb	r3, [r7, #31]
 8002654:	b29b      	uxth	r3, r3
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	429a      	cmp	r2, r3
 800265a:	d8ef      	bhi.n	800263c <W25Q32_WriteData+0x74>
	}
	W25Q32_Send_Receive(data, ret, len);
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	461a      	mov	r2, r3
 8002660:	6939      	ldr	r1, [r7, #16]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff4c 	bl	8002500 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 8002668:	f7ff febc 	bl	80023e4 <W25Q32_CS_HIGH>
	W25Q32_WaitEndCycle();
 800266c:	f7ff ff10 	bl	8002490 <W25Q32_WaitEndCycle>
	WriteDisable();
 8002670:	f7ff feeb 	bl	800244a <WriteDisable>
	free(cmd);
 8002674:	69b8      	ldr	r0, [r7, #24]
 8002676:	f006 fa25 	bl	8008ac4 <free>
	free(data);
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f006 fa22 	bl	8008ac4 <free>
}
 8002680:	bf00      	nop
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <W25Q32_erase4k>:

void W25Q32_erase4k(uint32_t add) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	uint8_t *cmd = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8002690:	2004      	movs	r0, #4
 8002692:	f006 fa0f 	bl	8008ab4 <malloc>
 8002696:	4603      	mov	r3, r0
 8002698:	60fb      	str	r3, [r7, #12]
	uint8_t *ret = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 800269a:	2004      	movs	r0, #4
 800269c:	f006 fa0a 	bl	8008ab4 <malloc>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60bb      	str	r3, [r7, #8]
	cmd[0] = ERASE_SECTOR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	701a      	strb	r2, [r3, #0]
	cmd[1] = (add & 0x00FF0000) >> 16;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0c1a      	lsrs	r2, r3, #16
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3301      	adds	r3, #1
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
	cmd[2] = (add & 0x0000FF00) >> 8;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0a1a      	lsrs	r2, r3, #8
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3302      	adds	r3, #2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]
	cmd[3] = add & 0x0000000FF;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3303      	adds	r3, #3
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

	WriteEnable();
 80026cc:	f7ff fe9a 	bl	8002404 <WriteEnable>
	W25Q32_CS_LOW();
 80026d0:	f7ff fe78 	bl	80023c4 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(cmd, ret, 4);
 80026d4:	2204      	movs	r2, #4
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff ff11 	bl	8002500 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80026de:	f7ff fe81 	bl	80023e4 <W25Q32_CS_HIGH>
	W25Q32_WaitEndCycle();
 80026e2:	f7ff fed5 	bl	8002490 <W25Q32_WaitEndCycle>
	WriteDisable();
 80026e6:	f7ff feb0 	bl	800244a <WriteDisable>
	free(cmd);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f006 f9ea 	bl	8008ac4 <free>
	free(ret);
 80026f0:	68b8      	ldr	r0, [r7, #8]
 80026f2:	f006 f9e7 	bl	8008ac4 <free>
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002702:	b08b      	sub	sp, #44	; 0x2c
 8002704:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002706:	f001 fa93 	bl	8003c30 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800270a:	f000 f9a5 	bl	8002a58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800270e:	f000 fba9 	bl	8002e64 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002712:	f000 fa51 	bl	8002bb8 <MX_I2C1_Init>
	MX_TIM2_Init();
 8002716:	f000 fae1 	bl	8002cdc <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800271a:	f000 fb79 	bl	8002e10 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800271e:	f000 f9f9 	bl	8002b14 <MX_ADC1_Init>
	MX_I2C2_Init();
 8002722:	f000 fa77 	bl	8002c14 <MX_I2C2_Init>
	MX_TIM3_Init();
 8002726:	f000 fb25 	bl	8002d74 <MX_TIM3_Init>
	MX_SPI1_Init();
 800272a:	f000 faa1 	bl	8002c70 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 800272e:	4882      	ldr	r0, [pc, #520]	; (8002938 <main+0x238>)
 8002730:	f004 fd28 	bl	8007184 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8002734:	4881      	ldr	r0, [pc, #516]	; (800293c <main+0x23c>)
 8002736:	f004 fca3 	bl	8007080 <HAL_TIM_Base_Start>
	ssd1306_Init(&hi2c1);
 800273a:	4881      	ldr	r0, [pc, #516]	; (8002940 <main+0x240>)
 800273c:	f7ff fc66 	bl	800200c <ssd1306_Init>
	W25Q32_Init(&hspi1, GPIOB, GPIO_PIN_0);
 8002740:	2201      	movs	r2, #1
 8002742:	4980      	ldr	r1, [pc, #512]	; (8002944 <main+0x244>)
 8002744:	4880      	ldr	r0, [pc, #512]	; (8002948 <main+0x248>)
 8002746:	f7ff fe21 	bl	800238c <W25Q32_Init>
	init_dht11(&dht11, &htim3, GPIOB, GPIO_PIN_13);
 800274a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800274e:	4a7d      	ldr	r2, [pc, #500]	; (8002944 <main+0x244>)
 8002750:	497a      	ldr	r1, [pc, #488]	; (800293c <main+0x23c>)
 8002752:	487e      	ldr	r0, [pc, #504]	; (800294c <main+0x24c>)
 8002754:	f7fe fc58 	bl	8001008 <init_dht11>
	DS1307_config(&hi2c2);
 8002758:	487d      	ldr	r0, [pc, #500]	; (8002950 <main+0x250>)
 800275a:	f7fe ffc5 	bl	80016e8 <DS1307_config>
	DS1307_settime(&hi2c2, 00, 33, 14, 6, 8, 9, 2023);
 800275e:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8002762:	9303      	str	r3, [sp, #12]
 8002764:	2309      	movs	r3, #9
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	2308      	movs	r3, #8
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	2306      	movs	r3, #6
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	230e      	movs	r3, #14
 8002772:	2221      	movs	r2, #33	; 0x21
 8002774:	2100      	movs	r1, #0
 8002776:	4876      	ldr	r0, [pc, #472]	; (8002950 <main+0x250>)
 8002778:	f7fe fee2 	bl	8001540 <DS1307_settime>
	HAL_UART_Receive_IT(&huart1, &chr, sizeof(chr));
 800277c:	2201      	movs	r2, #1
 800277e:	4975      	ldr	r1, [pc, #468]	; (8002954 <main+0x254>)
 8002780:	4875      	ldr	r0, [pc, #468]	; (8002958 <main+0x258>)
 8002782:	f005 f9d4 	bl	8007b2e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800278c:	4873      	ldr	r0, [pc, #460]	; (800295c <main+0x25c>)
 800278e:	f002 fa17 	bl	8004bc0 <HAL_GPIO_WritePin>
	Display_First_Screen(&hi2c1);
 8002792:	486b      	ldr	r0, [pc, #428]	; (8002940 <main+0x240>)
 8002794:	f000 fc1a 	bl	8002fcc <Display_First_Screen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HandleCommand();
 8002798:	f000 fdfc 	bl	8003394 <HandleCommand>
		if (sys_tick - get_inf_tick >= 10000) {
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <main+0x260>)
 800279e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027a2:	4b70      	ldr	r3, [pc, #448]	; (8002964 <main+0x264>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	1a84      	subs	r4, r0, r2
 80027aa:	eb61 0503 	sbc.w	r5, r1, r3
 80027ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80027b2:	429c      	cmp	r4, r3
 80027b4:	f175 0300 	sbcs.w	r3, r5, #0
 80027b8:	f0c0 8137 	bcc.w	8002a2a <main+0x32a>
			DS1307_gettime(&hi2c2, &ds1307);
 80027bc:	496a      	ldr	r1, [pc, #424]	; (8002968 <main+0x268>)
 80027be:	4864      	ldr	r0, [pc, #400]	; (8002950 <main+0x250>)
 80027c0:	f7fe fe1c 	bl	80013fc <DS1307_gettime>
			day = checkDay_i(ds1307.dow);
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <main+0x268>)
 80027c6:	78db      	ldrb	r3, [r3, #3]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fc7b 	bl	80030c4 <checkDay_i>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4a66      	ldr	r2, [pc, #408]	; (800296c <main+0x26c>)
 80027d2:	6013      	str	r3, [r2, #0]
			sprintf((char*) tx_buf, "[%d]\n%-9s %02d:%02d:%02d %02d/%02d/%d\n",
					(int) (sys_tick / 1000), day, ds1307.hour, ds1307.min,
 80027d4:	4b62      	ldr	r3, [pc, #392]	; (8002960 <main+0x260>)
 80027d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	f7fe fa59 	bl	8000c98 <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
			sprintf((char*) tx_buf, "[%d]\n%-9s %02d:%02d:%02d %02d/%02d/%d\n",
 80027ea:	4694      	mov	ip, r2
 80027ec:	4b5f      	ldr	r3, [pc, #380]	; (800296c <main+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
					(int) (sys_tick / 1000), day, ds1307.hour, ds1307.min,
 80027f0:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <main+0x268>)
 80027f2:	7892      	ldrb	r2, [r2, #2]
			sprintf((char*) tx_buf, "[%d]\n%-9s %02d:%02d:%02d %02d/%02d/%d\n",
 80027f4:	4611      	mov	r1, r2
					(int) (sys_tick / 1000), day, ds1307.hour, ds1307.min,
 80027f6:	4a5c      	ldr	r2, [pc, #368]	; (8002968 <main+0x268>)
 80027f8:	7852      	ldrb	r2, [r2, #1]
			sprintf((char*) tx_buf, "[%d]\n%-9s %02d:%02d:%02d %02d/%02d/%d\n",
 80027fa:	4610      	mov	r0, r2
					ds1307.sec, ds1307.date, ds1307.month, ds1307.year);
 80027fc:	4a5a      	ldr	r2, [pc, #360]	; (8002968 <main+0x268>)
 80027fe:	7812      	ldrb	r2, [r2, #0]
			sprintf((char*) tx_buf, "[%d]\n%-9s %02d:%02d:%02d %02d/%02d/%d\n",
 8002800:	4616      	mov	r6, r2
					ds1307.sec, ds1307.date, ds1307.month, ds1307.year);
 8002802:	4a59      	ldr	r2, [pc, #356]	; (8002968 <main+0x268>)
 8002804:	7912      	ldrb	r2, [r2, #4]
			sprintf((char*) tx_buf, "[%d]\n%-9s %02d:%02d:%02d %02d/%02d/%d\n",
 8002806:	607a      	str	r2, [r7, #4]
					ds1307.sec, ds1307.date, ds1307.month, ds1307.year);
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <main+0x268>)
 800280a:	7952      	ldrb	r2, [r2, #5]
			sprintf((char*) tx_buf, "[%d]\n%-9s %02d:%02d:%02d %02d/%02d/%d\n",
 800280c:	603a      	str	r2, [r7, #0]
					ds1307.sec, ds1307.date, ds1307.month, ds1307.year);
 800280e:	4a56      	ldr	r2, [pc, #344]	; (8002968 <main+0x268>)
 8002810:	88d2      	ldrh	r2, [r2, #6]
			sprintf((char*) tx_buf, "[%d]\n%-9s %02d:%02d:%02d %02d/%02d/%d\n",
 8002812:	9205      	str	r2, [sp, #20]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	9204      	str	r2, [sp, #16]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	9203      	str	r2, [sp, #12]
 800281c:	9602      	str	r6, [sp, #8]
 800281e:	9001      	str	r0, [sp, #4]
 8002820:	9100      	str	r1, [sp, #0]
 8002822:	4662      	mov	r2, ip
 8002824:	4952      	ldr	r1, [pc, #328]	; (8002970 <main+0x270>)
 8002826:	4853      	ldr	r0, [pc, #332]	; (8002974 <main+0x274>)
 8002828:	f007 f8f4 	bl	8009a14 <siprintf>
			HAL_UART_Transmit(&huart1, tx_buf, strlen((char*) tx_buf), 200);
 800282c:	4851      	ldr	r0, [pc, #324]	; (8002974 <main+0x274>)
 800282e:	f7fd fcd7 	bl	80001e0 <strlen>
 8002832:	4603      	mov	r3, r0
 8002834:	b29a      	uxth	r2, r3
 8002836:	23c8      	movs	r3, #200	; 0xc8
 8002838:	494e      	ldr	r1, [pc, #312]	; (8002974 <main+0x274>)
 800283a:	4847      	ldr	r0, [pc, #284]	; (8002958 <main+0x258>)
 800283c:	f005 f8e5 	bl	8007a0a <HAL_UART_Transmit>
			memset(tx_buf, 0, strlen((char*) tx_buf));
 8002840:	484c      	ldr	r0, [pc, #304]	; (8002974 <main+0x274>)
 8002842:	f7fd fccd 	bl	80001e0 <strlen>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	2100      	movs	r1, #0
 800284c:	4849      	ldr	r0, [pc, #292]	; (8002974 <main+0x274>)
 800284e:	f006 f969 	bl	8008b24 <memset>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002856:	4841      	ldr	r0, [pc, #260]	; (800295c <main+0x25c>)
 8002858:	f002 f9cb 	bl	8004bf2 <HAL_GPIO_TogglePin>
			getADC_value(&hadc1, 1000, &ADC_val);
 800285c:	4a46      	ldr	r2, [pc, #280]	; (8002978 <main+0x278>)
 800285e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002862:	4846      	ldr	r0, [pc, #280]	; (800297c <main+0x27c>)
 8002864:	f000 fc9a 	bl	800319c <getADC_value>
			readDHT11(&dht11);
 8002868:	4838      	ldr	r0, [pc, #224]	; (800294c <main+0x24c>)
 800286a:	f7fe fc1e 	bl	80010aa <readDHT11>
//		sprintf((char*) temp, "%d %d aaa\n", (int) dht11.temperature,
//				(int) dht11.humidty);
//		HAL_UART_Transmit(&huart1, temp, strlen((char*) temp), 200);
//		memset(tx_buf, 0, strlen((char*) tx_buf));
			if (dht11.temperature == 0 || dht11.humidty == 0) {
 800286e:	4b37      	ldr	r3, [pc, #220]	; (800294c <main+0x24c>)
 8002870:	7b1b      	ldrb	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <main+0x17e>
 8002876:	4b35      	ldr	r3, [pc, #212]	; (800294c <main+0x24c>)
 8002878:	7b5b      	ldrb	r3, [r3, #13]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d14d      	bne.n	800291a <main+0x21a>
				getAQI_val(&aqi1, ADC_val);
 800287e:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <main+0x278>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	483e      	ldr	r0, [pc, #248]	; (8002980 <main+0x280>)
 8002886:	f7ff fa87 	bl	8001d98 <getAQI_val>
				if (ADC_val == 0) {
 800288a:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <main+0x278>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <main+0x1a8>
					HAL_UART_Transmit(&huart1, er_mq1, strlen((char*) er_mq1),
 8002892:	483c      	ldr	r0, [pc, #240]	; (8002984 <main+0x284>)
 8002894:	f7fd fca4 	bl	80001e0 <strlen>
 8002898:	4603      	mov	r3, r0
 800289a:	b29a      	uxth	r2, r3
 800289c:	23c8      	movs	r3, #200	; 0xc8
 800289e:	4939      	ldr	r1, [pc, #228]	; (8002984 <main+0x284>)
 80028a0:	482d      	ldr	r0, [pc, #180]	; (8002958 <main+0x258>)
 80028a2:	f005 f8b2 	bl	8007a0a <HAL_UART_Transmit>
				if (ADC_val == 0) {
 80028a6:	e0b8      	b.n	8002a1a <main+0x31a>
							200);
				} else {
					HAL_UART_Transmit(&huart1, er_dht1, strlen((char*) er_dht1),
 80028a8:	4837      	ldr	r0, [pc, #220]	; (8002988 <main+0x288>)
 80028aa:	f7fd fc99 	bl	80001e0 <strlen>
 80028ae:	4603      	mov	r3, r0
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	23c8      	movs	r3, #200	; 0xc8
 80028b4:	4934      	ldr	r1, [pc, #208]	; (8002988 <main+0x288>)
 80028b6:	4828      	ldr	r0, [pc, #160]	; (8002958 <main+0x258>)
 80028b8:	f005 f8a7 	bl	8007a0a <HAL_UART_Transmit>
							200);
					sprintf((char*) temp,
							"Acetone: %d  Alcohol: %d  CO: %d  CO2: %d  NH4: %d  Toluene: %d  ADC value: %d\n\n",
							(int) aqi1.Acetone, (int) aqi1.Alcohol,
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <main+0x280>)
 80028be:	881b      	ldrh	r3, [r3, #0]
					sprintf((char*) temp,
 80028c0:	469c      	mov	ip, r3
							(int) aqi1.Acetone, (int) aqi1.Alcohol,
 80028c2:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <main+0x280>)
 80028c4:	885b      	ldrh	r3, [r3, #2]
					sprintf((char*) temp,
 80028c6:	469e      	mov	lr, r3
							(int) aqi1.CO, (int) aqi1.CO2, (int) aqi1.NH4,
 80028c8:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <main+0x280>)
 80028ca:	889b      	ldrh	r3, [r3, #4]
					sprintf((char*) temp,
 80028cc:	461a      	mov	r2, r3
							(int) aqi1.CO, (int) aqi1.CO2, (int) aqi1.NH4,
 80028ce:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <main+0x280>)
 80028d0:	88db      	ldrh	r3, [r3, #6]
					sprintf((char*) temp,
 80028d2:	4619      	mov	r1, r3
							(int) aqi1.CO, (int) aqi1.CO2, (int) aqi1.NH4,
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <main+0x280>)
 80028d6:	891b      	ldrh	r3, [r3, #8]
					sprintf((char*) temp,
 80028d8:	4618      	mov	r0, r3
							(int) aqi1.Toluene, (int) ADC_val);
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <main+0x280>)
 80028dc:	895b      	ldrh	r3, [r3, #10]
					sprintf((char*) temp,
 80028de:	461e      	mov	r6, r3
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <main+0x278>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	9304      	str	r3, [sp, #16]
 80028e6:	9603      	str	r6, [sp, #12]
 80028e8:	9002      	str	r0, [sp, #8]
 80028ea:	9101      	str	r1, [sp, #4]
 80028ec:	9200      	str	r2, [sp, #0]
 80028ee:	4673      	mov	r3, lr
 80028f0:	4662      	mov	r2, ip
 80028f2:	4926      	ldr	r1, [pc, #152]	; (800298c <main+0x28c>)
 80028f4:	4826      	ldr	r0, [pc, #152]	; (8002990 <main+0x290>)
 80028f6:	f007 f88d 	bl	8009a14 <siprintf>
					HAL_UART_Transmit(&huart1, temp, strlen((char*) temp), 200);
 80028fa:	4825      	ldr	r0, [pc, #148]	; (8002990 <main+0x290>)
 80028fc:	f7fd fc70 	bl	80001e0 <strlen>
 8002900:	4603      	mov	r3, r0
 8002902:	b29a      	uxth	r2, r3
 8002904:	23c8      	movs	r3, #200	; 0xc8
 8002906:	4922      	ldr	r1, [pc, #136]	; (8002990 <main+0x290>)
 8002908:	4813      	ldr	r0, [pc, #76]	; (8002958 <main+0x258>)
 800290a:	f005 f87e 	bl	8007a0a <HAL_UART_Transmit>
					memset(temp, 0, sizeof(temp));
 800290e:	22c8      	movs	r2, #200	; 0xc8
 8002910:	2100      	movs	r1, #0
 8002912:	481f      	ldr	r0, [pc, #124]	; (8002990 <main+0x290>)
 8002914:	f006 f906 	bl	8008b24 <memset>
				if (ADC_val == 0) {
 8002918:	e07f      	b.n	8002a1a <main+0x31a>
				}
			} else {
				if (ADC_val == 0) {
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <main+0x278>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d138      	bne.n	8002994 <main+0x294>
					HAL_UART_Transmit(&huart1, er_mq1, strlen((char*) er_mq1),
 8002922:	4818      	ldr	r0, [pc, #96]	; (8002984 <main+0x284>)
 8002924:	f7fd fc5c 	bl	80001e0 <strlen>
 8002928:	4603      	mov	r3, r0
 800292a:	b29a      	uxth	r2, r3
 800292c:	23c8      	movs	r3, #200	; 0xc8
 800292e:	4915      	ldr	r1, [pc, #84]	; (8002984 <main+0x284>)
 8002930:	4809      	ldr	r0, [pc, #36]	; (8002958 <main+0x258>)
 8002932:	f005 f86a 	bl	8007a0a <HAL_UART_Transmit>
 8002936:	e070      	b.n	8002a1a <main+0x31a>
 8002938:	200007c8 	.word	0x200007c8
 800293c:	20000810 	.word	0x20000810
 8002940:	200006c8 	.word	0x200006c8
 8002944:	40020400 	.word	0x40020400
 8002948:	20000770 	.word	0x20000770
 800294c:	20000a90 	.word	0x20000a90
 8002950:	2000071c 	.word	0x2000071c
 8002954:	200008bb 	.word	0x200008bb
 8002958:	20000858 	.word	0x20000858
 800295c:	40020800 	.word	0x40020800
 8002960:	200008a0 	.word	0x200008a0
 8002964:	200008b0 	.word	0x200008b0
 8002968:	20000a88 	.word	0x20000a88
 800296c:	20000990 	.word	0x20000990
 8002970:	0800eab4 	.word	0x0800eab4
 8002974:	200008bc 	.word	0x200008bc
 8002978:	20000a5c 	.word	0x20000a5c
 800297c:	20000680 	.word	0x20000680
 8002980:	20000a7c 	.word	0x20000a7c
 8002984:	20000054 	.word	0x20000054
 8002988:	20000038 	.word	0x20000038
 800298c:	0800eadc 	.word	0x0800eadc
 8002990:	20000994 	.word	0x20000994
							200);
				} else {
					getAQI_Correctval(&aqi1, dht11.temperature, dht11.humidty,
 8002994:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <main+0x334>)
 8002996:	7b1b      	ldrb	r3, [r3, #12]
 8002998:	4619      	mov	r1, r3
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <main+0x334>)
 800299c:	7b5b      	ldrb	r3, [r3, #13]
 800299e:	461a      	mov	r2, r3
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <main+0x338>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4825      	ldr	r0, [pc, #148]	; (8002a3c <main+0x33c>)
 80029a6:	f7ff fa4e 	bl	8001e46 <getAQI_Correctval>
							ADC_val);
					sprintf((char*) temp,
							"Acetone: %d  Alcohol: %d  CO: %d  CO2: %d  NH4: %d  Toluene: %d  ADC value: %d\nTemperature: %d  Humidity: %d\n\n",
							(int) aqi1.Acetone, (int) aqi1.Alcohol,
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <main+0x33c>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
					sprintf((char*) temp,
 80029ae:	469c      	mov	ip, r3
							(int) aqi1.Acetone, (int) aqi1.Alcohol,
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <main+0x33c>)
 80029b2:	885b      	ldrh	r3, [r3, #2]
					sprintf((char*) temp,
 80029b4:	469e      	mov	lr, r3
							(int) aqi1.CO, (int) aqi1.CO2, (int) aqi1.NH4,
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <main+0x33c>)
 80029b8:	889b      	ldrh	r3, [r3, #4]
					sprintf((char*) temp,
 80029ba:	461a      	mov	r2, r3
							(int) aqi1.CO, (int) aqi1.CO2, (int) aqi1.NH4,
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <main+0x33c>)
 80029be:	88db      	ldrh	r3, [r3, #6]
					sprintf((char*) temp,
 80029c0:	4619      	mov	r1, r3
							(int) aqi1.CO, (int) aqi1.CO2, (int) aqi1.NH4,
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <main+0x33c>)
 80029c4:	891b      	ldrh	r3, [r3, #8]
					sprintf((char*) temp,
 80029c6:	4618      	mov	r0, r3
							(int) aqi1.Toluene, (int) ADC_val,
 80029c8:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <main+0x33c>)
 80029ca:	895b      	ldrh	r3, [r3, #10]
					sprintf((char*) temp,
 80029cc:	461e      	mov	r6, r3
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <main+0x338>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	607b      	str	r3, [r7, #4]
							(int) dht11.temperature, (int) dht11.humidty);
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <main+0x334>)
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
					sprintf((char*) temp,
 80029d8:	603b      	str	r3, [r7, #0]
							(int) dht11.temperature, (int) dht11.humidty);
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <main+0x334>)
 80029dc:	7b5b      	ldrb	r3, [r3, #13]
					sprintf((char*) temp,
 80029de:	9306      	str	r3, [sp, #24]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	9305      	str	r3, [sp, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	9304      	str	r3, [sp, #16]
 80029e8:	9603      	str	r6, [sp, #12]
 80029ea:	9002      	str	r0, [sp, #8]
 80029ec:	9101      	str	r1, [sp, #4]
 80029ee:	9200      	str	r2, [sp, #0]
 80029f0:	4673      	mov	r3, lr
 80029f2:	4662      	mov	r2, ip
 80029f4:	4912      	ldr	r1, [pc, #72]	; (8002a40 <main+0x340>)
 80029f6:	4813      	ldr	r0, [pc, #76]	; (8002a44 <main+0x344>)
 80029f8:	f007 f80c 	bl	8009a14 <siprintf>
					HAL_UART_Transmit(&huart1, temp, strlen((char*) temp), 200);
 80029fc:	4811      	ldr	r0, [pc, #68]	; (8002a44 <main+0x344>)
 80029fe:	f7fd fbef 	bl	80001e0 <strlen>
 8002a02:	4603      	mov	r3, r0
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	23c8      	movs	r3, #200	; 0xc8
 8002a08:	490e      	ldr	r1, [pc, #56]	; (8002a44 <main+0x344>)
 8002a0a:	480f      	ldr	r0, [pc, #60]	; (8002a48 <main+0x348>)
 8002a0c:	f004 fffd 	bl	8007a0a <HAL_UART_Transmit>
					memset(temp, 0, sizeof(temp));
 8002a10:	22c8      	movs	r2, #200	; 0xc8
 8002a12:	2100      	movs	r1, #0
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <main+0x344>)
 8002a16:	f006 f885 	bl	8008b24 <memset>
				}
			}
			saveValue();
 8002a1a:	f000 fbdd 	bl	80031d8 <saveValue>
			get_inf_tick = sys_tick;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <main+0x34c>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	490a      	ldr	r1, [pc, #40]	; (8002a50 <main+0x350>)
 8002a26:	e9c1 2300 	strd	r2, r3, [r1]
		}
		Update_Screen(&hi2c1);
 8002a2a:	480a      	ldr	r0, [pc, #40]	; (8002a54 <main+0x354>)
 8002a2c:	f000 faa0 	bl	8002f70 <Update_Screen>
		HandleCommand();
 8002a30:	e6b2      	b.n	8002798 <main+0x98>
 8002a32:	bf00      	nop
 8002a34:	20000a90 	.word	0x20000a90
 8002a38:	20000a5c 	.word	0x20000a5c
 8002a3c:	20000a7c 	.word	0x20000a7c
 8002a40:	0800eb30 	.word	0x0800eb30
 8002a44:	20000994 	.word	0x20000994
 8002a48:	20000858 	.word	0x20000858
 8002a4c:	200008a0 	.word	0x200008a0
 8002a50:	200008b0 	.word	0x200008b0
 8002a54:	200006c8 	.word	0x200006c8

08002a58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b094      	sub	sp, #80	; 0x50
 8002a5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002a5e:	f107 0320 	add.w	r3, r7, #32
 8002a62:	2230      	movs	r2, #48	; 0x30
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f006 f85c 	bl	8008b24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <SystemClock_Config+0xb4>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <SystemClock_Config+0xb4>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <SystemClock_Config+0xb4>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <SystemClock_Config+0xb8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <SystemClock_Config+0xb8>)
 8002aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <SystemClock_Config+0xb8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002abc:	2310      	movs	r3, #16
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ac4:	f107 0320 	add.w	r3, r7, #32
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 f9eb 	bl	8005ea4 <HAL_RCC_OscConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <SystemClock_Config+0x80>
		Error_Handler();
 8002ad4:	f000 fd7e 	bl	80035d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002ad8:	230f      	movs	r3, #15
 8002ada:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fc4e 	bl	8006394 <HAL_RCC_ClockConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <SystemClock_Config+0xaa>
		Error_Handler();
 8002afe:	f000 fd69 	bl	80035d4 <Error_Handler>
	}
}
 8002b02:	bf00      	nop
 8002b04:	3750      	adds	r7, #80	; 0x50
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000

08002b14 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002b26:	4b21      	ldr	r3, [pc, #132]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b28:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <MX_ADC1_Init+0x9c>)
 8002b2a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <MX_ADC1_Init+0xa0>)
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002b72:	480e      	ldr	r0, [pc, #56]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b74:	f001 f8f2 	bl	8003d5c <HAL_ADC_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8002b7e:	f000 fd29 	bl	80035d4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b8e:	463b      	mov	r3, r7
 8002b90:	4619      	mov	r1, r3
 8002b92:	4806      	ldr	r0, [pc, #24]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b94:	f001 faa6 	bl	80040e4 <HAL_ADC_ConfigChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8002b9e:	f000 fd19 	bl	80035d4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000680 	.word	0x20000680
 8002bb0:	40012000 	.word	0x40012000
 8002bb4:	0f000001 	.word	0x0f000001

08002bb8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bbe:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <MX_I2C1_Init+0x54>)
 8002bc0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bc4:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <MX_I2C1_Init+0x58>)
 8002bc6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bda:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bf6:	f002 f82f 	bl	8004c58 <HAL_I2C_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002c00:	f000 fce8 	bl	80035d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	200006c8 	.word	0x200006c8
 8002c0c:	40005400 	.word	0x40005400
 8002c10:	000186a0 	.word	0x000186a0

08002c14 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <MX_I2C2_Init+0x54>)
 8002c1c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <MX_I2C2_Init+0x58>)
 8002c22:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c36:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <MX_I2C2_Init+0x50>)
 8002c52:	f002 f801 	bl	8004c58 <HAL_I2C_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8002c5c:	f000 fcba 	bl	80035d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2000071c 	.word	0x2000071c
 8002c68:	40005800 	.word	0x40005800
 8002c6c:	000186a0 	.word	0x000186a0

08002c70 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <MX_SPI1_Init+0x68>)
 8002c78:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c80:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c82:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002cbc:	220a      	movs	r2, #10
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002cc0:	4804      	ldr	r0, [pc, #16]	; (8002cd4 <MX_SPI1_Init+0x64>)
 8002cc2:	f003 fd47 	bl	8006754 <HAL_SPI_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002ccc:	f000 fc82 	bl	80035d4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002cd0:	bf00      	nop
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000770 	.word	0x20000770
 8002cd8:	40013000 	.word	0x40013000

08002cdc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cfe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d02:	2210      	movs	r2, #16
 8002d04:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d12:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002d20:	4813      	ldr	r0, [pc, #76]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d22:	f004 f95d 	bl	8006fe0 <HAL_TIM_Base_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM2_Init+0x54>
		Error_Handler();
 8002d2c:	f000 fc52 	bl	80035d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d34:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d3e:	f004 fb8b 	bl	8007458 <HAL_TIM_ConfigClockSource>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM2_Init+0x70>
		Error_Handler();
 8002d48:	f000 fc44 	bl	80035d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_TIM2_Init+0x94>)
 8002d5a:	f004 fd87 	bl	800786c <HAL_TIMEx_MasterConfigSynchronization>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002d64:	f000 fc36 	bl	80035d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200007c8 	.word	0x200007c8

08002d74 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002d88:	463b      	mov	r3, r7
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <MX_TIM3_Init+0x98>)
 8002d94:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16;
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002d98:	2210      	movs	r2, #16
 8002d9a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002db6:	4814      	ldr	r0, [pc, #80]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002db8:	f004 f912 	bl	8006fe0 <HAL_TIM_Base_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM3_Init+0x52>
		Error_Handler();
 8002dc2:	f000 fc07 	bl	80035d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480d      	ldr	r0, [pc, #52]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002dd4:	f004 fb40 	bl	8007458 <HAL_TIM_ConfigClockSource>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8002dde:	f000 fbf9 	bl	80035d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002dea:	463b      	mov	r3, r7
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <MX_TIM3_Init+0x94>)
 8002df0:	f004 fd3c 	bl	800786c <HAL_TIMEx_MasterConfigSynchronization>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002dfa:	f000 fbeb 	bl	80035d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000810 	.word	0x20000810
 8002e0c:	40000400 	.word	0x40000400

08002e10 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <MX_USART1_UART_Init+0x4c>)
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <MX_USART1_UART_Init+0x50>)
 8002e18:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <MX_USART1_UART_Init+0x4c>)
 8002e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e20:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <MX_USART1_UART_Init+0x4c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <MX_USART1_UART_Init+0x4c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <MX_USART1_UART_Init+0x4c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <MX_USART1_UART_Init+0x4c>)
 8002e36:	220c      	movs	r2, #12
 8002e38:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <MX_USART1_UART_Init+0x4c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <MX_USART1_UART_Init+0x4c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002e46:	4805      	ldr	r0, [pc, #20]	; (8002e5c <MX_USART1_UART_Init+0x4c>)
 8002e48:	f004 fd92 	bl	8007970 <HAL_UART_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002e52:	f000 fbbf 	bl	80035d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000858 	.word	0x20000858
 8002e60:	40011000 	.word	0x40011000

08002e64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <MX_GPIO_Init+0xfc>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a37      	ldr	r2, [pc, #220]	; (8002f60 <MX_GPIO_Init+0xfc>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <MX_GPIO_Init+0xfc>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <MX_GPIO_Init+0xfc>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a30      	ldr	r2, [pc, #192]	; (8002f60 <MX_GPIO_Init+0xfc>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea6:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <MX_GPIO_Init+0xfc>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <MX_GPIO_Init+0xfc>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <MX_GPIO_Init+0xfc>)
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <MX_GPIO_Init+0xfc>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ed4:	4823      	ldr	r0, [pc, #140]	; (8002f64 <MX_GPIO_Init+0x100>)
 8002ed6:	f001 fe73 	bl	8004bc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002eda:	2201      	movs	r2, #1
 8002edc:	2101      	movs	r1, #1
 8002ede:	4822      	ldr	r0, [pc, #136]	; (8002f68 <MX_GPIO_Init+0x104>)
 8002ee0:	f001 fe6e 	bl	8004bc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eea:	481f      	ldr	r0, [pc, #124]	; (8002f68 <MX_GPIO_Init+0x104>)
 8002eec:	f001 fe68 	bl	8004bc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f02:	f107 030c 	add.w	r3, r7, #12
 8002f06:	4619      	mov	r1, r3
 8002f08:	4816      	ldr	r0, [pc, #88]	; (8002f64 <MX_GPIO_Init+0x100>)
 8002f0a:	f001 fcbd 	bl	8004888 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f0e:	2308      	movs	r3, #8
 8002f10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f16:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	4619      	mov	r1, r3
 8002f22:	4812      	ldr	r0, [pc, #72]	; (8002f6c <MX_GPIO_Init+0x108>)
 8002f24:	f001 fcb0 	bl	8004888 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_13;
 8002f28:	f242 0301 	movw	r3, #8193	; 0x2001
 8002f2c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4809      	ldr	r0, [pc, #36]	; (8002f68 <MX_GPIO_Init+0x104>)
 8002f42:	f001 fca1 	bl	8004888 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2101      	movs	r1, #1
 8002f4a:	2009      	movs	r0, #9
 8002f4c:	f001 fbd3 	bl	80046f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002f50:	2009      	movs	r0, #9
 8002f52:	f001 fbec 	bl	800472e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002f56:	bf00      	nop
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020000 	.word	0x40020000

08002f70 <Update_Screen>:

/* USER CODE BEGIN 4 */
void Update_Screen(I2C_HandleTypeDef *hi2c) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	6078      	str	r0, [r7, #4]
	if (last_meu_ind0 != menu_ind0) {
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <Update_Screen+0x50>)
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <Update_Screen+0x54>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d018      	beq.n	8002fb6 <Update_Screen+0x46>
		ssd1306_Fill(Black);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f7ff f8cb 	bl	8002120 <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, menu[menu_ind0], 128, 64, White);
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <Update_Screen+0x54>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <Update_Screen+0x58>)
 8002f92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f96:	2301      	movs	r3, #1
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	2340      	movs	r3, #64	; 0x40
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7ff f960 	bl	8002268 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen(hi2c);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff f8dd 	bl	8002168 <ssd1306_UpdateScreen>
		last_meu_ind0 = menu_ind0;
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <Update_Screen+0x54>)
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <Update_Screen+0x50>)
 8002fb4:	701a      	strb	r2, [r3, #0]
	}
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200008b9 	.word	0x200008b9
 8002fc4:	200008b8 	.word	0x200008b8
 8002fc8:	2000000c 	.word	0x2000000c

08002fcc <Display_First_Screen>:

void Display_First_Screen(I2C_HandleTypeDef *hi2c) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7ff f8a3 	bl	8002120 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, menu[0], 128, 64, White);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <Display_First_Screen+0x34>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2340      	movs	r3, #64	; 0x40
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7ff f93c 	bl	8002268 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(hi2c);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff f8b9 	bl	8002168 <ssd1306_UpdateScreen>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2000000c 	.word	0x2000000c

08003004 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003004:	b4b0      	push	{r4, r5, r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4601      	mov	r1, r0
 800300c:	80f9      	strh	r1, [r7, #6]
	UNUSED(GPIO_Pin);
	if (GPIO_Pin == GPIO_PIN_3 && sys_tick - last_tick >= 200) {
 800300e:	88f9      	ldrh	r1, [r7, #6]
 8003010:	2908      	cmp	r1, #8
 8003012:	d11f      	bne.n	8003054 <HAL_GPIO_EXTI_Callback+0x50>
 8003014:	4912      	ldr	r1, [pc, #72]	; (8003060 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003016:	e9d1 4500 	ldrd	r4, r5, [r1]
 800301a:	4912      	ldr	r1, [pc, #72]	; (8003064 <HAL_GPIO_EXTI_Callback+0x60>)
 800301c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003020:	1a22      	subs	r2, r4, r0
 8003022:	eb65 0301 	sbc.w	r3, r5, r1
 8003026:	2ac8      	cmp	r2, #200	; 0xc8
 8003028:	f173 0300 	sbcs.w	r3, r3, #0
 800302c:	d312      	bcc.n	8003054 <HAL_GPIO_EXTI_Callback+0x50>
		menu_ind0 = (menu_ind0 + 1) % 4;
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_GPIO_EXTI_Callback+0x64>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	425a      	negs	r2, r3
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	f002 0203 	and.w	r2, r2, #3
 800303e:	bf58      	it	pl
 8003040:	4253      	negpl	r3, r2
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_GPIO_EXTI_Callback+0x64>)
 8003046:	701a      	strb	r2, [r3, #0]
		last_tick = sys_tick;
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_GPIO_EXTI_Callback+0x5c>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	4905      	ldr	r1, [pc, #20]	; (8003064 <HAL_GPIO_EXTI_Callback+0x60>)
 8003050:	e9c1 2300 	strd	r2, r3, [r1]
//	menu_ind0--;
//	if (menu_ind0 < 0)
//		menu_ind0 = menu_len - 1;
//	last_tick = sys_tick;
//}
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bcb0      	pop	{r4, r5, r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	200008a0 	.word	0x200008a0
 8003064:	200008a8 	.word	0x200008a8
 8003068:	200008b8 	.word	0x200008b8

0800306c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800306c:	b4b0      	push	{r4, r5, r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x50>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d118      	bne.n	80030b2 <HAL_TIM_PeriodElapsedCallback+0x46>
		sys_tick++;
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	1c54      	adds	r4, r2, #1
 8003088:	f143 0500 	adc.w	r5, r3, #0
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800308e:	e9c3 4500 	strd	r4, r5, [r3]
		if (sys_tick >= 0xFFFFFFFFFFFFFFFF)
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	bf08      	it	eq
 800309e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80030a2:	d106      	bne.n	80030b2 <HAL_TIM_PeriodElapsedCallback+0x46>
			sys_tick = 0;
 80030a4:	4906      	ldr	r1, [pc, #24]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bcb0      	pop	{r4, r5, r7}
 80030ba:	4770      	bx	lr
 80030bc:	200007c8 	.word	0x200007c8
 80030c0:	200008a0 	.word	0x200008a0

080030c4 <checkDay_i>:

unsigned char* checkDay_i(uint8_t dow) {
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
	return (unsigned char*) DayOfWeek[dow - 1];
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <checkDay_i+0x20>)
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	2000001c 	.word	0x2000001c

080030e8 <HAL_UART_RxCpltCallback>:
			break;
	}
	return i + 1;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_UART_RxCpltCallback+0x64>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d122      	bne.n	8003142 <HAL_UART_RxCpltCallback+0x5a>
		rx_done = true;
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_UART_RxCpltCallback+0x68>)
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
		if (uart_buff_cnt < sizeof(rx_buf)) {
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_UART_RxCpltCallback+0x6c>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b63      	cmp	r3, #99	; 0x63
 8003108:	d807      	bhi.n	800311a <HAL_UART_RxCpltCallback+0x32>
			rx_buf[uart_buff_cnt] = chr;
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_UART_RxCpltCallback+0x6c>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <HAL_UART_RxCpltCallback+0x70>)
 8003112:	7819      	ldrb	r1, [r3, #0]
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_UART_RxCpltCallback+0x74>)
 8003116:	5499      	strb	r1, [r3, r2]
 8003118:	e002      	b.n	8003120 <HAL_UART_RxCpltCallback+0x38>
		} else
			uart_buf_overflow = 1;
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_UART_RxCpltCallback+0x78>)
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
		uart_last_receive = sys_tick;
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_UART_RxCpltCallback+0x7c>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	4910      	ldr	r1, [pc, #64]	; (8003168 <HAL_UART_RxCpltCallback+0x80>)
 8003128:	e9c1 2300 	strd	r2, r3, [r1]
		uart_buff_cnt++;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_UART_RxCpltCallback+0x6c>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	b2da      	uxtb	r2, r3
 8003134:	4b07      	ldr	r3, [pc, #28]	; (8003154 <HAL_UART_RxCpltCallback+0x6c>)
 8003136:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &chr, sizeof(chr));
 8003138:	2201      	movs	r2, #1
 800313a:	4907      	ldr	r1, [pc, #28]	; (8003158 <HAL_UART_RxCpltCallback+0x70>)
 800313c:	4803      	ldr	r0, [pc, #12]	; (800314c <HAL_UART_RxCpltCallback+0x64>)
 800313e:	f004 fcf6 	bl	8007b2e <HAL_UART_Receive_IT>
	}
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000858 	.word	0x20000858
 8003150:	20000985 	.word	0x20000985
 8003154:	200008ba 	.word	0x200008ba
 8003158:	200008bb 	.word	0x200008bb
 800315c:	20000920 	.word	0x20000920
 8003160:	20000984 	.word	0x20000984
 8003164:	200008a0 	.word	0x200008a0
 8003168:	20000988 	.word	0x20000988

0800316c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi1.Instance) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_SPI_TxRxCpltCallback+0x28>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d102      	bne.n	8003186 <HAL_SPI_TxRxCpltCallback+0x1a>
		rx_spi_flg = 1;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
	}
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000770 	.word	0x20000770
 8003198:	2000089c 	.word	0x2000089c

0800319c <getADC_value>:

void getADC_value(ADC_HandleTypeDef *hadc, uint32_t Timeout, uint32_t *ADC_val) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
	HAL_ADC_Start(&hadc1);
 80031a8:	480a      	ldr	r0, [pc, #40]	; (80031d4 <getADC_value+0x38>)
 80031aa:	f000 fe1b 	bl	8003de4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80031ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031b2:	4808      	ldr	r0, [pc, #32]	; (80031d4 <getADC_value+0x38>)
 80031b4:	f000 fefd 	bl	8003fb2 <HAL_ADC_PollForConversion>
	*ADC_val = HAL_ADC_GetValue(&hadc1);
 80031b8:	4806      	ldr	r0, [pc, #24]	; (80031d4 <getADC_value+0x38>)
 80031ba:	f000 ff85 	bl	80040c8 <HAL_ADC_GetValue>
 80031be:	4602      	mov	r2, r0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80031c4:	4803      	ldr	r0, [pc, #12]	; (80031d4 <getADC_value+0x38>)
 80031c6:	f000 fec1 	bl	8003f4c <HAL_ADC_Stop>
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000680 	.word	0x20000680

080031d8 <saveValue>:
//	value[11] = aqi1.NH4 & 0xFF;
//	value[12] = aqi1.Toluene >> 8;
//	value[13] = aqi1.Toluene & 0xFF;
//}

void saveValue() {
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
	value[0] = dht11.temperature;
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <saveValue+0xe0>)
 80031de:	7b1a      	ldrb	r2, [r3, #12]
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <saveValue+0xe4>)
 80031e2:	701a      	strb	r2, [r3, #0]
	value[1] = dht11.humidty;
 80031e4:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <saveValue+0xe0>)
 80031e6:	7b5a      	ldrb	r2, [r3, #13]
 80031e8:	4b34      	ldr	r3, [pc, #208]	; (80032bc <saveValue+0xe4>)
 80031ea:	705a      	strb	r2, [r3, #1]
	value[2] = (uint8_t) (aqi1.Acetone >> 8);
 80031ec:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <saveValue+0xe8>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <saveValue+0xe4>)
 80031f8:	709a      	strb	r2, [r3, #2]
	value[3] = (uint8_t) (aqi1.Acetone & 0xFF);
 80031fa:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <saveValue+0xe8>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <saveValue+0xe4>)
 8003202:	70da      	strb	r2, [r3, #3]
	value[4] = (uint8_t) (aqi1.Alcohol >> 8);
 8003204:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <saveValue+0xe8>)
 8003206:	885b      	ldrh	r3, [r3, #2]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	b29b      	uxth	r3, r3
 800320c:	b2da      	uxtb	r2, r3
 800320e:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <saveValue+0xe4>)
 8003210:	711a      	strb	r2, [r3, #4]
	value[5] = (uint8_t) (aqi1.Alcohol & 0xFF);
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <saveValue+0xe8>)
 8003214:	885b      	ldrh	r3, [r3, #2]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <saveValue+0xe4>)
 800321a:	715a      	strb	r2, [r3, #5]
	value[6] = (uint8_t) (aqi1.CO >> 8);
 800321c:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <saveValue+0xe8>)
 800321e:	889b      	ldrh	r3, [r3, #4]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	b29b      	uxth	r3, r3
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <saveValue+0xe4>)
 8003228:	719a      	strb	r2, [r3, #6]
	value[7] = (uint8_t) (aqi1.CO & 0xFF);
 800322a:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <saveValue+0xe8>)
 800322c:	889b      	ldrh	r3, [r3, #4]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b22      	ldr	r3, [pc, #136]	; (80032bc <saveValue+0xe4>)
 8003232:	71da      	strb	r2, [r3, #7]
	value[8] = (uint8_t) (aqi1.CO2 >> 8);
 8003234:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <saveValue+0xe8>)
 8003236:	88db      	ldrh	r3, [r3, #6]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	b29b      	uxth	r3, r3
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <saveValue+0xe4>)
 8003240:	721a      	strb	r2, [r3, #8]
	value[9] = (uint8_t) (aqi1.CO2 & 0xFF);
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <saveValue+0xe8>)
 8003244:	88db      	ldrh	r3, [r3, #6]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <saveValue+0xe4>)
 800324a:	725a      	strb	r2, [r3, #9]
	value[10] = (uint8_t) (aqi1.NH4 >> 8);
 800324c:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <saveValue+0xe8>)
 800324e:	891b      	ldrh	r3, [r3, #8]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	b29b      	uxth	r3, r3
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <saveValue+0xe4>)
 8003258:	729a      	strb	r2, [r3, #10]
	value[11] = (uint8_t) (aqi1.NH4 & 0xFF);
 800325a:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <saveValue+0xe8>)
 800325c:	891b      	ldrh	r3, [r3, #8]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <saveValue+0xe4>)
 8003262:	72da      	strb	r2, [r3, #11]
	value[12] = (uint8_t) (aqi1.Toluene >> 8);
 8003264:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <saveValue+0xe8>)
 8003266:	895b      	ldrh	r3, [r3, #10]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	b29b      	uxth	r3, r3
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <saveValue+0xe4>)
 8003270:	731a      	strb	r2, [r3, #12]
	value[13] = (uint8_t) (aqi1.Toluene & 0xFF);
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <saveValue+0xe8>)
 8003274:	895b      	ldrh	r3, [r3, #10]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	4b10      	ldr	r3, [pc, #64]	; (80032bc <saveValue+0xe4>)
 800327a:	735a      	strb	r2, [r3, #13]
	W25Q32_erase4k(fl_i * FLASH_SECTOR);
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <saveValue+0xec>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	031b      	lsls	r3, r3, #12
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fa00 	bl	8002688 <W25Q32_erase4k>
	W25Q32_WriteData(value, fl_i * FLASH_SECTOR, 14);
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <saveValue+0xec>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	031b      	lsls	r3, r3, #12
 800328e:	220e      	movs	r2, #14
 8003290:	4619      	mov	r1, r3
 8003292:	480a      	ldr	r0, [pc, #40]	; (80032bc <saveValue+0xe4>)
 8003294:	f7ff f998 	bl	80025c8 <W25Q32_WriteData>
	fl_i = (fl_i + 1) % FLASH_ARRAY_SIZE;
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <saveValue+0xec>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	425a      	negs	r2, r3
 80032a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80032a8:	bf58      	it	pl
 80032aa:	4253      	negpl	r3, r2
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <saveValue+0xec>)
 80032b0:	801a      	strh	r2, [r3, #0]
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000a90 	.word	0x20000a90
 80032bc:	20000ae4 	.word	0x20000ae4
 80032c0:	20000a7c 	.word	0x20000a7c
 80032c4:	20000ae0 	.word	0x20000ae0

080032c8 <readValue>:
void readValue(uint16_t index) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	80fb      	strh	r3, [r7, #6]
	W25Q32_ReadData(rx_spi, index * FLASH_SECTOR, 14);
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	031b      	lsls	r3, r3, #12
 80032d6:	220e      	movs	r2, #14
 80032d8:	4619      	mov	r1, r3
 80032da:	482c      	ldr	r0, [pc, #176]	; (800338c <readValue+0xc4>)
 80032dc:	f7ff f932 	bl	8002544 <W25Q32_ReadData>
	dataReg[0] = rx_spi[0];
 80032e0:	4b2a      	ldr	r3, [pc, #168]	; (800338c <readValue+0xc4>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <readValue+0xc8>)
 80032e8:	801a      	strh	r2, [r3, #0]
	dataReg[1] = rx_spi[1];
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <readValue+0xc4>)
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <readValue+0xc8>)
 80032f2:	805a      	strh	r2, [r3, #2]
	dataReg[2] = (uint16_t) (rx_spi[2] << 8) + (uint16_t) rx_spi[3];
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <readValue+0xc4>)
 80032f6:	789b      	ldrb	r3, [r3, #2]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	4b23      	ldr	r3, [pc, #140]	; (800338c <readValue+0xc4>)
 8003300:	78db      	ldrb	r3, [r3, #3]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4413      	add	r3, r2
 8003306:	b29a      	uxth	r2, r3
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <readValue+0xc8>)
 800330a:	809a      	strh	r2, [r3, #4]
	dataReg[3] = (uint16_t) (rx_spi[4] << 8) + (uint16_t) rx_spi[5];
 800330c:	4b1f      	ldr	r3, [pc, #124]	; (800338c <readValue+0xc4>)
 800330e:	791b      	ldrb	r3, [r3, #4]
 8003310:	b29b      	uxth	r3, r3
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	b29a      	uxth	r2, r3
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <readValue+0xc4>)
 8003318:	795b      	ldrb	r3, [r3, #5]
 800331a:	b29b      	uxth	r3, r3
 800331c:	4413      	add	r3, r2
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <readValue+0xc8>)
 8003322:	80da      	strh	r2, [r3, #6]
	dataReg[4] = (uint16_t) (rx_spi[6] << 8) + (uint16_t) rx_spi[7];
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <readValue+0xc4>)
 8003326:	799b      	ldrb	r3, [r3, #6]
 8003328:	b29b      	uxth	r3, r3
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	b29a      	uxth	r2, r3
 800332e:	4b17      	ldr	r3, [pc, #92]	; (800338c <readValue+0xc4>)
 8003330:	79db      	ldrb	r3, [r3, #7]
 8003332:	b29b      	uxth	r3, r3
 8003334:	4413      	add	r3, r2
 8003336:	b29a      	uxth	r2, r3
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <readValue+0xc8>)
 800333a:	811a      	strh	r2, [r3, #8]
	dataReg[5] = (uint16_t) (rx_spi[8] << 8) + (uint16_t) rx_spi[9];
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <readValue+0xc4>)
 800333e:	7a1b      	ldrb	r3, [r3, #8]
 8003340:	b29b      	uxth	r3, r3
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	b29a      	uxth	r2, r3
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <readValue+0xc4>)
 8003348:	7a5b      	ldrb	r3, [r3, #9]
 800334a:	b29b      	uxth	r3, r3
 800334c:	4413      	add	r3, r2
 800334e:	b29a      	uxth	r2, r3
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <readValue+0xc8>)
 8003352:	815a      	strh	r2, [r3, #10]
	dataReg[6] = (uint16_t) (rx_spi[10] << 8) + (uint16_t) rx_spi[11];
 8003354:	4b0d      	ldr	r3, [pc, #52]	; (800338c <readValue+0xc4>)
 8003356:	7a9b      	ldrb	r3, [r3, #10]
 8003358:	b29b      	uxth	r3, r3
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	b29a      	uxth	r2, r3
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <readValue+0xc4>)
 8003360:	7adb      	ldrb	r3, [r3, #11]
 8003362:	b29b      	uxth	r3, r3
 8003364:	4413      	add	r3, r2
 8003366:	b29a      	uxth	r2, r3
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <readValue+0xc8>)
 800336a:	819a      	strh	r2, [r3, #12]
	dataReg[7] = (uint16_t) (rx_spi[12] << 8) + (uint16_t) rx_spi[13];
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <readValue+0xc4>)
 800336e:	7b1b      	ldrb	r3, [r3, #12]
 8003370:	b29b      	uxth	r3, r3
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	b29a      	uxth	r2, r3
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <readValue+0xc4>)
 8003378:	7b5b      	ldrb	r3, [r3, #13]
 800337a:	b29b      	uxth	r3, r3
 800337c:	4413      	add	r3, r2
 800337e:	b29a      	uxth	r2, r3
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <readValue+0xc8>)
 8003382:	81da      	strh	r2, [r3, #14]
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000aa0 	.word	0x20000aa0
 8003390:	20000b48 	.word	0x20000b48

08003394 <HandleCommand>:

void HandleCommand() {
 8003394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003396:	b08b      	sub	sp, #44	; 0x2c
 8003398:	af08      	add	r7, sp, #32
	if ((sys_tick - uart_last_receive > 1 && uart_buff_cnt > 2)
 800339a:	4976      	ldr	r1, [pc, #472]	; (8003574 <HandleCommand+0x1e0>)
 800339c:	e9d1 4500 	ldrd	r4, r5, [r1]
 80033a0:	4975      	ldr	r1, [pc, #468]	; (8003578 <HandleCommand+0x1e4>)
 80033a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033a6:	1a22      	subs	r2, r4, r0
 80033a8:	eb65 0301 	sbc.w	r3, r5, r1
 80033ac:	2a02      	cmp	r2, #2
 80033ae:	f173 0300 	sbcs.w	r3, r3, #0
 80033b2:	d303      	bcc.n	80033bc <HandleCommand+0x28>
 80033b4:	4b71      	ldr	r3, [pc, #452]	; (800357c <HandleCommand+0x1e8>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d804      	bhi.n	80033c6 <HandleCommand+0x32>
			|| uart_buf_overflow) {
 80033bc:	4b70      	ldr	r3, [pc, #448]	; (8003580 <HandleCommand+0x1ec>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80d3 	beq.w	800356c <HandleCommand+0x1d8>
		if (strncmp((char*) rx_buf, "time:", 5) == 0) {
 80033c6:	2205      	movs	r2, #5
 80033c8:	496e      	ldr	r1, [pc, #440]	; (8003584 <HandleCommand+0x1f0>)
 80033ca:	486f      	ldr	r0, [pc, #444]	; (8003588 <HandleCommand+0x1f4>)
 80033cc:	f006 fbb3 	bl	8009b36 <strncmp>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d14f      	bne.n	8003476 <HandleCommand+0xe2>
			sscanf((char*) rx_buf + 5, "%d %d:%d:%d %d/%d/%d", &dow_u, &hrs_u,
 80033d6:	486d      	ldr	r0, [pc, #436]	; (800358c <HandleCommand+0x1f8>)
 80033d8:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <HandleCommand+0x1fc>)
 80033da:	9304      	str	r3, [sp, #16]
 80033dc:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <HandleCommand+0x200>)
 80033de:	9303      	str	r3, [sp, #12]
 80033e0:	4b6d      	ldr	r3, [pc, #436]	; (8003598 <HandleCommand+0x204>)
 80033e2:	9302      	str	r3, [sp, #8]
 80033e4:	4b6d      	ldr	r3, [pc, #436]	; (800359c <HandleCommand+0x208>)
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	4b6d      	ldr	r3, [pc, #436]	; (80035a0 <HandleCommand+0x20c>)
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4b6d      	ldr	r3, [pc, #436]	; (80035a4 <HandleCommand+0x210>)
 80033ee:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <HandleCommand+0x214>)
 80033f0:	496e      	ldr	r1, [pc, #440]	; (80035ac <HandleCommand+0x218>)
 80033f2:	f006 fb2f 	bl	8009a54 <siscanf>
					&min_u, &sec_u, &date_u, &mon_u, &year_u);
			DS1307_settime(&hi2c2, (uint8_t) sec_u, (uint8_t) min_u,
 80033f6:	4b69      	ldr	r3, [pc, #420]	; (800359c <HandleCommand+0x208>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b2dc      	uxtb	r4, r3
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <HandleCommand+0x20c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	b2dd      	uxtb	r5, r3
 8003402:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HandleCommand+0x210>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b2de      	uxtb	r6, r3
 8003408:	4b67      	ldr	r3, [pc, #412]	; (80035a8 <HandleCommand+0x214>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4a62      	ldr	r2, [pc, #392]	; (8003598 <HandleCommand+0x204>)
 8003410:	6812      	ldr	r2, [r2, #0]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	495f      	ldr	r1, [pc, #380]	; (8003594 <HandleCommand+0x200>)
 8003416:	6809      	ldr	r1, [r1, #0]
 8003418:	b2c9      	uxtb	r1, r1
 800341a:	485d      	ldr	r0, [pc, #372]	; (8003590 <HandleCommand+0x1fc>)
 800341c:	6800      	ldr	r0, [r0, #0]
 800341e:	b280      	uxth	r0, r0
 8003420:	9003      	str	r0, [sp, #12]
 8003422:	9102      	str	r1, [sp, #8]
 8003424:	9201      	str	r2, [sp, #4]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4633      	mov	r3, r6
 800342a:	462a      	mov	r2, r5
 800342c:	4621      	mov	r1, r4
 800342e:	4860      	ldr	r0, [pc, #384]	; (80035b0 <HandleCommand+0x21c>)
 8003430:	f7fe f886 	bl	8001540 <DS1307_settime>
					(uint8_t) hrs_u, (uint8_t) dow_u, (uint8_t) date_u,
					(uint8_t) mon_u, (uint16_t) year_u);
			sprintf((char*) tx_buf, "%d OK\n", (int) (sys_tick / 1000));
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HandleCommand+0x1e0>)
 8003436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800343a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	f7fd fc29 	bl	8000c98 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4613      	mov	r3, r2
 800344c:	461a      	mov	r2, r3
 800344e:	4959      	ldr	r1, [pc, #356]	; (80035b4 <HandleCommand+0x220>)
 8003450:	4859      	ldr	r0, [pc, #356]	; (80035b8 <HandleCommand+0x224>)
 8003452:	f006 fadf 	bl	8009a14 <siprintf>
			HAL_UART_Transmit(&huart1, tx_buf, strlen((char*) tx_buf), 200);
 8003456:	4858      	ldr	r0, [pc, #352]	; (80035b8 <HandleCommand+0x224>)
 8003458:	f7fc fec2 	bl	80001e0 <strlen>
 800345c:	4603      	mov	r3, r0
 800345e:	b29a      	uxth	r2, r3
 8003460:	23c8      	movs	r3, #200	; 0xc8
 8003462:	4955      	ldr	r1, [pc, #340]	; (80035b8 <HandleCommand+0x224>)
 8003464:	4855      	ldr	r0, [pc, #340]	; (80035bc <HandleCommand+0x228>)
 8003466:	f004 fad0 	bl	8007a0a <HAL_UART_Transmit>
			memset(tx_buf, 0, sizeof(tx_buf));
 800346a:	2264      	movs	r2, #100	; 0x64
 800346c:	2100      	movs	r1, #0
 800346e:	4852      	ldr	r0, [pc, #328]	; (80035b8 <HandleCommand+0x224>)
 8003470:	f005 fb58 	bl	8008b24 <memset>
 8003474:	e072      	b.n	800355c <HandleCommand+0x1c8>
		} else if (strncmp((char*) rx_buf, "read:", 5) == 0) {
 8003476:	2205      	movs	r2, #5
 8003478:	4951      	ldr	r1, [pc, #324]	; (80035c0 <HandleCommand+0x22c>)
 800347a:	4843      	ldr	r0, [pc, #268]	; (8003588 <HandleCommand+0x1f4>)
 800347c:	f006 fb5b 	bl	8009b36 <strncmp>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d14a      	bne.n	800351c <HandleCommand+0x188>
			int ind;
			sscanf((char*) rx_buf + 5, "%d", &ind);
 8003486:	4841      	ldr	r0, [pc, #260]	; (800358c <HandleCommand+0x1f8>)
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	461a      	mov	r2, r3
 800348c:	494d      	ldr	r1, [pc, #308]	; (80035c4 <HandleCommand+0x230>)
 800348e:	f006 fae1 	bl	8009a54 <siscanf>
			readValue(ind);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	b29b      	uxth	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ff16 	bl	80032c8 <readValue>
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
					(int) (sys_tick / 1000), dataReg[0], dataReg[1], dataReg[2],
 800349c:	4b35      	ldr	r3, [pc, #212]	; (8003574 <HandleCommand+0x1e0>)
 800349e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	f7fd fbf5 	bl	8000c98 <__aeabi_uldivmod>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
 80034b2:	4694      	mov	ip, r2
					(int) (sys_tick / 1000), dataReg[0], dataReg[1], dataReg[2],
 80034b4:	4b44      	ldr	r3, [pc, #272]	; (80035c8 <HandleCommand+0x234>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
 80034b8:	469e      	mov	lr, r3
					(int) (sys_tick / 1000), dataReg[0], dataReg[1], dataReg[2],
 80034ba:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HandleCommand+0x234>)
 80034bc:	885b      	ldrh	r3, [r3, #2]
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
 80034be:	461a      	mov	r2, r3
					(int) (sys_tick / 1000), dataReg[0], dataReg[1], dataReg[2],
 80034c0:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <HandleCommand+0x234>)
 80034c2:	889b      	ldrh	r3, [r3, #4]
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
 80034c4:	4619      	mov	r1, r3
					dataReg[3], dataReg[4], dataReg[5], dataReg[6], dataReg[7]);
 80034c6:	4b40      	ldr	r3, [pc, #256]	; (80035c8 <HandleCommand+0x234>)
 80034c8:	88db      	ldrh	r3, [r3, #6]
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
 80034ca:	4618      	mov	r0, r3
					dataReg[3], dataReg[4], dataReg[5], dataReg[6], dataReg[7]);
 80034cc:	4b3e      	ldr	r3, [pc, #248]	; (80035c8 <HandleCommand+0x234>)
 80034ce:	891b      	ldrh	r3, [r3, #8]
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
 80034d0:	461c      	mov	r4, r3
					dataReg[3], dataReg[4], dataReg[5], dataReg[6], dataReg[7]);
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HandleCommand+0x234>)
 80034d4:	895b      	ldrh	r3, [r3, #10]
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
 80034d6:	461d      	mov	r5, r3
					dataReg[3], dataReg[4], dataReg[5], dataReg[6], dataReg[7]);
 80034d8:	4b3b      	ldr	r3, [pc, #236]	; (80035c8 <HandleCommand+0x234>)
 80034da:	899b      	ldrh	r3, [r3, #12]
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
 80034dc:	461e      	mov	r6, r3
					dataReg[3], dataReg[4], dataReg[5], dataReg[6], dataReg[7]);
 80034de:	4b3a      	ldr	r3, [pc, #232]	; (80035c8 <HandleCommand+0x234>)
 80034e0:	89db      	ldrh	r3, [r3, #14]
			sprintf((char*) tx_buf, "\n[%d] %d %d %d %d %d %d %d %d\n",
 80034e2:	9306      	str	r3, [sp, #24]
 80034e4:	9605      	str	r6, [sp, #20]
 80034e6:	9504      	str	r5, [sp, #16]
 80034e8:	9403      	str	r4, [sp, #12]
 80034ea:	9002      	str	r0, [sp, #8]
 80034ec:	9101      	str	r1, [sp, #4]
 80034ee:	9200      	str	r2, [sp, #0]
 80034f0:	4673      	mov	r3, lr
 80034f2:	4662      	mov	r2, ip
 80034f4:	4935      	ldr	r1, [pc, #212]	; (80035cc <HandleCommand+0x238>)
 80034f6:	4830      	ldr	r0, [pc, #192]	; (80035b8 <HandleCommand+0x224>)
 80034f8:	f006 fa8c 	bl	8009a14 <siprintf>
			HAL_UART_Transmit(&huart1, tx_buf, strlen((char*) tx_buf), 200);
 80034fc:	482e      	ldr	r0, [pc, #184]	; (80035b8 <HandleCommand+0x224>)
 80034fe:	f7fc fe6f 	bl	80001e0 <strlen>
 8003502:	4603      	mov	r3, r0
 8003504:	b29a      	uxth	r2, r3
 8003506:	23c8      	movs	r3, #200	; 0xc8
 8003508:	492b      	ldr	r1, [pc, #172]	; (80035b8 <HandleCommand+0x224>)
 800350a:	482c      	ldr	r0, [pc, #176]	; (80035bc <HandleCommand+0x228>)
 800350c:	f004 fa7d 	bl	8007a0a <HAL_UART_Transmit>
			memset(tx_buf, 0, sizeof(tx_buf));
 8003510:	2264      	movs	r2, #100	; 0x64
 8003512:	2100      	movs	r1, #0
 8003514:	4828      	ldr	r0, [pc, #160]	; (80035b8 <HandleCommand+0x224>)
 8003516:	f005 fb05 	bl	8008b24 <memset>
 800351a:	e01f      	b.n	800355c <HandleCommand+0x1c8>
		} else {
			sprintf((char*) tx_buf, "%d Incorrect command\n",
					(int) (sys_tick / 1000));
 800351c:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HandleCommand+0x1e0>)
 800351e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	f7fd fbb5 	bl	8000c98 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
			sprintf((char*) tx_buf, "%d Incorrect command\n",
 8003532:	4613      	mov	r3, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4926      	ldr	r1, [pc, #152]	; (80035d0 <HandleCommand+0x23c>)
 8003538:	481f      	ldr	r0, [pc, #124]	; (80035b8 <HandleCommand+0x224>)
 800353a:	f006 fa6b 	bl	8009a14 <siprintf>
			HAL_UART_Transmit(&huart1, tx_buf, strlen((char*) tx_buf), 200);
 800353e:	481e      	ldr	r0, [pc, #120]	; (80035b8 <HandleCommand+0x224>)
 8003540:	f7fc fe4e 	bl	80001e0 <strlen>
 8003544:	4603      	mov	r3, r0
 8003546:	b29a      	uxth	r2, r3
 8003548:	23c8      	movs	r3, #200	; 0xc8
 800354a:	491b      	ldr	r1, [pc, #108]	; (80035b8 <HandleCommand+0x224>)
 800354c:	481b      	ldr	r0, [pc, #108]	; (80035bc <HandleCommand+0x228>)
 800354e:	f004 fa5c 	bl	8007a0a <HAL_UART_Transmit>
			memset(tx_buf, 0, sizeof(tx_buf));
 8003552:	2264      	movs	r2, #100	; 0x64
 8003554:	2100      	movs	r1, #0
 8003556:	4818      	ldr	r0, [pc, #96]	; (80035b8 <HandleCommand+0x224>)
 8003558:	f005 fae4 	bl	8008b24 <memset>
		}
		memset(rx_buf, 0, sizeof(rx_buf));
 800355c:	2264      	movs	r2, #100	; 0x64
 800355e:	2100      	movs	r1, #0
 8003560:	4809      	ldr	r0, [pc, #36]	; (8003588 <HandleCommand+0x1f4>)
 8003562:	f005 fadf 	bl	8008b24 <memset>
		uart_buff_cnt = 0;
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <HandleCommand+0x1e8>)
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
	}
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003574:	200008a0 	.word	0x200008a0
 8003578:	20000988 	.word	0x20000988
 800357c:	200008ba 	.word	0x200008ba
 8003580:	20000984 	.word	0x20000984
 8003584:	0800eba0 	.word	0x0800eba0
 8003588:	20000920 	.word	0x20000920
 800358c:	20000925 	.word	0x20000925
 8003590:	20000a78 	.word	0x20000a78
 8003594:	20000a74 	.word	0x20000a74
 8003598:	20000a70 	.word	0x20000a70
 800359c:	20000a64 	.word	0x20000a64
 80035a0:	20000a68 	.word	0x20000a68
 80035a4:	20000a6c 	.word	0x20000a6c
 80035a8:	20000a60 	.word	0x20000a60
 80035ac:	0800eba8 	.word	0x0800eba8
 80035b0:	2000071c 	.word	0x2000071c
 80035b4:	0800ebc0 	.word	0x0800ebc0
 80035b8:	200008bc 	.word	0x200008bc
 80035bc:	20000858 	.word	0x20000858
 80035c0:	0800ebc8 	.word	0x0800ebc8
 80035c4:	0800ebd0 	.word	0x0800ebd0
 80035c8:	20000b48 	.word	0x20000b48
 80035cc:	0800ebd4 	.word	0x0800ebd4
 80035d0:	0800ebf4 	.word	0x0800ebf4

080035d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80035d8:	b672      	cpsid	i
}
 80035da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80035dc:	e7fe      	b.n	80035dc <Error_Handler+0x8>
	...

080035e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_MspInit+0x4c>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a0f      	ldr	r2, [pc, #60]	; (800362c <HAL_MspInit+0x4c>)
 80035f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_MspInit+0x4c>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_MspInit+0x4c>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	4a08      	ldr	r2, [pc, #32]	; (800362c <HAL_MspInit+0x4c>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	; 0x40
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_MspInit+0x4c>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_ADC_MspInit+0x7c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d127      	bne.n	80036a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <HAL_ADC_MspInit+0x80>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <HAL_ADC_MspInit+0x80>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6453      	str	r3, [r2, #68]	; 0x44
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <HAL_ADC_MspInit+0x80>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_ADC_MspInit+0x80>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a0e      	ldr	r2, [pc, #56]	; (80036b0 <HAL_ADC_MspInit+0x80>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_ADC_MspInit+0x80>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800368a:	2301      	movs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368e:	2303      	movs	r3, #3
 8003690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003696:	f107 0314 	add.w	r3, r7, #20
 800369a:	4619      	mov	r1, r3
 800369c:	4805      	ldr	r0, [pc, #20]	; (80036b4 <HAL_ADC_MspInit+0x84>)
 800369e:	f001 f8f3 	bl	8004888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036a2:	bf00      	nop
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40012000 	.word	0x40012000
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40020000 	.word	0x40020000

080036b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 031c 	add.w	r3, r7, #28
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3b      	ldr	r2, [pc, #236]	; (80037c4 <HAL_I2C_MspInit+0x10c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d12c      	bne.n	8003734 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	4a39      	ldr	r2, [pc, #228]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ea:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036f6:	23c0      	movs	r3, #192	; 0xc0
 80036f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036fa:	2312      	movs	r3, #18
 80036fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003702:	2303      	movs	r3, #3
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003706:	2304      	movs	r3, #4
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370a:	f107 031c 	add.w	r3, r7, #28
 800370e:	4619      	mov	r1, r3
 8003710:	482e      	ldr	r0, [pc, #184]	; (80037cc <HAL_I2C_MspInit+0x114>)
 8003712:	f001 f8b9 	bl	8004888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4a2a      	ldr	r2, [pc, #168]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 8003720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003724:	6413      	str	r3, [r2, #64]	; 0x40
 8003726:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003732:	e042      	b.n	80037ba <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <HAL_I2C_MspInit+0x118>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d13d      	bne.n	80037ba <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a20      	ldr	r2, [pc, #128]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800375a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003760:	2312      	movs	r3, #18
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800376c:	2304      	movs	r3, #4
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	4619      	mov	r1, r3
 8003776:	4815      	ldr	r0, [pc, #84]	; (80037cc <HAL_I2C_MspInit+0x114>)
 8003778:	f001 f886 	bl	8004888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800377c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003782:	2312      	movs	r3, #18
 8003784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378a:	2303      	movs	r3, #3
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800378e:	2309      	movs	r3, #9
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4619      	mov	r1, r3
 8003798:	480c      	ldr	r0, [pc, #48]	; (80037cc <HAL_I2C_MspInit+0x114>)
 800379a:	f001 f875 	bl	8004888 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 80037a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ac:	6413      	str	r3, [r2, #64]	; 0x40
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_I2C_MspInit+0x110>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
}
 80037ba:	bf00      	nop
 80037bc:	3730      	adds	r7, #48	; 0x30
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40005400 	.word	0x40005400
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40005800 	.word	0x40005800

080037d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <HAL_SPI_MspInit+0x94>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d133      	bne.n	800385e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_SPI_MspInit+0x98>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	4a1b      	ldr	r2, [pc, #108]	; (800386c <HAL_SPI_MspInit+0x98>)
 8003800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003804:	6453      	str	r3, [r2, #68]	; 0x44
 8003806:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_SPI_MspInit+0x98>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_SPI_MspInit+0x98>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4a14      	ldr	r2, [pc, #80]	; (800386c <HAL_SPI_MspInit+0x98>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_SPI_MspInit+0x98>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800382e:	23e0      	movs	r3, #224	; 0xe0
 8003830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003832:	2302      	movs	r3, #2
 8003834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383a:	2303      	movs	r3, #3
 800383c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800383e:	2305      	movs	r3, #5
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003842:	f107 0314 	add.w	r3, r7, #20
 8003846:	4619      	mov	r1, r3
 8003848:	4809      	ldr	r0, [pc, #36]	; (8003870 <HAL_SPI_MspInit+0x9c>)
 800384a:	f001 f81d 	bl	8004888 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	210a      	movs	r1, #10
 8003852:	2023      	movs	r0, #35	; 0x23
 8003854:	f000 ff4f 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003858:	2023      	movs	r0, #35	; 0x23
 800385a:	f000 ff68 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800385e:	bf00      	nop
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40013000 	.word	0x40013000
 800386c:	40023800 	.word	0x40023800
 8003870:	40020000 	.word	0x40020000

08003874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003884:	d116      	bne.n	80038b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_TIM_Base_MspInit+0x70>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <HAL_TIM_Base_MspInit+0x70>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <HAL_TIM_Base_MspInit+0x70>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 14, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	210e      	movs	r1, #14
 80038a6:	201c      	movs	r0, #28
 80038a8:	f000 ff25 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038ac:	201c      	movs	r0, #28
 80038ae:	f000 ff3e 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038b2:	e012      	b.n	80038da <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <HAL_TIM_Base_MspInit+0x74>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10d      	bne.n	80038da <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_TIM_Base_MspInit+0x70>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <HAL_TIM_Base_MspInit+0x70>)
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	6413      	str	r3, [r2, #64]	; 0x40
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_TIM_Base_MspInit+0x70>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40000400 	.word	0x40000400

080038ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <HAL_UART_MspInit+0x94>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d134      	bne.n	8003978 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_UART_MspInit+0x98>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <HAL_UART_MspInit+0x98>)
 8003918:	f043 0310 	orr.w	r3, r3, #16
 800391c:	6453      	str	r3, [r2, #68]	; 0x44
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_UART_MspInit+0x98>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <HAL_UART_MspInit+0x98>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <HAL_UART_MspInit+0x98>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_UART_MspInit+0x98>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003946:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800394a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394c:	2302      	movs	r3, #2
 800394e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003958:	2307      	movs	r3, #7
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4619      	mov	r1, r3
 8003962:	4809      	ldr	r0, [pc, #36]	; (8003988 <HAL_UART_MspInit+0x9c>)
 8003964:	f000 ff90 	bl	8004888 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8003968:	2200      	movs	r2, #0
 800396a:	2103      	movs	r1, #3
 800396c:	2025      	movs	r0, #37	; 0x25
 800396e:	f000 fec2 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003972:	2025      	movs	r0, #37	; 0x25
 8003974:	f000 fedb 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003978:	bf00      	nop
 800397a:	3728      	adds	r7, #40	; 0x28
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40011000 	.word	0x40011000
 8003984:	40023800 	.word	0x40023800
 8003988:	40020000 	.word	0x40020000

0800398c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003990:	e7fe      	b.n	8003990 <NMI_Handler+0x4>

08003992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003996:	e7fe      	b.n	8003996 <HardFault_Handler+0x4>

08003998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800399c:	e7fe      	b.n	800399c <MemManage_Handler+0x4>

0800399e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039a2:	e7fe      	b.n	80039a2 <BusFault_Handler+0x4>

080039a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <UsageFault_Handler+0x4>

080039aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039d8:	f000 f97c 	bl	8003cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}

080039e0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80039e4:	2008      	movs	r0, #8
 80039e6:	f001 f91f 	bl	8004c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <TIM2_IRQHandler+0x10>)
 80039f6:	f003 fc27 	bl	8007248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200007c8 	.word	0x200007c8

08003a04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <SPI1_IRQHandler+0x10>)
 8003a0a:	f002 ffc1 	bl	8006990 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000770 	.word	0x20000770

08003a18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <USART1_IRQHandler+0x10>)
 8003a1e:	f004 f8b7 	bl	8007b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000858 	.word	0x20000858

08003a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return 1;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_kill>:

int _kill(int pid, int sig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a46:	f005 f80b 	bl	8008a60 <__errno>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2216      	movs	r2, #22
 8003a4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_exit>:

void _exit (int status)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a64:	f04f 31ff 	mov.w	r1, #4294967295
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ffe7 	bl	8003a3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a6e:	e7fe      	b.n	8003a6e <_exit+0x12>

08003a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e00a      	b.n	8003a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a82:	f3af 8000 	nop.w
 8003a86:	4601      	mov	r1, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	60ba      	str	r2, [r7, #8]
 8003a8e:	b2ca      	uxtb	r2, r1
 8003a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dbf0      	blt.n	8003a82 <_read+0x12>
  }

  return len;
 8003aa0:	687b      	ldr	r3, [r7, #4]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	e009      	b.n	8003ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	60ba      	str	r2, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	3301      	adds	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	dbf1      	blt.n	8003abc <_write+0x12>
  }
  return len;
 8003ad8:	687b      	ldr	r3, [r7, #4]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <_close>:

int _close(int file)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_isatty>:

int _isatty(int file)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b22:	2301      	movs	r3, #1
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <_sbrk+0x5c>)
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <_sbrk+0x60>)
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b60:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <_sbrk+0x64>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <_sbrk+0x64>)
 8003b6a:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <_sbrk+0x68>)
 8003b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <_sbrk+0x64>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d207      	bcs.n	8003b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b7c:	f004 ff70 	bl	8008a60 <__errno>
 8003b80:	4603      	mov	r3, r0
 8003b82:	220c      	movs	r2, #12
 8003b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	e009      	b.n	8003ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <_sbrk+0x64>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <_sbrk+0x64>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4413      	add	r3, r2
 8003b9a:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <_sbrk+0x64>)
 8003b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20020000 	.word	0x20020000
 8003bac:	00000400 	.word	0x00000400
 8003bb0:	20000b58 	.word	0x20000b58
 8003bb4:	20000b70 	.word	0x20000b70

08003bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <SystemInit+0x20>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <SystemInit+0x20>)
 8003bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003be0:	480d      	ldr	r0, [pc, #52]	; (8003c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003be2:	490e      	ldr	r1, [pc, #56]	; (8003c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003be4:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be8:	e002      	b.n	8003bf0 <LoopCopyDataInit>

08003bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bee:	3304      	adds	r3, #4

08003bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf4:	d3f9      	bcc.n	8003bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bf6:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bf8:	4c0b      	ldr	r4, [pc, #44]	; (8003c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bfc:	e001      	b.n	8003c02 <LoopFillZerobss>

08003bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c00:	3204      	adds	r2, #4

08003c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c04:	d3fb      	bcc.n	8003bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c06:	f7ff ffd7 	bl	8003bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c0a:	f004 ff2f 	bl	8008a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c0e:	f7fe fd77 	bl	8002700 <main>
  bx  lr    
 8003c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c1c:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8003c20:	08010130 	.word	0x08010130
  ldr r2, =_sbss
 8003c24:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8003c28:	20000b70 	.word	0x20000b70

08003c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c2c:	e7fe      	b.n	8003c2c <ADC_IRQHandler>
	...

08003c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_Init+0x40>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <HAL_Init+0x40>)
 8003c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_Init+0x40>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <HAL_Init+0x40>)
 8003c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_Init+0x40>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <HAL_Init+0x40>)
 8003c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c58:	2003      	movs	r0, #3
 8003c5a:	f000 fd41 	bl	80046e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c5e:	200f      	movs	r0, #15
 8003c60:	f000 f808 	bl	8003c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c64:	f7ff fcbc 	bl	80035e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40023c00 	.word	0x40023c00

08003c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_InitTick+0x54>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_InitTick+0x58>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fd59 	bl	800474a <HAL_SYSTICK_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e00e      	b.n	8003cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b0f      	cmp	r3, #15
 8003ca6:	d80a      	bhi.n	8003cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	f000 fd21 	bl	80046f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cb4:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <HAL_InitTick+0x5c>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000070 	.word	0x20000070
 8003ccc:	20000078 	.word	0x20000078
 8003cd0:	20000074 	.word	0x20000074

08003cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_IncTick+0x20>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_IncTick+0x24>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <HAL_IncTick+0x24>)
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000078 	.word	0x20000078
 8003cf8:	20000b5c 	.word	0x20000b5c

08003cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_GetTick+0x14>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000b5c 	.word	0x20000b5c

08003d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d1c:	f7ff ffee 	bl	8003cfc <HAL_GetTick>
 8003d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d005      	beq.n	8003d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_Delay+0x44>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d3a:	bf00      	nop
 8003d3c:	f7ff ffde 	bl	8003cfc <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d8f7      	bhi.n	8003d3c <HAL_Delay+0x28>
  {
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000078 	.word	0x20000078

08003d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e033      	b.n	8003dda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fc58 	bl	8003630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003da2:	f023 0302 	bic.w	r3, r3, #2
 8003da6:	f043 0202 	orr.w	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 faca 	bl	8004348 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	f043 0201 	orr.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8003dca:	e001      	b.n	8003dd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_Start+0x1a>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e097      	b.n	8003f2e <HAL_ADC_Start+0x14a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d018      	beq.n	8003e46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e24:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <HAL_ADC_Start+0x158>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a45      	ldr	r2, [pc, #276]	; (8003f40 <HAL_ADC_Start+0x15c>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	0c9a      	lsrs	r2, r3, #18
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e38:	e002      	b.n	8003e40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f9      	bne.n	8003e3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d15f      	bne.n	8003f14 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d106      	bne.n	8003ea2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f023 0206 	bic.w	r2, r3, #6
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
 8003ea0:	e002      	b.n	8003ea8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eb0:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <HAL_ADC_Start+0x160>)
 8003eb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ebc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d129      	bne.n	8003f2c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	e020      	b.n	8003f2c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <HAL_ADC_Start+0x164>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d11b      	bne.n	8003f2c <HAL_ADC_Start+0x148>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d114      	bne.n	8003f2c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	e00b      	b.n	8003f2c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f043 0210 	orr.w	r2, r3, #16
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000070 	.word	0x20000070
 8003f40:	431bde83 	.word	0x431bde83
 8003f44:	40012300 	.word	0x40012300
 8003f48:	40012000 	.word	0x40012000

08003f4c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_Stop+0x16>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e021      	b.n	8003fa6 <HAL_ADC_Stop+0x5a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d113      	bne.n	8003ff8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fde:	d10b      	bne.n	8003ff8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e063      	b.n	80040c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003ff8:	f7ff fe80 	bl	8003cfc <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ffe:	e021      	b.n	8004044 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d01d      	beq.n	8004044 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <HAL_ADC_PollForConversion+0x6c>
 800400e:	f7ff fe75 	bl	8003cfc <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d212      	bcs.n	8004044 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d00b      	beq.n	8004044 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f043 0204 	orr.w	r2, r3, #4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e03d      	b.n	80040c0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b02      	cmp	r3, #2
 8004050:	d1d6      	bne.n	8004000 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0212 	mvn.w	r2, #18
 800405a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d123      	bne.n	80040be <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11f      	bne.n	80040be <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004088:	2b00      	cmp	r3, #0
 800408a:	d006      	beq.n	800409a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004096:	2b00      	cmp	r3, #0
 8004098:	d111      	bne.n	80040be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x1c>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e113      	b.n	8004328 <HAL_ADC_ConfigChannel+0x244>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b09      	cmp	r3, #9
 800410e:	d925      	bls.n	800415c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68d9      	ldr	r1, [r3, #12]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	3b1e      	subs	r3, #30
 8004126:	2207      	movs	r2, #7
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43da      	mvns	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	400a      	ands	r2, r1
 8004134:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68d9      	ldr	r1, [r3, #12]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	4618      	mov	r0, r3
 8004148:	4603      	mov	r3, r0
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4403      	add	r3, r0
 800414e:	3b1e      	subs	r3, #30
 8004150:	409a      	lsls	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	e022      	b.n	80041a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6919      	ldr	r1, [r3, #16]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	2207      	movs	r2, #7
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43da      	mvns	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	400a      	ands	r2, r1
 800417e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6919      	ldr	r1, [r3, #16]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	4618      	mov	r0, r3
 8004192:	4603      	mov	r3, r0
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4403      	add	r3, r0
 8004198:	409a      	lsls	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d824      	bhi.n	80041f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	3b05      	subs	r3, #5
 80041bc:	221f      	movs	r2, #31
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	400a      	ands	r2, r1
 80041ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4618      	mov	r0, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	3b05      	subs	r3, #5
 80041e6:	fa00 f203 	lsl.w	r2, r0, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34
 80041f2:	e04c      	b.n	800428e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	d824      	bhi.n	8004246 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	3b23      	subs	r3, #35	; 0x23
 800420e:	221f      	movs	r2, #31
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43da      	mvns	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	400a      	ands	r2, r1
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	4618      	mov	r0, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	3b23      	subs	r3, #35	; 0x23
 8004238:	fa00 f203 	lsl.w	r2, r0, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
 8004244:	e023      	b.n	800428e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	3b41      	subs	r3, #65	; 0x41
 8004258:	221f      	movs	r2, #31
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43da      	mvns	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	400a      	ands	r2, r1
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	4618      	mov	r0, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	3b41      	subs	r3, #65	; 0x41
 8004282:	fa00 f203 	lsl.w	r2, r0, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800428e:	4b29      	ldr	r3, [pc, #164]	; (8004334 <HAL_ADC_ConfigChannel+0x250>)
 8004290:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a28      	ldr	r2, [pc, #160]	; (8004338 <HAL_ADC_ConfigChannel+0x254>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10f      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x1d8>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b12      	cmp	r3, #18
 80042a2:	d10b      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <HAL_ADC_ConfigChannel+0x254>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d12b      	bne.n	800431e <HAL_ADC_ConfigChannel+0x23a>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_ADC_ConfigChannel+0x258>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <HAL_ADC_ConfigChannel+0x1f4>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b11      	cmp	r3, #17
 80042d6:	d122      	bne.n	800431e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a11      	ldr	r2, [pc, #68]	; (800433c <HAL_ADC_ConfigChannel+0x258>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d111      	bne.n	800431e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_ADC_ConfigChannel+0x25c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a11      	ldr	r2, [pc, #68]	; (8004344 <HAL_ADC_ConfigChannel+0x260>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	0c9a      	lsrs	r2, r3, #18
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004310:	e002      	b.n	8004318 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3b01      	subs	r3, #1
 8004316:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f9      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40012300 	.word	0x40012300
 8004338:	40012000 	.word	0x40012000
 800433c:	10000012 	.word	0x10000012
 8004340:	20000070 	.word	0x20000070
 8004344:	431bde83 	.word	0x431bde83

08004348 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004350:	4b79      	ldr	r3, [pc, #484]	; (8004538 <ADC_Init+0x1f0>)
 8004352:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	431a      	orrs	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800437c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	021a      	lsls	r2, r3, #8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6899      	ldr	r1, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	4a58      	ldr	r2, [pc, #352]	; (800453c <ADC_Init+0x1f4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d022      	beq.n	8004426 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6899      	ldr	r1, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	e00f      	b.n	8004446 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004444:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0202 	bic.w	r2, r2, #2
 8004454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6899      	ldr	r1, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7e1b      	ldrb	r3, [r3, #24]
 8004460:	005a      	lsls	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004482:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004492:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	3b01      	subs	r3, #1
 80044a0:	035a      	lsls	r2, r3, #13
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	e007      	b.n	80044bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	051a      	lsls	r2, r3, #20
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6899      	ldr	r1, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044fe:	025a      	lsls	r2, r3, #9
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	029a      	lsls	r2, r3, #10
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40012300 	.word	0x40012300
 800453c:	0f000001 	.word	0x0f000001

08004540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <__NVIC_SetPriorityGrouping+0x44>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800455c:	4013      	ands	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800456c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004572:	4a04      	ldr	r2, [pc, #16]	; (8004584 <__NVIC_SetPriorityGrouping+0x44>)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	60d3      	str	r3, [r2, #12]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <__NVIC_GetPriorityGrouping+0x18>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	f003 0307 	and.w	r3, r3, #7
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	db0b      	blt.n	80045ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	f003 021f 	and.w	r2, r3, #31
 80045bc:	4907      	ldr	r1, [pc, #28]	; (80045dc <__NVIC_EnableIRQ+0x38>)
 80045be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2001      	movs	r0, #1
 80045c6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	e000e100 	.word	0xe000e100

080045e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db0a      	blt.n	800460a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	490c      	ldr	r1, [pc, #48]	; (800462c <__NVIC_SetPriority+0x4c>)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	0112      	lsls	r2, r2, #4
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	440b      	add	r3, r1
 8004604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004608:	e00a      	b.n	8004620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	4908      	ldr	r1, [pc, #32]	; (8004630 <__NVIC_SetPriority+0x50>)
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	3b04      	subs	r3, #4
 8004618:	0112      	lsls	r2, r2, #4
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	440b      	add	r3, r1
 800461e:	761a      	strb	r2, [r3, #24]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e100 	.word	0xe000e100
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f1c3 0307 	rsb	r3, r3, #7
 800464e:	2b04      	cmp	r3, #4
 8004650:	bf28      	it	cs
 8004652:	2304      	movcs	r3, #4
 8004654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3304      	adds	r3, #4
 800465a:	2b06      	cmp	r3, #6
 800465c:	d902      	bls.n	8004664 <NVIC_EncodePriority+0x30>
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3b03      	subs	r3, #3
 8004662:	e000      	b.n	8004666 <NVIC_EncodePriority+0x32>
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004668:	f04f 32ff 	mov.w	r2, #4294967295
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43da      	mvns	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	401a      	ands	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800467c:	f04f 31ff 	mov.w	r1, #4294967295
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	43d9      	mvns	r1, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800468c:	4313      	orrs	r3, r2
         );
}
 800468e:	4618      	mov	r0, r3
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ac:	d301      	bcc.n	80046b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b2:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <SysTick_Config+0x40>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ba:	210f      	movs	r1, #15
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	f7ff ff8e 	bl	80045e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <SysTick_Config+0x40>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <SysTick_Config+0x40>)
 80046cc:	2207      	movs	r2, #7
 80046ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	e000e010 	.word	0xe000e010

080046e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff29 	bl	8004540 <__NVIC_SetPriorityGrouping>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004708:	f7ff ff3e 	bl	8004588 <__NVIC_GetPriorityGrouping>
 800470c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f7ff ff8e 	bl	8004634 <NVIC_EncodePriority>
 8004718:	4602      	mov	r2, r0
 800471a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ff5d 	bl	80045e0 <__NVIC_SetPriority>
}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff31 	bl	80045a4 <__NVIC_EnableIRQ>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff ffa2 	bl	800469c <SysTick_Config>
 8004758:	4603      	mov	r3, r0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004770:	f7ff fac4 	bl	8003cfc <HAL_GetTick>
 8004774:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d008      	beq.n	8004794 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2280      	movs	r2, #128	; 0x80
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e052      	b.n	800483a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0216 	bic.w	r2, r2, #22
 80047a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <HAL_DMA_Abort+0x62>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0208 	bic.w	r2, r2, #8
 80047d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047e4:	e013      	b.n	800480e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047e6:	f7ff fa89 	bl	8003cfc <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b05      	cmp	r3, #5
 80047f2:	d90c      	bls.n	800480e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2203      	movs	r2, #3
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e015      	b.n	800483a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e4      	bne.n	80047e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004820:	223f      	movs	r2, #63	; 0x3f
 8004822:	409a      	lsls	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d004      	beq.n	8004860 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2280      	movs	r2, #128	; 0x80
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e00c      	b.n	800487a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2205      	movs	r2, #5
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	e159      	b.n	8004b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048a4:	2201      	movs	r2, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	429a      	cmp	r2, r3
 80048be:	f040 8148 	bne.w	8004b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d005      	beq.n	80048da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d130      	bne.n	800493c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	2203      	movs	r2, #3
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004910:	2201      	movs	r2, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 0201 	and.w	r2, r3, #1
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	2b03      	cmp	r3, #3
 8004946:	d017      	beq.n	8004978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	2203      	movs	r2, #3
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d123      	bne.n	80049cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3208      	adds	r2, #8
 800498c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	220f      	movs	r2, #15
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	08da      	lsrs	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3208      	adds	r2, #8
 80049c6:	69b9      	ldr	r1, [r7, #24]
 80049c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	2203      	movs	r2, #3
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4013      	ands	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0203 	and.w	r2, r3, #3
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80a2 	beq.w	8004b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	4b57      	ldr	r3, [pc, #348]	; (8004b70 <HAL_GPIO_Init+0x2e8>)
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	4a56      	ldr	r2, [pc, #344]	; (8004b70 <HAL_GPIO_Init+0x2e8>)
 8004a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a1e:	4b54      	ldr	r3, [pc, #336]	; (8004b70 <HAL_GPIO_Init+0x2e8>)
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a2a:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_GPIO_Init+0x2ec>)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	089b      	lsrs	r3, r3, #2
 8004a30:	3302      	adds	r3, #2
 8004a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	220f      	movs	r2, #15
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a49      	ldr	r2, [pc, #292]	; (8004b78 <HAL_GPIO_Init+0x2f0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d019      	beq.n	8004a8a <HAL_GPIO_Init+0x202>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a48      	ldr	r2, [pc, #288]	; (8004b7c <HAL_GPIO_Init+0x2f4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_GPIO_Init+0x1fe>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a47      	ldr	r2, [pc, #284]	; (8004b80 <HAL_GPIO_Init+0x2f8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00d      	beq.n	8004a82 <HAL_GPIO_Init+0x1fa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a46      	ldr	r2, [pc, #280]	; (8004b84 <HAL_GPIO_Init+0x2fc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <HAL_GPIO_Init+0x1f6>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a45      	ldr	r2, [pc, #276]	; (8004b88 <HAL_GPIO_Init+0x300>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <HAL_GPIO_Init+0x1f2>
 8004a76:	2304      	movs	r3, #4
 8004a78:	e008      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a7a:	2307      	movs	r3, #7
 8004a7c:	e006      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e004      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e002      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	f002 0203 	and.w	r2, r2, #3
 8004a92:	0092      	lsls	r2, r2, #2
 8004a94:	4093      	lsls	r3, r2
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a9c:	4935      	ldr	r1, [pc, #212]	; (8004b74 <HAL_GPIO_Init+0x2ec>)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	3302      	adds	r3, #2
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aaa:	4b38      	ldr	r3, [pc, #224]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ace:	4a2f      	ldr	r2, [pc, #188]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ad4:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004af8:	4a24      	ldr	r2, [pc, #144]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004afe:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b22:	4a1a      	ldr	r2, [pc, #104]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b28:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b4c:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3301      	adds	r3, #1
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	f67f aea2 	bls.w	80048a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	3724      	adds	r7, #36	; 0x24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40013800 	.word	0x40013800
 8004b78:	40020000 	.word	0x40020000
 8004b7c:	40020400 	.word	0x40020400
 8004b80:	40020800 	.word	0x40020800
 8004b84:	40020c00 	.word	0x40020c00
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40013c00 	.word	0x40013c00

08004b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	887b      	ldrh	r3, [r7, #2]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
 8004bac:	e001      	b.n	8004bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	807b      	strh	r3, [r7, #2]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bd0:	787b      	ldrb	r3, [r7, #1]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bd6:	887a      	ldrh	r2, [r7, #2]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bdc:	e003      	b.n	8004be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bde:	887b      	ldrh	r3, [r7, #2]
 8004be0:	041a      	lsls	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	619a      	str	r2, [r3, #24]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c04:	887a      	ldrh	r2, [r7, #2]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	041a      	lsls	r2, r3, #16
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	43d9      	mvns	r1, r3
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	400b      	ands	r3, r1
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	619a      	str	r2, [r3, #24]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe f9dc 	bl	8003004 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40013c00 	.word	0x40013c00

08004c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e12b      	b.n	8004ec2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fe fd1a 	bl	80036b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	; 0x24
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004caa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cbc:	f001 fd22 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 8004cc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4a81      	ldr	r2, [pc, #516]	; (8004ecc <HAL_I2C_Init+0x274>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d807      	bhi.n	8004cdc <HAL_I2C_Init+0x84>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a80      	ldr	r2, [pc, #512]	; (8004ed0 <HAL_I2C_Init+0x278>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	bf94      	ite	ls
 8004cd4:	2301      	movls	r3, #1
 8004cd6:	2300      	movhi	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	e006      	b.n	8004cea <HAL_I2C_Init+0x92>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a7d      	ldr	r2, [pc, #500]	; (8004ed4 <HAL_I2C_Init+0x27c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bf94      	ite	ls
 8004ce4:	2301      	movls	r3, #1
 8004ce6:	2300      	movhi	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0e7      	b.n	8004ec2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a78      	ldr	r2, [pc, #480]	; (8004ed8 <HAL_I2C_Init+0x280>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0c9b      	lsrs	r3, r3, #18
 8004cfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a6a      	ldr	r2, [pc, #424]	; (8004ecc <HAL_I2C_Init+0x274>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d802      	bhi.n	8004d2c <HAL_I2C_Init+0xd4>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	e009      	b.n	8004d40 <HAL_I2C_Init+0xe8>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	4a69      	ldr	r2, [pc, #420]	; (8004edc <HAL_I2C_Init+0x284>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	3301      	adds	r3, #1
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	495c      	ldr	r1, [pc, #368]	; (8004ecc <HAL_I2C_Init+0x274>)
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	d819      	bhi.n	8004d94 <HAL_I2C_Init+0x13c>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1e59      	subs	r1, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d6e:	1c59      	adds	r1, r3, #1
 8004d70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d74:	400b      	ands	r3, r1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_I2C_Init+0x138>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1e59      	subs	r1, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8e:	e051      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004d90:	2304      	movs	r3, #4
 8004d92:	e04f      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d111      	bne.n	8004dc0 <HAL_I2C_Init+0x168>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1e58      	subs	r0, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	440b      	add	r3, r1
 8004daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e012      	b.n	8004de6 <HAL_I2C_Init+0x18e>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1e58      	subs	r0, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	0099      	lsls	r1, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_I2C_Init+0x196>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e022      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10e      	bne.n	8004e14 <HAL_I2C_Init+0x1bc>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1e58      	subs	r0, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6859      	ldr	r1, [r3, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	440b      	add	r3, r1
 8004e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e08:	3301      	adds	r3, #1
 8004e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	e00f      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1e58      	subs	r0, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6859      	ldr	r1, [r3, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	0099      	lsls	r1, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	6809      	ldr	r1, [r1, #0]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6911      	ldr	r1, [r2, #16]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68d2      	ldr	r2, [r2, #12]
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	000186a0 	.word	0x000186a0
 8004ed0:	001e847f 	.word	0x001e847f
 8004ed4:	003d08ff 	.word	0x003d08ff
 8004ed8:	431bde83 	.word	0x431bde83
 8004edc:	10624dd3 	.word	0x10624dd3

08004ee0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	461a      	mov	r2, r3
 8004eec:	460b      	mov	r3, r1
 8004eee:	817b      	strh	r3, [r7, #10]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ef4:	f7fe ff02 	bl	8003cfc <HAL_GetTick>
 8004ef8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	f040 80e0 	bne.w	80050c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2319      	movs	r3, #25
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4970      	ldr	r1, [pc, #448]	; (80050d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fde8 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0d3      	b.n	80050ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_I2C_Master_Transmit+0x50>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e0cc      	b.n	80050ca <HAL_I2C_Master_Transmit+0x1ea>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d007      	beq.n	8004f56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2221      	movs	r2, #33	; 0x21
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2210      	movs	r2, #16
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	893a      	ldrh	r2, [r7, #8]
 8004f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a50      	ldr	r2, [pc, #320]	; (80050d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f98:	8979      	ldrh	r1, [r7, #10]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fbbc 	bl	800571c <I2C_MasterRequestWrite>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e08d      	b.n	80050ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004fc4:	e066      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	6a39      	ldr	r1, [r7, #32]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fe62 	bl	8005c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00d      	beq.n	8004ff2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d107      	bne.n	8004fee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e06b      	b.n	80050ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d11b      	bne.n	8005068 <HAL_I2C_Master_Transmit+0x188>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	d017      	beq.n	8005068 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	781a      	ldrb	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	6a39      	ldr	r1, [r7, #32]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fe52 	bl	8005d16 <I2C_WaitOnBTFFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00d      	beq.n	8005094 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b04      	cmp	r3, #4
 800507e:	d107      	bne.n	8005090 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e01a      	b.n	80050ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d194      	bne.n	8004fc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	00100002 	.word	0x00100002
 80050d8:	ffff0000 	.word	0xffff0000

080050dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	; 0x30
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	461a      	mov	r2, r3
 80050e8:	460b      	mov	r3, r1
 80050ea:	817b      	strh	r3, [r7, #10]
 80050ec:	4613      	mov	r3, r2
 80050ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050f0:	f7fe fe04 	bl	8003cfc <HAL_GetTick>
 80050f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b20      	cmp	r3, #32
 8005100:	f040 820b 	bne.w	800551a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2319      	movs	r3, #25
 800510a:	2201      	movs	r2, #1
 800510c:	497c      	ldr	r1, [pc, #496]	; (8005300 <HAL_I2C_Master_Receive+0x224>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fcea 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800511a:	2302      	movs	r3, #2
 800511c:	e1fe      	b.n	800551c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_I2C_Master_Receive+0x50>
 8005128:	2302      	movs	r3, #2
 800512a:	e1f7      	b.n	800551c <HAL_I2C_Master_Receive+0x440>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b01      	cmp	r3, #1
 8005140:	d007      	beq.n	8005152 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005160:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2222      	movs	r2, #34	; 0x22
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2210      	movs	r2, #16
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	893a      	ldrh	r2, [r7, #8]
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a5c      	ldr	r2, [pc, #368]	; (8005304 <HAL_I2C_Master_Receive+0x228>)
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005194:	8979      	ldrh	r1, [r7, #10]
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fb40 	bl	8005820 <I2C_MasterRequestRead>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e1b8      	b.n	800551c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d113      	bne.n	80051da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b2:	2300      	movs	r3, #0
 80051b4:	623b      	str	r3, [r7, #32]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	623b      	str	r3, [r7, #32]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	e18c      	b.n	80054f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d11b      	bne.n	800521a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e16c      	b.n	80054f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521e:	2b02      	cmp	r3, #2
 8005220:	d11b      	bne.n	800525a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005230:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005240:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	e14c      	b.n	80054f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005268:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005280:	e138      	b.n	80054f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	2b03      	cmp	r3, #3
 8005288:	f200 80f1 	bhi.w	800546e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	2b01      	cmp	r3, #1
 8005292:	d123      	bne.n	80052dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fd7d 	bl	8005d98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e139      	b.n	800551c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052da:	e10b      	b.n	80054f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d14e      	bne.n	8005382 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	2200      	movs	r2, #0
 80052ec:	4906      	ldr	r1, [pc, #24]	; (8005308 <HAL_I2C_Master_Receive+0x22c>)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fbfa 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e10e      	b.n	800551c <HAL_I2C_Master_Receive+0x440>
 80052fe:	bf00      	nop
 8005300:	00100002 	.word	0x00100002
 8005304:	ffff0000 	.word	0xffff0000
 8005308:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005380:	e0b8      	b.n	80054f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2200      	movs	r2, #0
 800538a:	4966      	ldr	r1, [pc, #408]	; (8005524 <HAL_I2C_Master_Receive+0x448>)
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 fbab 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0bf      	b.n	800551c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2200      	movs	r2, #0
 80053e6:	494f      	ldr	r1, [pc, #316]	; (8005524 <HAL_I2C_Master_Receive+0x448>)
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fb7d 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e091      	b.n	800551c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800546c:	e042      	b.n	80054f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fc90 	bl	8005d98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e04c      	b.n	800551c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d118      	bne.n	80054f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f aec2 	bne.w	8005282 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800551a:	2302      	movs	r3, #2
  }
}
 800551c:	4618      	mov	r0, r3
 800551e:	3728      	adds	r7, #40	; 0x28
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	00010004 	.word	0x00010004

08005528 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4603      	mov	r3, r0
 8005538:	817b      	strh	r3, [r7, #10]
 800553a:	460b      	mov	r3, r1
 800553c:	813b      	strh	r3, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005542:	f7fe fbdb 	bl	8003cfc <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b20      	cmp	r3, #32
 8005552:	f040 80d9 	bne.w	8005708 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	2319      	movs	r3, #25
 800555c:	2201      	movs	r2, #1
 800555e:	496d      	ldr	r1, [pc, #436]	; (8005714 <HAL_I2C_Mem_Write+0x1ec>)
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fac1 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
 800556e:	e0cc      	b.n	800570a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_I2C_Mem_Write+0x56>
 800557a:	2302      	movs	r3, #2
 800557c:	e0c5      	b.n	800570a <HAL_I2C_Mem_Write+0x1e2>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b01      	cmp	r3, #1
 8005592:	d007      	beq.n	80055a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2221      	movs	r2, #33	; 0x21
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2240      	movs	r2, #64	; 0x40
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a3a      	ldr	r2, [r7, #32]
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a4d      	ldr	r2, [pc, #308]	; (8005718 <HAL_I2C_Mem_Write+0x1f0>)
 80055e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055e6:	88f8      	ldrh	r0, [r7, #6]
 80055e8:	893a      	ldrh	r2, [r7, #8]
 80055ea:	8979      	ldrh	r1, [r7, #10]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	4603      	mov	r3, r0
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f9e0 	bl	80059bc <I2C_RequestMemoryWrite>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d052      	beq.n	80056a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e081      	b.n	800570a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fb42 	bl	8005c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00d      	beq.n	8005632 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	2b04      	cmp	r3, #4
 800561c:	d107      	bne.n	800562e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e06b      	b.n	800570a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	781a      	ldrb	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b04      	cmp	r3, #4
 800566e:	d11b      	bne.n	80056a8 <HAL_I2C_Mem_Write+0x180>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d017      	beq.n	80056a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	781a      	ldrb	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1aa      	bne.n	8005606 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 fb2e 	bl	8005d16 <I2C_WaitOnBTFFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00d      	beq.n	80056dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d107      	bne.n	80056d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e016      	b.n	800570a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	e000      	b.n	800570a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	00100002 	.word	0x00100002
 8005718:	ffff0000 	.word	0xffff0000

0800571c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	460b      	mov	r3, r1
 800572a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d006      	beq.n	8005746 <I2C_MasterRequestWrite+0x2a>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d003      	beq.n	8005746 <I2C_MasterRequestWrite+0x2a>
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005744:	d108      	bne.n	8005758 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	e00b      	b.n	8005770 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	2b12      	cmp	r3, #18
 800575e:	d107      	bne.n	8005770 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800576e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f9b3 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00d      	beq.n	80057a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005796:	d103      	bne.n	80057a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e035      	b.n	8005810 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ac:	d108      	bne.n	80057c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ae:	897b      	ldrh	r3, [r7, #10]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057bc:	611a      	str	r2, [r3, #16]
 80057be:	e01b      	b.n	80057f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057c0:	897b      	ldrh	r3, [r7, #10]
 80057c2:	11db      	asrs	r3, r3, #7
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f003 0306 	and.w	r3, r3, #6
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f063 030f 	orn	r3, r3, #15
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	490e      	ldr	r1, [pc, #56]	; (8005818 <I2C_MasterRequestWrite+0xfc>)
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f9d9 	bl	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e010      	b.n	8005810 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057ee:	897b      	ldrh	r3, [r7, #10]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4907      	ldr	r1, [pc, #28]	; (800581c <I2C_MasterRequestWrite+0x100>)
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f9c9 	bl	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	00010008 	.word	0x00010008
 800581c:	00010002 	.word	0x00010002

08005820 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	460b      	mov	r3, r1
 800582e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005844:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d006      	beq.n	800585a <I2C_MasterRequestRead+0x3a>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d003      	beq.n	800585a <I2C_MasterRequestRead+0x3a>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005858:	d108      	bne.n	800586c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	e00b      	b.n	8005884 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	2b11      	cmp	r3, #17
 8005872:	d107      	bne.n	8005884 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005882:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f929 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00d      	beq.n	80058b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058aa:	d103      	bne.n	80058b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e079      	b.n	80059ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c0:	d108      	bne.n	80058d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058c2:	897b      	ldrh	r3, [r7, #10]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	611a      	str	r2, [r3, #16]
 80058d2:	e05f      	b.n	8005994 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058d4:	897b      	ldrh	r3, [r7, #10]
 80058d6:	11db      	asrs	r3, r3, #7
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f003 0306 	and.w	r3, r3, #6
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f063 030f 	orn	r3, r3, #15
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4930      	ldr	r1, [pc, #192]	; (80059b4 <I2C_MasterRequestRead+0x194>)
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f94f 	bl	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e054      	b.n	80059ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005902:	897b      	ldrh	r3, [r7, #10]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4929      	ldr	r1, [pc, #164]	; (80059b8 <I2C_MasterRequestRead+0x198>)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f93f 	bl	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e044      	b.n	80059ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005946:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f8c7 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596e:	d103      	bne.n	8005978 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e017      	b.n	80059ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800597c:	897b      	ldrh	r3, [r7, #10]
 800597e:	11db      	asrs	r3, r3, #7
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f003 0306 	and.w	r3, r3, #6
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f063 030e 	orn	r3, r3, #14
 800598c:	b2da      	uxtb	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	4907      	ldr	r1, [pc, #28]	; (80059b8 <I2C_MasterRequestRead+0x198>)
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f8fb 	bl	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	00010008 	.word	0x00010008
 80059b8:	00010002 	.word	0x00010002

080059bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	4608      	mov	r0, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	461a      	mov	r2, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	817b      	strh	r3, [r7, #10]
 80059ce:	460b      	mov	r3, r1
 80059d0:	813b      	strh	r3, [r7, #8]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f878 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00d      	beq.n	8005a1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0c:	d103      	bne.n	8005a16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e05f      	b.n	8005ada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a1a:	897b      	ldrh	r3, [r7, #10]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	6a3a      	ldr	r2, [r7, #32]
 8005a2e:	492d      	ldr	r1, [pc, #180]	; (8005ae4 <I2C_RequestMemoryWrite+0x128>)
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f8b0 	bl	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e04c      	b.n	8005ada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a58:	6a39      	ldr	r1, [r7, #32]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f91a 	bl	8005c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00d      	beq.n	8005a82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d107      	bne.n	8005a7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e02b      	b.n	8005ada <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d105      	bne.n	8005a94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a88:	893b      	ldrh	r3, [r7, #8]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	611a      	str	r2, [r3, #16]
 8005a92:	e021      	b.n	8005ad8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a94:	893b      	ldrh	r3, [r7, #8]
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa4:	6a39      	ldr	r1, [r7, #32]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f8f4 	bl	8005c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d107      	bne.n	8005aca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e005      	b.n	8005ada <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ace:	893b      	ldrh	r3, [r7, #8]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	00010002 	.word	0x00010002

08005ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005af8:	e025      	b.n	8005b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b00:	d021      	beq.n	8005b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b02:	f7fe f8fb 	bl	8003cfc <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d302      	bcc.n	8005b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d116      	bne.n	8005b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f043 0220 	orr.w	r2, r3, #32
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e023      	b.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10d      	bne.n	8005b6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	43da      	mvns	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	e00c      	b.n	8005b86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	43da      	mvns	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4013      	ands	r3, r2
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d0b6      	beq.n	8005afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ba4:	e051      	b.n	8005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb4:	d123      	bne.n	8005bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f043 0204 	orr.w	r2, r3, #4
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e046      	b.n	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d021      	beq.n	8005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c06:	f7fe f879 	bl	8003cfc <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d302      	bcc.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d116      	bne.n	8005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f043 0220 	orr.w	r2, r3, #32
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e020      	b.n	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d10c      	bne.n	8005c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	43da      	mvns	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bf14      	ite	ne
 8005c66:	2301      	movne	r3, #1
 8005c68:	2300      	moveq	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	e00b      	b.n	8005c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	43da      	mvns	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bf14      	ite	ne
 8005c80:	2301      	movne	r3, #1
 8005c82:	2300      	moveq	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d18d      	bne.n	8005ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ca0:	e02d      	b.n	8005cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f8ce 	bl	8005e44 <I2C_IsAcknowledgeFailed>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e02d      	b.n	8005d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d021      	beq.n	8005cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cba:	f7fe f81f 	bl	8003cfc <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d116      	bne.n	8005cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f043 0220 	orr.w	r2, r3, #32
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e007      	b.n	8005d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d1ca      	bne.n	8005ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d22:	e02d      	b.n	8005d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f88d 	bl	8005e44 <I2C_IsAcknowledgeFailed>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e02d      	b.n	8005d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d021      	beq.n	8005d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3c:	f7fd ffde 	bl	8003cfc <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d302      	bcc.n	8005d52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d116      	bne.n	8005d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	f043 0220 	orr.w	r2, r3, #32
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e007      	b.n	8005d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d1ca      	bne.n	8005d24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005da4:	e042      	b.n	8005e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d119      	bne.n	8005de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0210 	mvn.w	r2, #16
 8005dbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e029      	b.n	8005e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de8:	f7fd ff88 	bl	8003cfc <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d302      	bcc.n	8005dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d116      	bne.n	8005e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e18:	f043 0220 	orr.w	r2, r3, #32
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e007      	b.n	8005e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d1b5      	bne.n	8005da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5a:	d11b      	bne.n	8005e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	f043 0204 	orr.w	r2, r3, #4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e267      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d075      	beq.n	8005fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ec2:	4b88      	ldr	r3, [pc, #544]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d00c      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ece:	4b85      	ldr	r3, [pc, #532]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d112      	bne.n	8005f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eda:	4b82      	ldr	r3, [pc, #520]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee6:	d10b      	bne.n	8005f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee8:	4b7e      	ldr	r3, [pc, #504]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d05b      	beq.n	8005fac <HAL_RCC_OscConfig+0x108>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d157      	bne.n	8005fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e242      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f08:	d106      	bne.n	8005f18 <HAL_RCC_OscConfig+0x74>
 8005f0a:	4b76      	ldr	r3, [pc, #472]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a75      	ldr	r2, [pc, #468]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	e01d      	b.n	8005f54 <HAL_RCC_OscConfig+0xb0>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x98>
 8005f22:	4b70      	ldr	r3, [pc, #448]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6f      	ldr	r2, [pc, #444]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	4b6d      	ldr	r3, [pc, #436]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a6c      	ldr	r2, [pc, #432]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e00b      	b.n	8005f54 <HAL_RCC_OscConfig+0xb0>
 8005f3c:	4b69      	ldr	r3, [pc, #420]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a68      	ldr	r2, [pc, #416]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	4b66      	ldr	r3, [pc, #408]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a65      	ldr	r2, [pc, #404]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d013      	beq.n	8005f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5c:	f7fd fece 	bl	8003cfc <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f64:	f7fd feca 	bl	8003cfc <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	; 0x64
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e207      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f76:	4b5b      	ldr	r3, [pc, #364]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0xc0>
 8005f82:	e014      	b.n	8005fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f84:	f7fd feba 	bl	8003cfc <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f8c:	f7fd feb6 	bl	8003cfc <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b64      	cmp	r3, #100	; 0x64
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e1f3      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f9e:	4b51      	ldr	r3, [pc, #324]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0xe8>
 8005faa:	e000      	b.n	8005fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d063      	beq.n	8006082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fba:	4b4a      	ldr	r3, [pc, #296]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fc6:	4b47      	ldr	r3, [pc, #284]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d11c      	bne.n	800600c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fd2:	4b44      	ldr	r3, [pc, #272]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d116      	bne.n	800600c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fde:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x152>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d001      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e1c7      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff6:	4b3b      	ldr	r3, [pc, #236]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4937      	ldr	r1, [pc, #220]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006006:	4313      	orrs	r3, r2
 8006008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800600a:	e03a      	b.n	8006082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d020      	beq.n	8006056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006014:	4b34      	ldr	r3, [pc, #208]	; (80060e8 <HAL_RCC_OscConfig+0x244>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601a:	f7fd fe6f 	bl	8003cfc <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006022:	f7fd fe6b 	bl	8003cfc <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e1a8      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006034:	4b2b      	ldr	r3, [pc, #172]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006040:	4b28      	ldr	r3, [pc, #160]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	4925      	ldr	r1, [pc, #148]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006050:	4313      	orrs	r3, r2
 8006052:	600b      	str	r3, [r1, #0]
 8006054:	e015      	b.n	8006082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006056:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <HAL_RCC_OscConfig+0x244>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fd fe4e 	bl	8003cfc <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006064:	f7fd fe4a 	bl	8003cfc <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e187      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006076:	4b1b      	ldr	r3, [pc, #108]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d036      	beq.n	80060fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d016      	beq.n	80060c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006096:	4b15      	ldr	r3, [pc, #84]	; (80060ec <HAL_RCC_OscConfig+0x248>)
 8006098:	2201      	movs	r2, #1
 800609a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609c:	f7fd fe2e 	bl	8003cfc <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a4:	f7fd fe2a 	bl	8003cfc <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e167      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 80060b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0x200>
 80060c2:	e01b      	b.n	80060fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <HAL_RCC_OscConfig+0x248>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ca:	f7fd fe17 	bl	8003cfc <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d0:	e00e      	b.n	80060f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060d2:	f7fd fe13 	bl	8003cfc <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d907      	bls.n	80060f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e150      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
 80060e4:	40023800 	.word	0x40023800
 80060e8:	42470000 	.word	0x42470000
 80060ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060f0:	4b88      	ldr	r3, [pc, #544]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80060f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1ea      	bne.n	80060d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 8097 	beq.w	8006238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800610a:	2300      	movs	r3, #0
 800610c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800610e:	4b81      	ldr	r3, [pc, #516]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	4b7d      	ldr	r3, [pc, #500]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	4a7c      	ldr	r2, [pc, #496]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006128:	6413      	str	r3, [r2, #64]	; 0x40
 800612a:	4b7a      	ldr	r3, [pc, #488]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006136:	2301      	movs	r3, #1
 8006138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800613a:	4b77      	ldr	r3, [pc, #476]	; (8006318 <HAL_RCC_OscConfig+0x474>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006142:	2b00      	cmp	r3, #0
 8006144:	d118      	bne.n	8006178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006146:	4b74      	ldr	r3, [pc, #464]	; (8006318 <HAL_RCC_OscConfig+0x474>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a73      	ldr	r2, [pc, #460]	; (8006318 <HAL_RCC_OscConfig+0x474>)
 800614c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006152:	f7fd fdd3 	bl	8003cfc <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800615a:	f7fd fdcf 	bl	8003cfc <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e10c      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616c:	4b6a      	ldr	r3, [pc, #424]	; (8006318 <HAL_RCC_OscConfig+0x474>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d106      	bne.n	800618e <HAL_RCC_OscConfig+0x2ea>
 8006180:	4b64      	ldr	r3, [pc, #400]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006184:	4a63      	ldr	r2, [pc, #396]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	6713      	str	r3, [r2, #112]	; 0x70
 800618c:	e01c      	b.n	80061c8 <HAL_RCC_OscConfig+0x324>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2b05      	cmp	r3, #5
 8006194:	d10c      	bne.n	80061b0 <HAL_RCC_OscConfig+0x30c>
 8006196:	4b5f      	ldr	r3, [pc, #380]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	4a5e      	ldr	r2, [pc, #376]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 800619c:	f043 0304 	orr.w	r3, r3, #4
 80061a0:	6713      	str	r3, [r2, #112]	; 0x70
 80061a2:	4b5c      	ldr	r3, [pc, #368]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	4a5b      	ldr	r2, [pc, #364]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	6713      	str	r3, [r2, #112]	; 0x70
 80061ae:	e00b      	b.n	80061c8 <HAL_RCC_OscConfig+0x324>
 80061b0:	4b58      	ldr	r3, [pc, #352]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b4:	4a57      	ldr	r2, [pc, #348]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	6713      	str	r3, [r2, #112]	; 0x70
 80061bc:	4b55      	ldr	r3, [pc, #340]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c0:	4a54      	ldr	r2, [pc, #336]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061c2:	f023 0304 	bic.w	r3, r3, #4
 80061c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d015      	beq.n	80061fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d0:	f7fd fd94 	bl	8003cfc <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d6:	e00a      	b.n	80061ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d8:	f7fd fd90 	bl	8003cfc <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e0cb      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ee:	4b49      	ldr	r3, [pc, #292]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0ee      	beq.n	80061d8 <HAL_RCC_OscConfig+0x334>
 80061fa:	e014      	b.n	8006226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fc:	f7fd fd7e 	bl	8003cfc <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006202:	e00a      	b.n	800621a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006204:	f7fd fd7a 	bl	8003cfc <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006212:	4293      	cmp	r3, r2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e0b5      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800621a:	4b3e      	ldr	r3, [pc, #248]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1ee      	bne.n	8006204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d105      	bne.n	8006238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800622c:	4b39      	ldr	r3, [pc, #228]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	4a38      	ldr	r2, [pc, #224]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006236:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80a1 	beq.w	8006384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006242:	4b34      	ldr	r3, [pc, #208]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 030c 	and.w	r3, r3, #12
 800624a:	2b08      	cmp	r3, #8
 800624c:	d05c      	beq.n	8006308 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d141      	bne.n	80062da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006256:	4b31      	ldr	r3, [pc, #196]	; (800631c <HAL_RCC_OscConfig+0x478>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625c:	f7fd fd4e 	bl	8003cfc <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006264:	f7fd fd4a 	bl	8003cfc <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e087      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006276:	4b27      	ldr	r3, [pc, #156]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f0      	bne.n	8006264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69da      	ldr	r2, [r3, #28]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	019b      	lsls	r3, r3, #6
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	3b01      	subs	r3, #1
 800629c:	041b      	lsls	r3, r3, #16
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	061b      	lsls	r3, r3, #24
 80062a6:	491b      	ldr	r1, [pc, #108]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <HAL_RCC_OscConfig+0x478>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b2:	f7fd fd23 	bl	8003cfc <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ba:	f7fd fd1f 	bl	8003cfc <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e05c      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062cc:	4b11      	ldr	r3, [pc, #68]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f0      	beq.n	80062ba <HAL_RCC_OscConfig+0x416>
 80062d8:	e054      	b.n	8006384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062da:	4b10      	ldr	r3, [pc, #64]	; (800631c <HAL_RCC_OscConfig+0x478>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7fd fd0c 	bl	8003cfc <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062e8:	f7fd fd08 	bl	8003cfc <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e045      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0x444>
 8006306:	e03d      	b.n	8006384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d107      	bne.n	8006320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e038      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
 8006314:	40023800 	.word	0x40023800
 8006318:	40007000 	.word	0x40007000
 800631c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006320:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <HAL_RCC_OscConfig+0x4ec>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d028      	beq.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006338:	429a      	cmp	r2, r3
 800633a:	d121      	bne.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006346:	429a      	cmp	r2, r3
 8006348:	d11a      	bne.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006350:	4013      	ands	r3, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006358:	4293      	cmp	r3, r2
 800635a:	d111      	bne.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	3b01      	subs	r3, #1
 800636a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800636c:	429a      	cmp	r2, r3
 800636e:	d107      	bne.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800637c:	429a      	cmp	r2, r3
 800637e:	d001      	beq.n	8006384 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40023800 	.word	0x40023800

08006394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0cc      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063a8:	4b68      	ldr	r3, [pc, #416]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d90c      	bls.n	80063d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b6:	4b65      	ldr	r3, [pc, #404]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063be:	4b63      	ldr	r3, [pc, #396]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0b8      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d020      	beq.n	800641e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e8:	4b59      	ldr	r3, [pc, #356]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	4a58      	ldr	r2, [pc, #352]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80063ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006400:	4b53      	ldr	r3, [pc, #332]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4a52      	ldr	r2, [pc, #328]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800640a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800640c:	4b50      	ldr	r3, [pc, #320]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	494d      	ldr	r1, [pc, #308]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 800641a:	4313      	orrs	r3, r2
 800641c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d044      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d107      	bne.n	8006442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006432:	4b47      	ldr	r3, [pc, #284]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d119      	bne.n	8006472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e07f      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d003      	beq.n	8006452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800644e:	2b03      	cmp	r3, #3
 8006450:	d107      	bne.n	8006462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006452:	4b3f      	ldr	r3, [pc, #252]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e06f      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006462:	4b3b      	ldr	r3, [pc, #236]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e067      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006472:	4b37      	ldr	r3, [pc, #220]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f023 0203 	bic.w	r2, r3, #3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4934      	ldr	r1, [pc, #208]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	4313      	orrs	r3, r2
 8006482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006484:	f7fd fc3a 	bl	8003cfc <HAL_GetTick>
 8006488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800648a:	e00a      	b.n	80064a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800648c:	f7fd fc36 	bl	8003cfc <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f241 3288 	movw	r2, #5000	; 0x1388
 800649a:	4293      	cmp	r3, r2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e04f      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064a2:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 020c 	and.w	r2, r3, #12
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d1eb      	bne.n	800648c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064b4:	4b25      	ldr	r3, [pc, #148]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d20c      	bcs.n	80064dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ca:	4b20      	ldr	r3, [pc, #128]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e032      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4916      	ldr	r1, [pc, #88]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	490e      	ldr	r1, [pc, #56]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	4313      	orrs	r3, r2
 8006518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800651a:	f000 f821 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 800651e:	4602      	mov	r2, r0
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	490a      	ldr	r1, [pc, #40]	; (8006554 <HAL_RCC_ClockConfig+0x1c0>)
 800652c:	5ccb      	ldrb	r3, [r1, r3]
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <HAL_RCC_ClockConfig+0x1c4>)
 8006534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <HAL_RCC_ClockConfig+0x1c8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7fd fb9a 	bl	8003c74 <HAL_InitTick>

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40023c00 	.word	0x40023c00
 8006550:	40023800 	.word	0x40023800
 8006554:	0800fc18 	.word	0x0800fc18
 8006558:	20000070 	.word	0x20000070
 800655c:	20000074 	.word	0x20000074

08006560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006564:	b090      	sub	sp, #64	; 0x40
 8006566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	637b      	str	r3, [r7, #52]	; 0x34
 800656c:	2300      	movs	r3, #0
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006570:	2300      	movs	r3, #0
 8006572:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006578:	4b59      	ldr	r3, [pc, #356]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	2b08      	cmp	r3, #8
 8006582:	d00d      	beq.n	80065a0 <HAL_RCC_GetSysClockFreq+0x40>
 8006584:	2b08      	cmp	r3, #8
 8006586:	f200 80a1 	bhi.w	80066cc <HAL_RCC_GetSysClockFreq+0x16c>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_RCC_GetSysClockFreq+0x34>
 800658e:	2b04      	cmp	r3, #4
 8006590:	d003      	beq.n	800659a <HAL_RCC_GetSysClockFreq+0x3a>
 8006592:	e09b      	b.n	80066cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006594:	4b53      	ldr	r3, [pc, #332]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006598:	e09b      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800659a:	4b53      	ldr	r3, [pc, #332]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800659c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800659e:	e098      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065a0:	4b4f      	ldr	r3, [pc, #316]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065aa:	4b4d      	ldr	r3, [pc, #308]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d028      	beq.n	8006608 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b6:	4b4a      	ldr	r3, [pc, #296]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	099b      	lsrs	r3, r3, #6
 80065bc:	2200      	movs	r2, #0
 80065be:	623b      	str	r3, [r7, #32]
 80065c0:	627a      	str	r2, [r7, #36]	; 0x24
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80065c8:	2100      	movs	r1, #0
 80065ca:	4b47      	ldr	r3, [pc, #284]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80065cc:	fb03 f201 	mul.w	r2, r3, r1
 80065d0:	2300      	movs	r3, #0
 80065d2:	fb00 f303 	mul.w	r3, r0, r3
 80065d6:	4413      	add	r3, r2
 80065d8:	4a43      	ldr	r2, [pc, #268]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80065da:	fba0 1202 	umull	r1, r2, r0, r2
 80065de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065e0:	460a      	mov	r2, r1
 80065e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80065e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e6:	4413      	add	r3, r2
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ec:	2200      	movs	r2, #0
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	61fa      	str	r2, [r7, #28]
 80065f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80065fa:	f7fa fb4d 	bl	8000c98 <__aeabi_uldivmod>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4613      	mov	r3, r2
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006606:	e053      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006608:	4b35      	ldr	r3, [pc, #212]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	099b      	lsrs	r3, r3, #6
 800660e:	2200      	movs	r2, #0
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	617a      	str	r2, [r7, #20]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800661a:	f04f 0b00 	mov.w	fp, #0
 800661e:	4652      	mov	r2, sl
 8006620:	465b      	mov	r3, fp
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f04f 0100 	mov.w	r1, #0
 800662a:	0159      	lsls	r1, r3, #5
 800662c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006630:	0150      	lsls	r0, r2, #5
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	ebb2 080a 	subs.w	r8, r2, sl
 800663a:	eb63 090b 	sbc.w	r9, r3, fp
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800664a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800664e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006652:	ebb2 0408 	subs.w	r4, r2, r8
 8006656:	eb63 0509 	sbc.w	r5, r3, r9
 800665a:	f04f 0200 	mov.w	r2, #0
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	00eb      	lsls	r3, r5, #3
 8006664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006668:	00e2      	lsls	r2, r4, #3
 800666a:	4614      	mov	r4, r2
 800666c:	461d      	mov	r5, r3
 800666e:	eb14 030a 	adds.w	r3, r4, sl
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	eb45 030b 	adc.w	r3, r5, fp
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006686:	4629      	mov	r1, r5
 8006688:	028b      	lsls	r3, r1, #10
 800668a:	4621      	mov	r1, r4
 800668c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006690:	4621      	mov	r1, r4
 8006692:	028a      	lsls	r2, r1, #10
 8006694:	4610      	mov	r0, r2
 8006696:	4619      	mov	r1, r3
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	2200      	movs	r2, #0
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	60fa      	str	r2, [r7, #12]
 80066a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066a4:	f7fa faf8 	bl	8000c98 <__aeabi_uldivmod>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4613      	mov	r3, r2
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066b0:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	0c1b      	lsrs	r3, r3, #16
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	3301      	adds	r3, #1
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80066c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066ca:	e002      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80066ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3740      	adds	r7, #64	; 0x40
 80066d8:	46bd      	mov	sp, r7
 80066da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800
 80066e4:	00f42400 	.word	0x00f42400
 80066e8:	017d7840 	.word	0x017d7840

080066ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <HAL_RCC_GetHCLKFreq+0x14>)
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000070 	.word	0x20000070

08006704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006708:	f7ff fff0 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 800670c:	4602      	mov	r2, r0
 800670e:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	0a9b      	lsrs	r3, r3, #10
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	4903      	ldr	r1, [pc, #12]	; (8006728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800671a:	5ccb      	ldrb	r3, [r1, r3]
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006720:	4618      	mov	r0, r3
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40023800 	.word	0x40023800
 8006728:	0800fc28 	.word	0x0800fc28

0800672c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006730:	f7ff ffdc 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8006734:	4602      	mov	r2, r0
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	0b5b      	lsrs	r3, r3, #13
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	4903      	ldr	r1, [pc, #12]	; (8006750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006742:	5ccb      	ldrb	r3, [r1, r3]
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006748:	4618      	mov	r0, r3
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40023800 	.word	0x40023800
 8006750:	0800fc28 	.word	0x0800fc28

08006754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e07b      	b.n	800685e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d108      	bne.n	8006780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006776:	d009      	beq.n	800678c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	61da      	str	r2, [r3, #28]
 800677e:	e005      	b.n	800678c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fd f814 	bl	80037d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	ea42 0103 	orr.w	r1, r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	f003 0104 	and.w	r1, r3, #4
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	f003 0210 	and.w	r2, r3, #16
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800684c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_SPI_TransmitReceive_IT+0x20>
 8006884:	2302      	movs	r3, #2
 8006886:	e075      	b.n	8006974 <HAL_SPI_TransmitReceive_IT+0x10c>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006896:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800689e:	7dbb      	ldrb	r3, [r7, #22]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d00d      	beq.n	80068c0 <HAL_SPI_TransmitReceive_IT+0x58>
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068aa:	d106      	bne.n	80068ba <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <HAL_SPI_TransmitReceive_IT+0x52>
 80068b4:	7dbb      	ldrb	r3, [r7, #22]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d002      	beq.n	80068c0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80068ba:	2302      	movs	r3, #2
 80068bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068be:	e054      	b.n	800696a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80068cc:	887b      	ldrh	r3, [r7, #2]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d102      	bne.n	80068d8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068d6:	e048      	b.n	800696a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d003      	beq.n	80068ec <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2205      	movs	r2, #5
 80068e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	887a      	ldrh	r2, [r7, #2]
 80068fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	887a      	ldrh	r2, [r7, #2]
 8006902:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	887a      	ldrh	r2, [r7, #2]
 800690e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	887a      	ldrh	r2, [r7, #2]
 8006914:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a17      	ldr	r2, [pc, #92]	; (8006980 <HAL_SPI_TransmitReceive_IT+0x118>)
 8006922:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4a17      	ldr	r2, [pc, #92]	; (8006984 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8006928:	645a      	str	r2, [r3, #68]	; 0x44
 800692a:	e005      	b.n	8006938 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4a16      	ldr	r2, [pc, #88]	; (8006988 <HAL_SPI_TransmitReceive_IT+0x120>)
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4a15      	ldr	r2, [pc, #84]	; (800698c <HAL_SPI_TransmitReceive_IT+0x124>)
 8006936:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006946:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006952:	2b40      	cmp	r3, #64	; 0x40
 8006954:	d008      	beq.n	8006968 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	e000      	b.n	800696a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8006968:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
}
 8006974:	4618      	mov	r0, r3
 8006976:	371c      	adds	r7, #28
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	08006ca5 	.word	0x08006ca5
 8006984:	08006d05 	.word	0x08006d05
 8006988:	08006be1 	.word	0x08006be1
 800698c:	08006c45 	.word	0x08006c45

08006990 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	099b      	lsrs	r3, r3, #6
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10f      	bne.n	80069d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	099b      	lsrs	r3, r3, #6
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
    return;
 80069d2:	e0d7      	b.n	8006b84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <HAL_SPI_IRQHandler+0x66>
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	09db      	lsrs	r3, r3, #7
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
    return;
 80069f4:	e0c6      	b.n	8006b84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10c      	bne.n	8006a1c <HAL_SPI_IRQHandler+0x8c>
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	099b      	lsrs	r3, r3, #6
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	0a1b      	lsrs	r3, r3, #8
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 80b4 	beq.w	8006b84 <HAL_SPI_IRQHandler+0x1f4>
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80ad 	beq.w	8006b84 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	099b      	lsrs	r3, r3, #6
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d023      	beq.n	8006a7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d011      	beq.n	8006a66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	f043 0204 	orr.w	r2, r3, #4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	e00b      	b.n	8006a7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a66:	2300      	movs	r3, #0
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	613b      	str	r3, [r7, #16]
 8006a7a:	693b      	ldr	r3, [r7, #16]
        return;
 8006a7c:	e082      	b.n	8006b84 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d014      	beq.n	8006ab4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	f043 0201 	orr.w	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00c      	beq.n	8006ada <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac4:	f043 0208 	orr.w	r2, r3, #8
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006acc:	2300      	movs	r3, #0
 8006ace:	60bb      	str	r3, [r7, #8]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	60bb      	str	r3, [r7, #8]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d04f      	beq.n	8006b82 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006af0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <HAL_SPI_IRQHandler+0x17e>
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d034      	beq.n	8006b78 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0203 	bic.w	r2, r2, #3
 8006b1c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d011      	beq.n	8006b4a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	4a18      	ldr	r2, [pc, #96]	; (8006b8c <HAL_SPI_IRQHandler+0x1fc>)
 8006b2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fd fe85 	bl	8004842 <HAL_DMA_Abort_IT>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d016      	beq.n	8006b80 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b56:	4a0d      	ldr	r2, [pc, #52]	; (8006b8c <HAL_SPI_IRQHandler+0x1fc>)
 8006b58:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fd fe6f 	bl	8004842 <HAL_DMA_Abort_IT>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006b76:	e003      	b.n	8006b80 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f813 	bl	8006ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006b7e:	e000      	b.n	8006b82 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006b80:	bf00      	nop
    return;
 8006b82:	bf00      	nop
  }
}
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	08006bb9 	.word	0x08006bb9

08006b90 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff ffe6 	bl	8006ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f103 020c 	add.w	r2, r3, #12
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	7812      	ldrb	r2, [r2, #0]
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10f      	bne.n	8006c3c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c2a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f95e 	bl	8006ef8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330c      	adds	r3, #12
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10f      	bne.n	8006c9c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c8a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f92e 	bl	8006ef8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	1c9a      	adds	r2, r3, #2
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10f      	bne.n	8006cfc <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f8fe 	bl	8006ef8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	881a      	ldrh	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	1c9a      	adds	r2, r3, #2
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10f      	bne.n	8006d5a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d48:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d102      	bne.n	8006d5a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f8cf 	bl	8006ef8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	4613      	mov	r3, r2
 8006d72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d74:	f7fc ffc2 	bl	8003cfc <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	4413      	add	r3, r2
 8006d82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d84:	f7fc ffba 	bl	8003cfc <HAL_GetTick>
 8006d88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d8a:	4b39      	ldr	r3, [pc, #228]	; (8006e70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	015b      	lsls	r3, r3, #5
 8006d90:	0d1b      	lsrs	r3, r3, #20
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	fb02 f303 	mul.w	r3, r2, r3
 8006d98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d9a:	e054      	b.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d050      	beq.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006da4:	f7fc ffaa 	bl	8003cfc <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d902      	bls.n	8006dba <SPI_WaitFlagStateUntilTimeout+0x56>
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d13d      	bne.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd2:	d111      	bne.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ddc:	d004      	beq.n	8006de8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de6:	d107      	bne.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e00:	d10f      	bne.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e017      	b.n	8006e66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	bf0c      	ite	eq
 8006e56:	2301      	moveq	r3, #1
 8006e58:	2300      	movne	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d19b      	bne.n	8006d9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000070 	.word	0x20000070

08006e74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e80:	4b1b      	ldr	r3, [pc, #108]	; (8006ef0 <SPI_EndRxTxTransaction+0x7c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <SPI_EndRxTxTransaction+0x80>)
 8006e86:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8a:	0d5b      	lsrs	r3, r3, #21
 8006e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
 8006e94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e9e:	d112      	bne.n	8006ec6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2180      	movs	r1, #128	; 0x80
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7ff ff5a 	bl	8006d64 <SPI_WaitFlagStateUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d016      	beq.n	8006ee4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	f043 0220 	orr.w	r2, r3, #32
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e00f      	b.n	8006ee6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006edc:	2b80      	cmp	r3, #128	; 0x80
 8006ede:	d0f2      	beq.n	8006ec6 <SPI_EndRxTxTransaction+0x52>
 8006ee0:	e000      	b.n	8006ee4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ee2:	bf00      	nop
  }

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000070 	.word	0x20000070
 8006ef4:	165e9f81 	.word	0x165e9f81

08006ef8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006f00:	4b35      	ldr	r3, [pc, #212]	; (8006fd8 <SPI_CloseRxTx_ISR+0xe0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a35      	ldr	r2, [pc, #212]	; (8006fdc <SPI_CloseRxTx_ISR+0xe4>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	0a5b      	lsrs	r3, r3, #9
 8006f0c:	2264      	movs	r2, #100	; 0x64
 8006f0e:	fb02 f303 	mul.w	r3, r2, r3
 8006f12:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f14:	f7fc fef2 	bl	8003cfc <HAL_GetTick>
 8006f18:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0220 	bic.w	r2, r2, #32
 8006f28:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f3c:	e009      	b.n	8006f52 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0eb      	beq.n	8006f2a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	2164      	movs	r1, #100	; 0x64
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff ff8c 	bl	8006e74 <SPI_EndRxTxTransaction>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f66:	f043 0220 	orr.w	r2, r3, #32
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d115      	bne.n	8006fc0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d107      	bne.n	8006fb0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff fdf1 	bl	8006b90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006fae:	e00e      	b.n	8006fce <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7fc f8d7 	bl	800316c <HAL_SPI_TxRxCpltCallback>
}
 8006fbe:	e006      	b.n	8006fce <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff fdeb 	bl	8006ba4 <HAL_SPI_ErrorCallback>
}
 8006fce:	bf00      	nop
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000070 	.word	0x20000070
 8006fdc:	057619f1 	.word	0x057619f1

08006fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e041      	b.n	8007076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fc fc34 	bl	8003874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3304      	adds	r3, #4
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f000 fb0a 	bl	8007638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d001      	beq.n	8007098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e03c      	b.n	8007112 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <HAL_TIM_Base_Start+0xa0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d018      	beq.n	80070dc <HAL_TIM_Base_Start+0x5c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b2:	d013      	beq.n	80070dc <HAL_TIM_Base_Start+0x5c>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <HAL_TIM_Base_Start+0xa4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00e      	beq.n	80070dc <HAL_TIM_Base_Start+0x5c>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a19      	ldr	r2, [pc, #100]	; (8007128 <HAL_TIM_Base_Start+0xa8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d009      	beq.n	80070dc <HAL_TIM_Base_Start+0x5c>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a17      	ldr	r2, [pc, #92]	; (800712c <HAL_TIM_Base_Start+0xac>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d004      	beq.n	80070dc <HAL_TIM_Base_Start+0x5c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a16      	ldr	r2, [pc, #88]	; (8007130 <HAL_TIM_Base_Start+0xb0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d111      	bne.n	8007100 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b06      	cmp	r3, #6
 80070ec:	d010      	beq.n	8007110 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f042 0201 	orr.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fe:	e007      	b.n	8007110 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40010000 	.word	0x40010000
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40000c00 	.word	0x40000c00
 8007130:	40014000 	.word	0x40014000

08007134 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	f241 1311 	movw	r3, #4369	; 0x1111
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10f      	bne.n	800716c <HAL_TIM_Base_Stop+0x38>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	f240 4344 	movw	r3, #1092	; 0x444
 8007156:	4013      	ands	r3, r2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d107      	bne.n	800716c <HAL_TIM_Base_Stop+0x38>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d001      	beq.n	800719c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e044      	b.n	8007226 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <HAL_TIM_Base_Start_IT+0xb0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d018      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c6:	d013      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1a      	ldr	r2, [pc, #104]	; (8007238 <HAL_TIM_Base_Start_IT+0xb4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00e      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a19      	ldr	r2, [pc, #100]	; (800723c <HAL_TIM_Base_Start_IT+0xb8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d009      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a17      	ldr	r2, [pc, #92]	; (8007240 <HAL_TIM_Base_Start_IT+0xbc>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d004      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a16      	ldr	r2, [pc, #88]	; (8007244 <HAL_TIM_Base_Start_IT+0xc0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d111      	bne.n	8007214 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b06      	cmp	r3, #6
 8007200:	d010      	beq.n	8007224 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0201 	orr.w	r2, r2, #1
 8007210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007212:	e007      	b.n	8007224 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0201 	orr.w	r2, r2, #1
 8007222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40010000 	.word	0x40010000
 8007238:	40000400 	.word	0x40000400
 800723c:	40000800 	.word	0x40000800
 8007240:	40000c00 	.word	0x40000c00
 8007244:	40014000 	.word	0x40014000

08007248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b02      	cmp	r3, #2
 800725c:	d122      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b02      	cmp	r3, #2
 800726a:	d11b      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0202 	mvn.w	r2, #2
 8007274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f9b5 	bl	80075fa <HAL_TIM_IC_CaptureCallback>
 8007290:	e005      	b.n	800729e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f9a7 	bl	80075e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f9b8 	bl	800760e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d122      	bne.n	80072f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d11b      	bne.n	80072f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0204 	mvn.w	r2, #4
 80072c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f98b 	bl	80075fa <HAL_TIM_IC_CaptureCallback>
 80072e4:	e005      	b.n	80072f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f97d 	bl	80075e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f98e 	bl	800760e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b08      	cmp	r3, #8
 8007304:	d122      	bne.n	800734c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d11b      	bne.n	800734c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0208 	mvn.w	r2, #8
 800731c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2204      	movs	r2, #4
 8007322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f961 	bl	80075fa <HAL_TIM_IC_CaptureCallback>
 8007338:	e005      	b.n	8007346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f953 	bl	80075e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f964 	bl	800760e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b10      	cmp	r3, #16
 8007358:	d122      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b10      	cmp	r3, #16
 8007366:	d11b      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0210 	mvn.w	r2, #16
 8007370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2208      	movs	r2, #8
 8007376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f937 	bl	80075fa <HAL_TIM_IC_CaptureCallback>
 800738c:	e005      	b.n	800739a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f929 	bl	80075e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f93a 	bl	800760e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d10e      	bne.n	80073cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d107      	bne.n	80073cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0201 	mvn.w	r2, #1
 80073c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fb fe50 	bl	800306c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d6:	2b80      	cmp	r3, #128	; 0x80
 80073d8:	d10e      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d107      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fab2 	bl	800795c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d10e      	bne.n	8007424 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007410:	2b40      	cmp	r3, #64	; 0x40
 8007412:	d107      	bne.n	8007424 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800741c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f8ff 	bl	8007622 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b20      	cmp	r3, #32
 8007430:	d10e      	bne.n	8007450 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b20      	cmp	r3, #32
 800743e:	d107      	bne.n	8007450 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0220 	mvn.w	r2, #32
 8007448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa7c 	bl	8007948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIM_ConfigClockSource+0x1c>
 8007470:	2302      	movs	r3, #2
 8007472:	e0b4      	b.n	80075de <HAL_TIM_ConfigClockSource+0x186>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800749a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ac:	d03e      	beq.n	800752c <HAL_TIM_ConfigClockSource+0xd4>
 80074ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b2:	f200 8087 	bhi.w	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ba:	f000 8086 	beq.w	80075ca <HAL_TIM_ConfigClockSource+0x172>
 80074be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c2:	d87f      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074c4:	2b70      	cmp	r3, #112	; 0x70
 80074c6:	d01a      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0xa6>
 80074c8:	2b70      	cmp	r3, #112	; 0x70
 80074ca:	d87b      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074cc:	2b60      	cmp	r3, #96	; 0x60
 80074ce:	d050      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x11a>
 80074d0:	2b60      	cmp	r3, #96	; 0x60
 80074d2:	d877      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074d4:	2b50      	cmp	r3, #80	; 0x50
 80074d6:	d03c      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0xfa>
 80074d8:	2b50      	cmp	r3, #80	; 0x50
 80074da:	d873      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074dc:	2b40      	cmp	r3, #64	; 0x40
 80074de:	d058      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x13a>
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d86f      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074e4:	2b30      	cmp	r3, #48	; 0x30
 80074e6:	d064      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x15a>
 80074e8:	2b30      	cmp	r3, #48	; 0x30
 80074ea:	d86b      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d060      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x15a>
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d867      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d05c      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x15a>
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	d05a      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x15a>
 80074fc:	e062      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	6899      	ldr	r1, [r3, #8]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f000 f98d 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	609a      	str	r2, [r3, #8]
      break;
 800752a:	e04f      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	6899      	ldr	r1, [r3, #8]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f000 f976 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800754e:	609a      	str	r2, [r3, #8]
      break;
 8007550:	e03c      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6859      	ldr	r1, [r3, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	461a      	mov	r2, r3
 8007560:	f000 f8ea 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2150      	movs	r1, #80	; 0x50
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f943 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8007570:	e02c      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	461a      	mov	r2, r3
 8007580:	f000 f909 	bl	8007796 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2160      	movs	r1, #96	; 0x60
 800758a:	4618      	mov	r0, r3
 800758c:	f000 f933 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8007590:	e01c      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	6859      	ldr	r1, [r3, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	461a      	mov	r2, r3
 80075a0:	f000 f8ca 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2140      	movs	r1, #64	; 0x40
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f923 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80075b0:	e00c      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f000 f91a 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80075c2:	e003      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
      break;
 80075c8:	e000      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a34      	ldr	r2, [pc, #208]	; (800771c <TIM_Base_SetConfig+0xe4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_Base_SetConfig+0x38>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007656:	d00b      	beq.n	8007670 <TIM_Base_SetConfig+0x38>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a31      	ldr	r2, [pc, #196]	; (8007720 <TIM_Base_SetConfig+0xe8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_Base_SetConfig+0x38>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a30      	ldr	r2, [pc, #192]	; (8007724 <TIM_Base_SetConfig+0xec>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_Base_SetConfig+0x38>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a2f      	ldr	r2, [pc, #188]	; (8007728 <TIM_Base_SetConfig+0xf0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d108      	bne.n	8007682 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a25      	ldr	r2, [pc, #148]	; (800771c <TIM_Base_SetConfig+0xe4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d01b      	beq.n	80076c2 <TIM_Base_SetConfig+0x8a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007690:	d017      	beq.n	80076c2 <TIM_Base_SetConfig+0x8a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a22      	ldr	r2, [pc, #136]	; (8007720 <TIM_Base_SetConfig+0xe8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d013      	beq.n	80076c2 <TIM_Base_SetConfig+0x8a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a21      	ldr	r2, [pc, #132]	; (8007724 <TIM_Base_SetConfig+0xec>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00f      	beq.n	80076c2 <TIM_Base_SetConfig+0x8a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a20      	ldr	r2, [pc, #128]	; (8007728 <TIM_Base_SetConfig+0xf0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00b      	beq.n	80076c2 <TIM_Base_SetConfig+0x8a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a1f      	ldr	r2, [pc, #124]	; (800772c <TIM_Base_SetConfig+0xf4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d007      	beq.n	80076c2 <TIM_Base_SetConfig+0x8a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a1e      	ldr	r2, [pc, #120]	; (8007730 <TIM_Base_SetConfig+0xf8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d003      	beq.n	80076c2 <TIM_Base_SetConfig+0x8a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <TIM_Base_SetConfig+0xfc>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d108      	bne.n	80076d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a08      	ldr	r2, [pc, #32]	; (800771c <TIM_Base_SetConfig+0xe4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d103      	bne.n	8007708 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	615a      	str	r2, [r3, #20]
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40010000 	.word	0x40010000
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40000c00 	.word	0x40000c00
 800772c:	40014000 	.word	0x40014000
 8007730:	40014400 	.word	0x40014400
 8007734:	40014800 	.word	0x40014800

08007738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 0201 	bic.w	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f023 030a 	bic.w	r3, r3, #10
 8007774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007796:	b480      	push	{r7}
 8007798:	b087      	sub	sp, #28
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0210 	bic.w	r2, r3, #16
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	031b      	lsls	r3, r3, #12
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	f043 0307 	orr.w	r3, r3, #7
 8007818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	021a      	lsls	r2, r3, #8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	431a      	orrs	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007880:	2302      	movs	r3, #2
 8007882:	e050      	b.n	8007926 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1c      	ldr	r2, [pc, #112]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d018      	beq.n	80078fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d0:	d013      	beq.n	80078fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a18      	ldr	r2, [pc, #96]	; (8007938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00e      	beq.n	80078fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a16      	ldr	r2, [pc, #88]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d009      	beq.n	80078fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a15      	ldr	r2, [pc, #84]	; (8007940 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d004      	beq.n	80078fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a13      	ldr	r2, [pc, #76]	; (8007944 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d10c      	bne.n	8007914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	4313      	orrs	r3, r2
 800790a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40010000 	.word	0x40010000
 8007938:	40000400 	.word	0x40000400
 800793c:	40000800 	.word	0x40000800
 8007940:	40000c00 	.word	0x40000c00
 8007944:	40014000 	.word	0x40014000

08007948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e03f      	b.n	8007a02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d106      	bne.n	800799c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7fb ffa8 	bl	80038ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2224      	movs	r2, #36	; 0x24
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fddf 	bl	8008578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	695a      	ldr	r2, [r3, #20]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b08a      	sub	sp, #40	; 0x28
 8007a0e:	af02      	add	r7, sp, #8
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	603b      	str	r3, [r7, #0]
 8007a16:	4613      	mov	r3, r2
 8007a18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d17c      	bne.n	8007b24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <HAL_UART_Transmit+0x2c>
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e075      	b.n	8007b26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_UART_Transmit+0x3e>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e06e      	b.n	8007b26 <HAL_UART_Transmit+0x11c>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2221      	movs	r2, #33	; 0x21
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a5e:	f7fc f94d 	bl	8003cfc <HAL_GetTick>
 8007a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	88fa      	ldrh	r2, [r7, #6]
 8007a68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	88fa      	ldrh	r2, [r7, #6]
 8007a6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a78:	d108      	bne.n	8007a8c <HAL_UART_Transmit+0x82>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	e003      	b.n	8007a94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a9c:	e02a      	b.n	8007af4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2180      	movs	r1, #128	; 0x80
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 fb1f 	bl	80080ec <UART_WaitOnFlagUntilTimeout>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e036      	b.n	8007b26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007acc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	e007      	b.n	8007ae6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	781a      	ldrb	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1cf      	bne.n	8007a9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2200      	movs	r2, #0
 8007b06:	2140      	movs	r1, #64	; 0x40
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 faef 	bl	80080ec <UART_WaitOnFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e006      	b.n	8007b26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e000      	b.n	8007b26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b24:	2302      	movs	r3, #2
  }
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d11d      	bne.n	8007b84 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <HAL_UART_Receive_IT+0x26>
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e016      	b.n	8007b86 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_UART_Receive_IT+0x38>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e00f      	b.n	8007b86 <HAL_UART_Receive_IT+0x58>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b74:	88fb      	ldrh	r3, [r7, #6]
 8007b76:	461a      	mov	r2, r3
 8007b78:	68b9      	ldr	r1, [r7, #8]
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fb24 	bl	80081c8 <UART_Start_Receive_IT>
 8007b80:	4603      	mov	r3, r0
 8007b82:	e000      	b.n	8007b86 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b84:	2302      	movs	r3, #2
  }
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b0ba      	sub	sp, #232	; 0xe8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10f      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x66>
 8007be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fc07 	bl	8008402 <UART_Receive_IT>
      return;
 8007bf4:	e256      	b.n	80080a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 80de 	beq.w	8007dbc <HAL_UART_IRQHandler+0x22c>
 8007c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80d1 	beq.w	8007dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <HAL_UART_IRQHandler+0xae>
 8007c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	f043 0201 	orr.w	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00b      	beq.n	8007c62 <HAL_UART_IRQHandler+0xd2>
 8007c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f043 0202 	orr.w	r2, r3, #2
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00b      	beq.n	8007c86 <HAL_UART_IRQHandler+0xf6>
 8007c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d005      	beq.n	8007c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	f043 0204 	orr.w	r2, r3, #4
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d011      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x126>
 8007c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f043 0208 	orr.w	r2, r3, #8
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 81ed 	beq.w	800809a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_UART_IRQHandler+0x14e>
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fb92 	bl	8008402 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce8:	2b40      	cmp	r3, #64	; 0x40
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <HAL_UART_IRQHandler+0x17a>
 8007d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d04f      	beq.n	8007daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa9a 	bl	8008244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1a:	2b40      	cmp	r3, #64	; 0x40
 8007d1c:	d141      	bne.n	8007da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3314      	adds	r3, #20
 8007d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3314      	adds	r3, #20
 8007d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1d9      	bne.n	8007d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d013      	beq.n	8007d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d76:	4a7d      	ldr	r2, [pc, #500]	; (8007f6c <HAL_UART_IRQHandler+0x3dc>)
 8007d78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fc fd5f 	bl	8004842 <HAL_DMA_Abort_IT>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d016      	beq.n	8007db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d94:	4610      	mov	r0, r2
 8007d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d98:	e00e      	b.n	8007db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f990 	bl	80080c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da0:	e00a      	b.n	8007db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f98c 	bl	80080c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da8:	e006      	b.n	8007db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f988 	bl	80080c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007db6:	e170      	b.n	800809a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db8:	bf00      	nop
    return;
 8007dba:	e16e      	b.n	800809a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	f040 814a 	bne.w	800805a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dca:	f003 0310 	and.w	r3, r3, #16
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8143 	beq.w	800805a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 813c 	beq.w	800805a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007de2:	2300      	movs	r3, #0
 8007de4:	60bb      	str	r3, [r7, #8]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60bb      	str	r3, [r7, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	60bb      	str	r3, [r7, #8]
 8007df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e02:	2b40      	cmp	r3, #64	; 0x40
 8007e04:	f040 80b4 	bne.w	8007f70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8140 	beq.w	800809e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e26:	429a      	cmp	r2, r3
 8007e28:	f080 8139 	bcs.w	800809e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e3e:	f000 8088 	beq.w	8007f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	330c      	adds	r3, #12
 8007e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1d9      	bne.n	8007e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3314      	adds	r3, #20
 8007e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ea0:	f023 0301 	bic.w	r3, r3, #1
 8007ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3314      	adds	r3, #20
 8007eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e1      	bne.n	8007e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3314      	adds	r3, #20
 8007ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3314      	adds	r3, #20
 8007eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e3      	bne.n	8007eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	330c      	adds	r3, #12
 8007f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f22:	f023 0310 	bic.w	r3, r3, #16
 8007f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	330c      	adds	r3, #12
 8007f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f34:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e3      	bne.n	8007f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fc fc08 	bl	8004762 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f8b6 	bl	80080d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f68:	e099      	b.n	800809e <HAL_UART_IRQHandler+0x50e>
 8007f6a:	bf00      	nop
 8007f6c:	0800830b 	.word	0x0800830b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 808b 	beq.w	80080a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8086 	beq.w	80080a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007fba:	647a      	str	r2, [r7, #68]	; 0x44
 8007fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e3      	bne.n	8007f96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3314      	adds	r3, #20
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	f023 0301 	bic.w	r3, r3, #1
 8007fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3314      	adds	r3, #20
 8007fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e3      	bne.n	8007fce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	60fb      	str	r3, [r7, #12]
   return(result);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0310 	bic.w	r3, r3, #16
 800802a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	330c      	adds	r3, #12
 8008034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008038:	61fa      	str	r2, [r7, #28]
 800803a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	69b9      	ldr	r1, [r7, #24]
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	617b      	str	r3, [r7, #20]
   return(result);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e3      	bne.n	8008014 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800804c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f83e 	bl	80080d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008058:	e023      	b.n	80080a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800805a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008062:	2b00      	cmp	r3, #0
 8008064:	d009      	beq.n	800807a <HAL_UART_IRQHandler+0x4ea>
 8008066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800806a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f95d 	bl	8008332 <UART_Transmit_IT>
    return;
 8008078:	e014      	b.n	80080a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800807a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00e      	beq.n	80080a4 <HAL_UART_IRQHandler+0x514>
 8008086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800808a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d008      	beq.n	80080a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f99d 	bl	80083d2 <UART_EndTransmit_IT>
    return;
 8008098:	e004      	b.n	80080a4 <HAL_UART_IRQHandler+0x514>
    return;
 800809a:	bf00      	nop
 800809c:	e002      	b.n	80080a4 <HAL_UART_IRQHandler+0x514>
      return;
 800809e:	bf00      	nop
 80080a0:	e000      	b.n	80080a4 <HAL_UART_IRQHandler+0x514>
      return;
 80080a2:	bf00      	nop
  }
}
 80080a4:	37e8      	adds	r7, #232	; 0xe8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop

080080ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b090      	sub	sp, #64	; 0x40
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	4613      	mov	r3, r2
 80080fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080fc:	e050      	b.n	80081a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d04c      	beq.n	80081a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <UART_WaitOnFlagUntilTimeout+0x30>
 800810c:	f7fb fdf6 	bl	8003cfc <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008118:	429a      	cmp	r2, r3
 800811a:	d241      	bcs.n	80081a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	330c      	adds	r3, #12
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	330c      	adds	r3, #12
 800813a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800813c:	637a      	str	r2, [r7, #52]	; 0x34
 800813e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e5      	bne.n	800811c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3314      	adds	r3, #20
 8008156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	613b      	str	r3, [r7, #16]
   return(result);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f023 0301 	bic.w	r3, r3, #1
 8008166:	63bb      	str	r3, [r7, #56]	; 0x38
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3314      	adds	r3, #20
 800816e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008170:	623a      	str	r2, [r7, #32]
 8008172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	69f9      	ldr	r1, [r7, #28]
 8008176:	6a3a      	ldr	r2, [r7, #32]
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	61bb      	str	r3, [r7, #24]
   return(result);
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e5      	bne.n	8008150 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e00f      	b.n	80081c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4013      	ands	r3, r2
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	bf0c      	ite	eq
 80081b0:	2301      	moveq	r3, #1
 80081b2:	2300      	movne	r3, #0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	461a      	mov	r2, r3
 80081b8:	79fb      	ldrb	r3, [r7, #7]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d09f      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3740      	adds	r7, #64	; 0x40
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	88fa      	ldrh	r2, [r7, #6]
 80081e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	88fa      	ldrh	r2, [r7, #6]
 80081e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2222      	movs	r2, #34	; 0x22
 80081f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008214:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	695a      	ldr	r2, [r3, #20]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f042 0201 	orr.w	r2, r2, #1
 8008224:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f042 0220 	orr.w	r2, r2, #32
 8008234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008244:	b480      	push	{r7}
 8008246:	b095      	sub	sp, #84	; 0x54
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	330c      	adds	r3, #12
 8008252:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	330c      	adds	r3, #12
 800826a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800826c:	643a      	str	r2, [r7, #64]	; 0x40
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e5      	bne.n	800824c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3314      	adds	r3, #20
 8008286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	f023 0301 	bic.w	r3, r3, #1
 8008296:	64bb      	str	r3, [r7, #72]	; 0x48
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3314      	adds	r3, #20
 800829e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e5      	bne.n	8008280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d119      	bne.n	80082f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	330c      	adds	r3, #12
 80082c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f023 0310 	bic.w	r3, r3, #16
 80082d2:	647b      	str	r3, [r7, #68]	; 0x44
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	330c      	adds	r3, #12
 80082da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082dc:	61ba      	str	r2, [r7, #24]
 80082de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6979      	ldr	r1, [r7, #20]
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	613b      	str	r3, [r7, #16]
   return(result);
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e5      	bne.n	80082bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80082fe:	bf00      	nop
 8008300:	3754      	adds	r7, #84	; 0x54
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fecb 	bl	80080c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b21      	cmp	r3, #33	; 0x21
 8008344:	d13e      	bne.n	80083c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834e:	d114      	bne.n	800837a <UART_Transmit_IT+0x48>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d110      	bne.n	800837a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800836c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	1c9a      	adds	r2, r3, #2
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	621a      	str	r2, [r3, #32]
 8008378:	e008      	b.n	800838c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	1c59      	adds	r1, r3, #1
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6211      	str	r1, [r2, #32]
 8008384:	781a      	ldrb	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29b      	uxth	r3, r3
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	4619      	mov	r1, r3
 800839a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10f      	bne.n	80083c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	e000      	b.n	80083c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80083c4:	2302      	movs	r3, #2
  }
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff fe5a 	bl	80080ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b08c      	sub	sp, #48	; 0x30
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b22      	cmp	r3, #34	; 0x22
 8008414:	f040 80ab 	bne.w	800856e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008420:	d117      	bne.n	8008452 <UART_Receive_IT+0x50>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d113      	bne.n	8008452 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800842a:	2300      	movs	r3, #0
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	b29b      	uxth	r3, r3
 800843c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008440:	b29a      	uxth	r2, r3
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	1c9a      	adds	r2, r3, #2
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	629a      	str	r2, [r3, #40]	; 0x28
 8008450:	e026      	b.n	80084a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008456:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008464:	d007      	beq.n	8008476 <UART_Receive_IT+0x74>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <UART_Receive_IT+0x82>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	b2da      	uxtb	r2, r3
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	701a      	strb	r2, [r3, #0]
 8008482:	e008      	b.n	8008496 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008490:	b2da      	uxtb	r2, r3
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	3b01      	subs	r3, #1
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	4619      	mov	r1, r3
 80084ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d15a      	bne.n	800856a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 0220 	bic.w	r2, r2, #32
 80084c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695a      	ldr	r2, [r3, #20]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0201 	bic.w	r2, r2, #1
 80084e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d135      	bne.n	8008560 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	330c      	adds	r3, #12
 8008500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	613b      	str	r3, [r7, #16]
   return(result);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f023 0310 	bic.w	r3, r3, #16
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	330c      	adds	r3, #12
 8008518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851a:	623a      	str	r2, [r7, #32]
 800851c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	69f9      	ldr	r1, [r7, #28]
 8008520:	6a3a      	ldr	r2, [r7, #32]
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	61bb      	str	r3, [r7, #24]
   return(result);
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0310 	and.w	r3, r3, #16
 8008538:	2b10      	cmp	r3, #16
 800853a:	d10a      	bne.n	8008552 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff fdbb 	bl	80080d4 <HAL_UARTEx_RxEventCallback>
 800855e:	e002      	b.n	8008566 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7fa fdc1 	bl	80030e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	e002      	b.n	8008570 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	e000      	b.n	8008570 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800856e:	2302      	movs	r3, #2
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3730      	adds	r7, #48	; 0x30
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800857c:	b0c0      	sub	sp, #256	; 0x100
 800857e:	af00      	add	r7, sp, #0
 8008580:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008594:	68d9      	ldr	r1, [r3, #12]
 8008596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	ea40 0301 	orr.w	r3, r0, r1
 80085a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	431a      	orrs	r2, r3
 80085b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	431a      	orrs	r2, r3
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80085c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80085d0:	f021 010c 	bic.w	r1, r1, #12
 80085d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085de:	430b      	orrs	r3, r1
 80085e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80085ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f2:	6999      	ldr	r1, [r3, #24]
 80085f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	ea40 0301 	orr.w	r3, r0, r1
 80085fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	4b8f      	ldr	r3, [pc, #572]	; (8008844 <UART_SetConfig+0x2cc>)
 8008608:	429a      	cmp	r2, r3
 800860a:	d005      	beq.n	8008618 <UART_SetConfig+0xa0>
 800860c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	4b8d      	ldr	r3, [pc, #564]	; (8008848 <UART_SetConfig+0x2d0>)
 8008614:	429a      	cmp	r2, r3
 8008616:	d104      	bne.n	8008622 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008618:	f7fe f888 	bl	800672c <HAL_RCC_GetPCLK2Freq>
 800861c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008620:	e003      	b.n	800862a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008622:	f7fe f86f 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 8008626:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800862a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008634:	f040 810c 	bne.w	8008850 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800863c:	2200      	movs	r2, #0
 800863e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008642:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008646:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800864a:	4622      	mov	r2, r4
 800864c:	462b      	mov	r3, r5
 800864e:	1891      	adds	r1, r2, r2
 8008650:	65b9      	str	r1, [r7, #88]	; 0x58
 8008652:	415b      	adcs	r3, r3
 8008654:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008656:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800865a:	4621      	mov	r1, r4
 800865c:	eb12 0801 	adds.w	r8, r2, r1
 8008660:	4629      	mov	r1, r5
 8008662:	eb43 0901 	adc.w	r9, r3, r1
 8008666:	f04f 0200 	mov.w	r2, #0
 800866a:	f04f 0300 	mov.w	r3, #0
 800866e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800867a:	4690      	mov	r8, r2
 800867c:	4699      	mov	r9, r3
 800867e:	4623      	mov	r3, r4
 8008680:	eb18 0303 	adds.w	r3, r8, r3
 8008684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008688:	462b      	mov	r3, r5
 800868a:	eb49 0303 	adc.w	r3, r9, r3
 800868e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800869e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80086a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80086a6:	460b      	mov	r3, r1
 80086a8:	18db      	adds	r3, r3, r3
 80086aa:	653b      	str	r3, [r7, #80]	; 0x50
 80086ac:	4613      	mov	r3, r2
 80086ae:	eb42 0303 	adc.w	r3, r2, r3
 80086b2:	657b      	str	r3, [r7, #84]	; 0x54
 80086b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80086b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80086bc:	f7f8 faec 	bl	8000c98 <__aeabi_uldivmod>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4b61      	ldr	r3, [pc, #388]	; (800884c <UART_SetConfig+0x2d4>)
 80086c6:	fba3 2302 	umull	r2, r3, r3, r2
 80086ca:	095b      	lsrs	r3, r3, #5
 80086cc:	011c      	lsls	r4, r3, #4
 80086ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80086dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80086e0:	4642      	mov	r2, r8
 80086e2:	464b      	mov	r3, r9
 80086e4:	1891      	adds	r1, r2, r2
 80086e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80086e8:	415b      	adcs	r3, r3
 80086ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086f0:	4641      	mov	r1, r8
 80086f2:	eb12 0a01 	adds.w	sl, r2, r1
 80086f6:	4649      	mov	r1, r9
 80086f8:	eb43 0b01 	adc.w	fp, r3, r1
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	f04f 0300 	mov.w	r3, #0
 8008704:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008708:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800870c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008710:	4692      	mov	sl, r2
 8008712:	469b      	mov	fp, r3
 8008714:	4643      	mov	r3, r8
 8008716:	eb1a 0303 	adds.w	r3, sl, r3
 800871a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800871e:	464b      	mov	r3, r9
 8008720:	eb4b 0303 	adc.w	r3, fp, r3
 8008724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008734:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008738:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800873c:	460b      	mov	r3, r1
 800873e:	18db      	adds	r3, r3, r3
 8008740:	643b      	str	r3, [r7, #64]	; 0x40
 8008742:	4613      	mov	r3, r2
 8008744:	eb42 0303 	adc.w	r3, r2, r3
 8008748:	647b      	str	r3, [r7, #68]	; 0x44
 800874a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800874e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008752:	f7f8 faa1 	bl	8000c98 <__aeabi_uldivmod>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4611      	mov	r1, r2
 800875c:	4b3b      	ldr	r3, [pc, #236]	; (800884c <UART_SetConfig+0x2d4>)
 800875e:	fba3 2301 	umull	r2, r3, r3, r1
 8008762:	095b      	lsrs	r3, r3, #5
 8008764:	2264      	movs	r2, #100	; 0x64
 8008766:	fb02 f303 	mul.w	r3, r2, r3
 800876a:	1acb      	subs	r3, r1, r3
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008772:	4b36      	ldr	r3, [pc, #216]	; (800884c <UART_SetConfig+0x2d4>)
 8008774:	fba3 2302 	umull	r2, r3, r3, r2
 8008778:	095b      	lsrs	r3, r3, #5
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008780:	441c      	add	r4, r3
 8008782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008786:	2200      	movs	r2, #0
 8008788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800878c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008790:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008794:	4642      	mov	r2, r8
 8008796:	464b      	mov	r3, r9
 8008798:	1891      	adds	r1, r2, r2
 800879a:	63b9      	str	r1, [r7, #56]	; 0x38
 800879c:	415b      	adcs	r3, r3
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087a4:	4641      	mov	r1, r8
 80087a6:	1851      	adds	r1, r2, r1
 80087a8:	6339      	str	r1, [r7, #48]	; 0x30
 80087aa:	4649      	mov	r1, r9
 80087ac:	414b      	adcs	r3, r1
 80087ae:	637b      	str	r3, [r7, #52]	; 0x34
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80087bc:	4659      	mov	r1, fp
 80087be:	00cb      	lsls	r3, r1, #3
 80087c0:	4651      	mov	r1, sl
 80087c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087c6:	4651      	mov	r1, sl
 80087c8:	00ca      	lsls	r2, r1, #3
 80087ca:	4610      	mov	r0, r2
 80087cc:	4619      	mov	r1, r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	4642      	mov	r2, r8
 80087d2:	189b      	adds	r3, r3, r2
 80087d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087d8:	464b      	mov	r3, r9
 80087da:	460a      	mov	r2, r1
 80087dc:	eb42 0303 	adc.w	r3, r2, r3
 80087e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80087f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80087f8:	460b      	mov	r3, r1
 80087fa:	18db      	adds	r3, r3, r3
 80087fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80087fe:	4613      	mov	r3, r2
 8008800:	eb42 0303 	adc.w	r3, r2, r3
 8008804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800880a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800880e:	f7f8 fa43 	bl	8000c98 <__aeabi_uldivmod>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4b0d      	ldr	r3, [pc, #52]	; (800884c <UART_SetConfig+0x2d4>)
 8008818:	fba3 1302 	umull	r1, r3, r3, r2
 800881c:	095b      	lsrs	r3, r3, #5
 800881e:	2164      	movs	r1, #100	; 0x64
 8008820:	fb01 f303 	mul.w	r3, r1, r3
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	3332      	adds	r3, #50	; 0x32
 800882a:	4a08      	ldr	r2, [pc, #32]	; (800884c <UART_SetConfig+0x2d4>)
 800882c:	fba2 2303 	umull	r2, r3, r2, r3
 8008830:	095b      	lsrs	r3, r3, #5
 8008832:	f003 0207 	and.w	r2, r3, #7
 8008836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4422      	add	r2, r4
 800883e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008840:	e105      	b.n	8008a4e <UART_SetConfig+0x4d6>
 8008842:	bf00      	nop
 8008844:	40011000 	.word	0x40011000
 8008848:	40011400 	.word	0x40011400
 800884c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008854:	2200      	movs	r2, #0
 8008856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800885a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800885e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008862:	4642      	mov	r2, r8
 8008864:	464b      	mov	r3, r9
 8008866:	1891      	adds	r1, r2, r2
 8008868:	6239      	str	r1, [r7, #32]
 800886a:	415b      	adcs	r3, r3
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
 800886e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008872:	4641      	mov	r1, r8
 8008874:	1854      	adds	r4, r2, r1
 8008876:	4649      	mov	r1, r9
 8008878:	eb43 0501 	adc.w	r5, r3, r1
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	f04f 0300 	mov.w	r3, #0
 8008884:	00eb      	lsls	r3, r5, #3
 8008886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800888a:	00e2      	lsls	r2, r4, #3
 800888c:	4614      	mov	r4, r2
 800888e:	461d      	mov	r5, r3
 8008890:	4643      	mov	r3, r8
 8008892:	18e3      	adds	r3, r4, r3
 8008894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008898:	464b      	mov	r3, r9
 800889a:	eb45 0303 	adc.w	r3, r5, r3
 800889e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088b2:	f04f 0200 	mov.w	r2, #0
 80088b6:	f04f 0300 	mov.w	r3, #0
 80088ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80088be:	4629      	mov	r1, r5
 80088c0:	008b      	lsls	r3, r1, #2
 80088c2:	4621      	mov	r1, r4
 80088c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088c8:	4621      	mov	r1, r4
 80088ca:	008a      	lsls	r2, r1, #2
 80088cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80088d0:	f7f8 f9e2 	bl	8000c98 <__aeabi_uldivmod>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4b60      	ldr	r3, [pc, #384]	; (8008a5c <UART_SetConfig+0x4e4>)
 80088da:	fba3 2302 	umull	r2, r3, r3, r2
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	011c      	lsls	r4, r3, #4
 80088e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80088f4:	4642      	mov	r2, r8
 80088f6:	464b      	mov	r3, r9
 80088f8:	1891      	adds	r1, r2, r2
 80088fa:	61b9      	str	r1, [r7, #24]
 80088fc:	415b      	adcs	r3, r3
 80088fe:	61fb      	str	r3, [r7, #28]
 8008900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008904:	4641      	mov	r1, r8
 8008906:	1851      	adds	r1, r2, r1
 8008908:	6139      	str	r1, [r7, #16]
 800890a:	4649      	mov	r1, r9
 800890c:	414b      	adcs	r3, r1
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	f04f 0200 	mov.w	r2, #0
 8008914:	f04f 0300 	mov.w	r3, #0
 8008918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800891c:	4659      	mov	r1, fp
 800891e:	00cb      	lsls	r3, r1, #3
 8008920:	4651      	mov	r1, sl
 8008922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008926:	4651      	mov	r1, sl
 8008928:	00ca      	lsls	r2, r1, #3
 800892a:	4610      	mov	r0, r2
 800892c:	4619      	mov	r1, r3
 800892e:	4603      	mov	r3, r0
 8008930:	4642      	mov	r2, r8
 8008932:	189b      	adds	r3, r3, r2
 8008934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008938:	464b      	mov	r3, r9
 800893a:	460a      	mov	r2, r1
 800893c:	eb42 0303 	adc.w	r3, r2, r3
 8008940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	67bb      	str	r3, [r7, #120]	; 0x78
 800894e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800895c:	4649      	mov	r1, r9
 800895e:	008b      	lsls	r3, r1, #2
 8008960:	4641      	mov	r1, r8
 8008962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008966:	4641      	mov	r1, r8
 8008968:	008a      	lsls	r2, r1, #2
 800896a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800896e:	f7f8 f993 	bl	8000c98 <__aeabi_uldivmod>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4b39      	ldr	r3, [pc, #228]	; (8008a5c <UART_SetConfig+0x4e4>)
 8008978:	fba3 1302 	umull	r1, r3, r3, r2
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	2164      	movs	r1, #100	; 0x64
 8008980:	fb01 f303 	mul.w	r3, r1, r3
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	3332      	adds	r3, #50	; 0x32
 800898a:	4a34      	ldr	r2, [pc, #208]	; (8008a5c <UART_SetConfig+0x4e4>)
 800898c:	fba2 2303 	umull	r2, r3, r2, r3
 8008990:	095b      	lsrs	r3, r3, #5
 8008992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008996:	441c      	add	r4, r3
 8008998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800899c:	2200      	movs	r2, #0
 800899e:	673b      	str	r3, [r7, #112]	; 0x70
 80089a0:	677a      	str	r2, [r7, #116]	; 0x74
 80089a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80089a6:	4642      	mov	r2, r8
 80089a8:	464b      	mov	r3, r9
 80089aa:	1891      	adds	r1, r2, r2
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	415b      	adcs	r3, r3
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089b6:	4641      	mov	r1, r8
 80089b8:	1851      	adds	r1, r2, r1
 80089ba:	6039      	str	r1, [r7, #0]
 80089bc:	4649      	mov	r1, r9
 80089be:	414b      	adcs	r3, r1
 80089c0:	607b      	str	r3, [r7, #4]
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80089ce:	4659      	mov	r1, fp
 80089d0:	00cb      	lsls	r3, r1, #3
 80089d2:	4651      	mov	r1, sl
 80089d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089d8:	4651      	mov	r1, sl
 80089da:	00ca      	lsls	r2, r1, #3
 80089dc:	4610      	mov	r0, r2
 80089de:	4619      	mov	r1, r3
 80089e0:	4603      	mov	r3, r0
 80089e2:	4642      	mov	r2, r8
 80089e4:	189b      	adds	r3, r3, r2
 80089e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80089e8:	464b      	mov	r3, r9
 80089ea:	460a      	mov	r2, r1
 80089ec:	eb42 0303 	adc.w	r3, r2, r3
 80089f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	663b      	str	r3, [r7, #96]	; 0x60
 80089fc:	667a      	str	r2, [r7, #100]	; 0x64
 80089fe:	f04f 0200 	mov.w	r2, #0
 8008a02:	f04f 0300 	mov.w	r3, #0
 8008a06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	008b      	lsls	r3, r1, #2
 8008a0e:	4641      	mov	r1, r8
 8008a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a14:	4641      	mov	r1, r8
 8008a16:	008a      	lsls	r2, r1, #2
 8008a18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008a1c:	f7f8 f93c 	bl	8000c98 <__aeabi_uldivmod>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <UART_SetConfig+0x4e4>)
 8008a26:	fba3 1302 	umull	r1, r3, r3, r2
 8008a2a:	095b      	lsrs	r3, r3, #5
 8008a2c:	2164      	movs	r1, #100	; 0x64
 8008a2e:	fb01 f303 	mul.w	r3, r1, r3
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	3332      	adds	r3, #50	; 0x32
 8008a38:	4a08      	ldr	r2, [pc, #32]	; (8008a5c <UART_SetConfig+0x4e4>)
 8008a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3e:	095b      	lsrs	r3, r3, #5
 8008a40:	f003 020f 	and.w	r2, r3, #15
 8008a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4422      	add	r2, r4
 8008a4c:	609a      	str	r2, [r3, #8]
}
 8008a4e:	bf00      	nop
 8008a50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a54:	46bd      	mov	sp, r7
 8008a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a5a:	bf00      	nop
 8008a5c:	51eb851f 	.word	0x51eb851f

08008a60 <__errno>:
 8008a60:	4b01      	ldr	r3, [pc, #4]	; (8008a68 <__errno+0x8>)
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	2000007c 	.word	0x2000007c

08008a6c <__libc_init_array>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	4d0d      	ldr	r5, [pc, #52]	; (8008aa4 <__libc_init_array+0x38>)
 8008a70:	4c0d      	ldr	r4, [pc, #52]	; (8008aa8 <__libc_init_array+0x3c>)
 8008a72:	1b64      	subs	r4, r4, r5
 8008a74:	10a4      	asrs	r4, r4, #2
 8008a76:	2600      	movs	r6, #0
 8008a78:	42a6      	cmp	r6, r4
 8008a7a:	d109      	bne.n	8008a90 <__libc_init_array+0x24>
 8008a7c:	4d0b      	ldr	r5, [pc, #44]	; (8008aac <__libc_init_array+0x40>)
 8008a7e:	4c0c      	ldr	r4, [pc, #48]	; (8008ab0 <__libc_init_array+0x44>)
 8008a80:	f005 ffe8 	bl	800ea54 <_init>
 8008a84:	1b64      	subs	r4, r4, r5
 8008a86:	10a4      	asrs	r4, r4, #2
 8008a88:	2600      	movs	r6, #0
 8008a8a:	42a6      	cmp	r6, r4
 8008a8c:	d105      	bne.n	8008a9a <__libc_init_array+0x2e>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a94:	4798      	blx	r3
 8008a96:	3601      	adds	r6, #1
 8008a98:	e7ee      	b.n	8008a78 <__libc_init_array+0xc>
 8008a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9e:	4798      	blx	r3
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7f2      	b.n	8008a8a <__libc_init_array+0x1e>
 8008aa4:	08010128 	.word	0x08010128
 8008aa8:	08010128 	.word	0x08010128
 8008aac:	08010128 	.word	0x08010128
 8008ab0:	0801012c 	.word	0x0801012c

08008ab4 <malloc>:
 8008ab4:	4b02      	ldr	r3, [pc, #8]	; (8008ac0 <malloc+0xc>)
 8008ab6:	4601      	mov	r1, r0
 8008ab8:	6818      	ldr	r0, [r3, #0]
 8008aba:	f000 b8a7 	b.w	8008c0c <_malloc_r>
 8008abe:	bf00      	nop
 8008ac0:	2000007c 	.word	0x2000007c

08008ac4 <free>:
 8008ac4:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <free+0xc>)
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f000 b833 	b.w	8008b34 <_free_r>
 8008ace:	bf00      	nop
 8008ad0:	2000007c 	.word	0x2000007c

08008ad4 <memcpy>:
 8008ad4:	440a      	add	r2, r1
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008adc:	d100      	bne.n	8008ae0 <memcpy+0xc>
 8008ade:	4770      	bx	lr
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aea:	4291      	cmp	r1, r2
 8008aec:	d1f9      	bne.n	8008ae2 <memcpy+0xe>
 8008aee:	bd10      	pop	{r4, pc}

08008af0 <memmove>:
 8008af0:	4288      	cmp	r0, r1
 8008af2:	b510      	push	{r4, lr}
 8008af4:	eb01 0402 	add.w	r4, r1, r2
 8008af8:	d902      	bls.n	8008b00 <memmove+0x10>
 8008afa:	4284      	cmp	r4, r0
 8008afc:	4623      	mov	r3, r4
 8008afe:	d807      	bhi.n	8008b10 <memmove+0x20>
 8008b00:	1e43      	subs	r3, r0, #1
 8008b02:	42a1      	cmp	r1, r4
 8008b04:	d008      	beq.n	8008b18 <memmove+0x28>
 8008b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b0e:	e7f8      	b.n	8008b02 <memmove+0x12>
 8008b10:	4402      	add	r2, r0
 8008b12:	4601      	mov	r1, r0
 8008b14:	428a      	cmp	r2, r1
 8008b16:	d100      	bne.n	8008b1a <memmove+0x2a>
 8008b18:	bd10      	pop	{r4, pc}
 8008b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b22:	e7f7      	b.n	8008b14 <memmove+0x24>

08008b24 <memset>:
 8008b24:	4402      	add	r2, r0
 8008b26:	4603      	mov	r3, r0
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d100      	bne.n	8008b2e <memset+0xa>
 8008b2c:	4770      	bx	lr
 8008b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b32:	e7f9      	b.n	8008b28 <memset+0x4>

08008b34 <_free_r>:
 8008b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b36:	2900      	cmp	r1, #0
 8008b38:	d044      	beq.n	8008bc4 <_free_r+0x90>
 8008b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3e:	9001      	str	r0, [sp, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f1a1 0404 	sub.w	r4, r1, #4
 8008b46:	bfb8      	it	lt
 8008b48:	18e4      	addlt	r4, r4, r3
 8008b4a:	f003 f8eb 	bl	800bd24 <__malloc_lock>
 8008b4e:	4a1e      	ldr	r2, [pc, #120]	; (8008bc8 <_free_r+0x94>)
 8008b50:	9801      	ldr	r0, [sp, #4]
 8008b52:	6813      	ldr	r3, [r2, #0]
 8008b54:	b933      	cbnz	r3, 8008b64 <_free_r+0x30>
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6014      	str	r4, [r2, #0]
 8008b5a:	b003      	add	sp, #12
 8008b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b60:	f003 b8e6 	b.w	800bd30 <__malloc_unlock>
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d908      	bls.n	8008b7a <_free_r+0x46>
 8008b68:	6825      	ldr	r5, [r4, #0]
 8008b6a:	1961      	adds	r1, r4, r5
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	bf01      	itttt	eq
 8008b70:	6819      	ldreq	r1, [r3, #0]
 8008b72:	685b      	ldreq	r3, [r3, #4]
 8008b74:	1949      	addeq	r1, r1, r5
 8008b76:	6021      	streq	r1, [r4, #0]
 8008b78:	e7ed      	b.n	8008b56 <_free_r+0x22>
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b10b      	cbz	r3, 8008b84 <_free_r+0x50>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d9fa      	bls.n	8008b7a <_free_r+0x46>
 8008b84:	6811      	ldr	r1, [r2, #0]
 8008b86:	1855      	adds	r5, r2, r1
 8008b88:	42a5      	cmp	r5, r4
 8008b8a:	d10b      	bne.n	8008ba4 <_free_r+0x70>
 8008b8c:	6824      	ldr	r4, [r4, #0]
 8008b8e:	4421      	add	r1, r4
 8008b90:	1854      	adds	r4, r2, r1
 8008b92:	42a3      	cmp	r3, r4
 8008b94:	6011      	str	r1, [r2, #0]
 8008b96:	d1e0      	bne.n	8008b5a <_free_r+0x26>
 8008b98:	681c      	ldr	r4, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	6053      	str	r3, [r2, #4]
 8008b9e:	4421      	add	r1, r4
 8008ba0:	6011      	str	r1, [r2, #0]
 8008ba2:	e7da      	b.n	8008b5a <_free_r+0x26>
 8008ba4:	d902      	bls.n	8008bac <_free_r+0x78>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	6003      	str	r3, [r0, #0]
 8008baa:	e7d6      	b.n	8008b5a <_free_r+0x26>
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	1961      	adds	r1, r4, r5
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf04      	itt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	bf04      	itt	eq
 8008bbc:	1949      	addeq	r1, r1, r5
 8008bbe:	6021      	streq	r1, [r4, #0]
 8008bc0:	6054      	str	r4, [r2, #4]
 8008bc2:	e7ca      	b.n	8008b5a <_free_r+0x26>
 8008bc4:	b003      	add	sp, #12
 8008bc6:	bd30      	pop	{r4, r5, pc}
 8008bc8:	20000b60 	.word	0x20000b60

08008bcc <sbrk_aligned>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4e0e      	ldr	r6, [pc, #56]	; (8008c08 <sbrk_aligned+0x3c>)
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	6831      	ldr	r1, [r6, #0]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	b911      	cbnz	r1, 8008bde <sbrk_aligned+0x12>
 8008bd8:	f000 ff06 	bl	80099e8 <_sbrk_r>
 8008bdc:	6030      	str	r0, [r6, #0]
 8008bde:	4621      	mov	r1, r4
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 ff01 	bl	80099e8 <_sbrk_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d00a      	beq.n	8008c00 <sbrk_aligned+0x34>
 8008bea:	1cc4      	adds	r4, r0, #3
 8008bec:	f024 0403 	bic.w	r4, r4, #3
 8008bf0:	42a0      	cmp	r0, r4
 8008bf2:	d007      	beq.n	8008c04 <sbrk_aligned+0x38>
 8008bf4:	1a21      	subs	r1, r4, r0
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f000 fef6 	bl	80099e8 <_sbrk_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d101      	bne.n	8008c04 <sbrk_aligned+0x38>
 8008c00:	f04f 34ff 	mov.w	r4, #4294967295
 8008c04:	4620      	mov	r0, r4
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	20000b64 	.word	0x20000b64

08008c0c <_malloc_r>:
 8008c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c10:	1ccd      	adds	r5, r1, #3
 8008c12:	f025 0503 	bic.w	r5, r5, #3
 8008c16:	3508      	adds	r5, #8
 8008c18:	2d0c      	cmp	r5, #12
 8008c1a:	bf38      	it	cc
 8008c1c:	250c      	movcc	r5, #12
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	4607      	mov	r7, r0
 8008c22:	db01      	blt.n	8008c28 <_malloc_r+0x1c>
 8008c24:	42a9      	cmp	r1, r5
 8008c26:	d905      	bls.n	8008c34 <_malloc_r+0x28>
 8008c28:	230c      	movs	r3, #12
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	4630      	mov	r0, r6
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	4e2e      	ldr	r6, [pc, #184]	; (8008cf0 <_malloc_r+0xe4>)
 8008c36:	f003 f875 	bl	800bd24 <__malloc_lock>
 8008c3a:	6833      	ldr	r3, [r6, #0]
 8008c3c:	461c      	mov	r4, r3
 8008c3e:	bb34      	cbnz	r4, 8008c8e <_malloc_r+0x82>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4638      	mov	r0, r7
 8008c44:	f7ff ffc2 	bl	8008bcc <sbrk_aligned>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	d14d      	bne.n	8008cea <_malloc_r+0xde>
 8008c4e:	6834      	ldr	r4, [r6, #0]
 8008c50:	4626      	mov	r6, r4
 8008c52:	2e00      	cmp	r6, #0
 8008c54:	d140      	bne.n	8008cd8 <_malloc_r+0xcc>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	4631      	mov	r1, r6
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	eb04 0803 	add.w	r8, r4, r3
 8008c60:	f000 fec2 	bl	80099e8 <_sbrk_r>
 8008c64:	4580      	cmp	r8, r0
 8008c66:	d13a      	bne.n	8008cde <_malloc_r+0xd2>
 8008c68:	6821      	ldr	r1, [r4, #0]
 8008c6a:	3503      	adds	r5, #3
 8008c6c:	1a6d      	subs	r5, r5, r1
 8008c6e:	f025 0503 	bic.w	r5, r5, #3
 8008c72:	3508      	adds	r5, #8
 8008c74:	2d0c      	cmp	r5, #12
 8008c76:	bf38      	it	cc
 8008c78:	250c      	movcc	r5, #12
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff ffa5 	bl	8008bcc <sbrk_aligned>
 8008c82:	3001      	adds	r0, #1
 8008c84:	d02b      	beq.n	8008cde <_malloc_r+0xd2>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	442b      	add	r3, r5
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	e00e      	b.n	8008cac <_malloc_r+0xa0>
 8008c8e:	6822      	ldr	r2, [r4, #0]
 8008c90:	1b52      	subs	r2, r2, r5
 8008c92:	d41e      	bmi.n	8008cd2 <_malloc_r+0xc6>
 8008c94:	2a0b      	cmp	r2, #11
 8008c96:	d916      	bls.n	8008cc6 <_malloc_r+0xba>
 8008c98:	1961      	adds	r1, r4, r5
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	6025      	str	r5, [r4, #0]
 8008c9e:	bf18      	it	ne
 8008ca0:	6059      	strne	r1, [r3, #4]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	bf08      	it	eq
 8008ca6:	6031      	streq	r1, [r6, #0]
 8008ca8:	5162      	str	r2, [r4, r5]
 8008caa:	604b      	str	r3, [r1, #4]
 8008cac:	4638      	mov	r0, r7
 8008cae:	f104 060b 	add.w	r6, r4, #11
 8008cb2:	f003 f83d 	bl	800bd30 <__malloc_unlock>
 8008cb6:	f026 0607 	bic.w	r6, r6, #7
 8008cba:	1d23      	adds	r3, r4, #4
 8008cbc:	1af2      	subs	r2, r6, r3
 8008cbe:	d0b6      	beq.n	8008c2e <_malloc_r+0x22>
 8008cc0:	1b9b      	subs	r3, r3, r6
 8008cc2:	50a3      	str	r3, [r4, r2]
 8008cc4:	e7b3      	b.n	8008c2e <_malloc_r+0x22>
 8008cc6:	6862      	ldr	r2, [r4, #4]
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	bf0c      	ite	eq
 8008ccc:	6032      	streq	r2, [r6, #0]
 8008cce:	605a      	strne	r2, [r3, #4]
 8008cd0:	e7ec      	b.n	8008cac <_malloc_r+0xa0>
 8008cd2:	4623      	mov	r3, r4
 8008cd4:	6864      	ldr	r4, [r4, #4]
 8008cd6:	e7b2      	b.n	8008c3e <_malloc_r+0x32>
 8008cd8:	4634      	mov	r4, r6
 8008cda:	6876      	ldr	r6, [r6, #4]
 8008cdc:	e7b9      	b.n	8008c52 <_malloc_r+0x46>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f003 f824 	bl	800bd30 <__malloc_unlock>
 8008ce8:	e7a1      	b.n	8008c2e <_malloc_r+0x22>
 8008cea:	6025      	str	r5, [r4, #0]
 8008cec:	e7de      	b.n	8008cac <_malloc_r+0xa0>
 8008cee:	bf00      	nop
 8008cf0:	20000b60 	.word	0x20000b60

08008cf4 <__cvt>:
 8008cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	ec55 4b10 	vmov	r4, r5, d0
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	460e      	mov	r6, r1
 8008d00:	4619      	mov	r1, r3
 8008d02:	462b      	mov	r3, r5
 8008d04:	bfbb      	ittet	lt
 8008d06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d0a:	461d      	movlt	r5, r3
 8008d0c:	2300      	movge	r3, #0
 8008d0e:	232d      	movlt	r3, #45	; 0x2d
 8008d10:	700b      	strb	r3, [r1, #0]
 8008d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d18:	4691      	mov	r9, r2
 8008d1a:	f023 0820 	bic.w	r8, r3, #32
 8008d1e:	bfbc      	itt	lt
 8008d20:	4622      	movlt	r2, r4
 8008d22:	4614      	movlt	r4, r2
 8008d24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d28:	d005      	beq.n	8008d36 <__cvt+0x42>
 8008d2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d2e:	d100      	bne.n	8008d32 <__cvt+0x3e>
 8008d30:	3601      	adds	r6, #1
 8008d32:	2102      	movs	r1, #2
 8008d34:	e000      	b.n	8008d38 <__cvt+0x44>
 8008d36:	2103      	movs	r1, #3
 8008d38:	ab03      	add	r3, sp, #12
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	ab02      	add	r3, sp, #8
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	ec45 4b10 	vmov	d0, r4, r5
 8008d44:	4653      	mov	r3, sl
 8008d46:	4632      	mov	r2, r6
 8008d48:	f001 fe66 	bl	800aa18 <_dtoa_r>
 8008d4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d50:	4607      	mov	r7, r0
 8008d52:	d102      	bne.n	8008d5a <__cvt+0x66>
 8008d54:	f019 0f01 	tst.w	r9, #1
 8008d58:	d022      	beq.n	8008da0 <__cvt+0xac>
 8008d5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d5e:	eb07 0906 	add.w	r9, r7, r6
 8008d62:	d110      	bne.n	8008d86 <__cvt+0x92>
 8008d64:	783b      	ldrb	r3, [r7, #0]
 8008d66:	2b30      	cmp	r3, #48	; 0x30
 8008d68:	d10a      	bne.n	8008d80 <__cvt+0x8c>
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d76:	b918      	cbnz	r0, 8008d80 <__cvt+0x8c>
 8008d78:	f1c6 0601 	rsb	r6, r6, #1
 8008d7c:	f8ca 6000 	str.w	r6, [sl]
 8008d80:	f8da 3000 	ldr.w	r3, [sl]
 8008d84:	4499      	add	r9, r3
 8008d86:	2200      	movs	r2, #0
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f7f7 fea3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d92:	b108      	cbz	r0, 8008d98 <__cvt+0xa4>
 8008d94:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d98:	2230      	movs	r2, #48	; 0x30
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	454b      	cmp	r3, r9
 8008d9e:	d307      	bcc.n	8008db0 <__cvt+0xbc>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008da4:	1bdb      	subs	r3, r3, r7
 8008da6:	4638      	mov	r0, r7
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	b004      	add	sp, #16
 8008dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db0:	1c59      	adds	r1, r3, #1
 8008db2:	9103      	str	r1, [sp, #12]
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	e7f0      	b.n	8008d9a <__cvt+0xa6>

08008db8 <__exponent>:
 8008db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	bfb8      	it	lt
 8008dc0:	4249      	neglt	r1, r1
 8008dc2:	f803 2b02 	strb.w	r2, [r3], #2
 8008dc6:	bfb4      	ite	lt
 8008dc8:	222d      	movlt	r2, #45	; 0x2d
 8008dca:	222b      	movge	r2, #43	; 0x2b
 8008dcc:	2909      	cmp	r1, #9
 8008dce:	7042      	strb	r2, [r0, #1]
 8008dd0:	dd2a      	ble.n	8008e28 <__exponent+0x70>
 8008dd2:	f10d 0407 	add.w	r4, sp, #7
 8008dd6:	46a4      	mov	ip, r4
 8008dd8:	270a      	movs	r7, #10
 8008dda:	46a6      	mov	lr, r4
 8008ddc:	460a      	mov	r2, r1
 8008dde:	fb91 f6f7 	sdiv	r6, r1, r7
 8008de2:	fb07 1516 	mls	r5, r7, r6, r1
 8008de6:	3530      	adds	r5, #48	; 0x30
 8008de8:	2a63      	cmp	r2, #99	; 0x63
 8008dea:	f104 34ff 	add.w	r4, r4, #4294967295
 8008dee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008df2:	4631      	mov	r1, r6
 8008df4:	dcf1      	bgt.n	8008dda <__exponent+0x22>
 8008df6:	3130      	adds	r1, #48	; 0x30
 8008df8:	f1ae 0502 	sub.w	r5, lr, #2
 8008dfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e00:	1c44      	adds	r4, r0, #1
 8008e02:	4629      	mov	r1, r5
 8008e04:	4561      	cmp	r1, ip
 8008e06:	d30a      	bcc.n	8008e1e <__exponent+0x66>
 8008e08:	f10d 0209 	add.w	r2, sp, #9
 8008e0c:	eba2 020e 	sub.w	r2, r2, lr
 8008e10:	4565      	cmp	r5, ip
 8008e12:	bf88      	it	hi
 8008e14:	2200      	movhi	r2, #0
 8008e16:	4413      	add	r3, r2
 8008e18:	1a18      	subs	r0, r3, r0
 8008e1a:	b003      	add	sp, #12
 8008e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e26:	e7ed      	b.n	8008e04 <__exponent+0x4c>
 8008e28:	2330      	movs	r3, #48	; 0x30
 8008e2a:	3130      	adds	r1, #48	; 0x30
 8008e2c:	7083      	strb	r3, [r0, #2]
 8008e2e:	70c1      	strb	r1, [r0, #3]
 8008e30:	1d03      	adds	r3, r0, #4
 8008e32:	e7f1      	b.n	8008e18 <__exponent+0x60>

08008e34 <_printf_float>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	ed2d 8b02 	vpush	{d8}
 8008e3c:	b08d      	sub	sp, #52	; 0x34
 8008e3e:	460c      	mov	r4, r1
 8008e40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e44:	4616      	mov	r6, r2
 8008e46:	461f      	mov	r7, r3
 8008e48:	4605      	mov	r5, r0
 8008e4a:	f002 ff43 	bl	800bcd4 <_localeconv_r>
 8008e4e:	f8d0 a000 	ldr.w	sl, [r0]
 8008e52:	4650      	mov	r0, sl
 8008e54:	f7f7 f9c4 	bl	80001e0 <strlen>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	9305      	str	r3, [sp, #20]
 8008e60:	f8d8 3000 	ldr.w	r3, [r8]
 8008e64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e68:	3307      	adds	r3, #7
 8008e6a:	f023 0307 	bic.w	r3, r3, #7
 8008e6e:	f103 0208 	add.w	r2, r3, #8
 8008e72:	f8c8 2000 	str.w	r2, [r8]
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e86:	9307      	str	r3, [sp, #28]
 8008e88:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e8c:	ee08 0a10 	vmov	s16, r0
 8008e90:	4b9f      	ldr	r3, [pc, #636]	; (8009110 <_printf_float+0x2dc>)
 8008e92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e96:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9a:	f7f7 fe4f 	bl	8000b3c <__aeabi_dcmpun>
 8008e9e:	bb88      	cbnz	r0, 8008f04 <_printf_float+0xd0>
 8008ea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ea4:	4b9a      	ldr	r3, [pc, #616]	; (8009110 <_printf_float+0x2dc>)
 8008ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eaa:	f7f7 fe29 	bl	8000b00 <__aeabi_dcmple>
 8008eae:	bb48      	cbnz	r0, 8008f04 <_printf_float+0xd0>
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 fe18 	bl	8000aec <__aeabi_dcmplt>
 8008ebc:	b110      	cbz	r0, 8008ec4 <_printf_float+0x90>
 8008ebe:	232d      	movs	r3, #45	; 0x2d
 8008ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec4:	4b93      	ldr	r3, [pc, #588]	; (8009114 <_printf_float+0x2e0>)
 8008ec6:	4894      	ldr	r0, [pc, #592]	; (8009118 <_printf_float+0x2e4>)
 8008ec8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ecc:	bf94      	ite	ls
 8008ece:	4698      	movls	r8, r3
 8008ed0:	4680      	movhi	r8, r0
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	6123      	str	r3, [r4, #16]
 8008ed6:	9b05      	ldr	r3, [sp, #20]
 8008ed8:	f023 0204 	bic.w	r2, r3, #4
 8008edc:	6022      	str	r2, [r4, #0]
 8008ede:	f04f 0900 	mov.w	r9, #0
 8008ee2:	9700      	str	r7, [sp, #0]
 8008ee4:	4633      	mov	r3, r6
 8008ee6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4628      	mov	r0, r5
 8008eec:	f000 f9d8 	bl	80092a0 <_printf_common>
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	f040 8090 	bne.w	8009016 <_printf_float+0x1e2>
 8008ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8008efa:	b00d      	add	sp, #52	; 0x34
 8008efc:	ecbd 8b02 	vpop	{d8}
 8008f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f04:	4642      	mov	r2, r8
 8008f06:	464b      	mov	r3, r9
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f7f7 fe16 	bl	8000b3c <__aeabi_dcmpun>
 8008f10:	b140      	cbz	r0, 8008f24 <_printf_float+0xf0>
 8008f12:	464b      	mov	r3, r9
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bfbc      	itt	lt
 8008f18:	232d      	movlt	r3, #45	; 0x2d
 8008f1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f1e:	487f      	ldr	r0, [pc, #508]	; (800911c <_printf_float+0x2e8>)
 8008f20:	4b7f      	ldr	r3, [pc, #508]	; (8009120 <_printf_float+0x2ec>)
 8008f22:	e7d1      	b.n	8008ec8 <_printf_float+0x94>
 8008f24:	6863      	ldr	r3, [r4, #4]
 8008f26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f2a:	9206      	str	r2, [sp, #24]
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	d13f      	bne.n	8008fb0 <_printf_float+0x17c>
 8008f30:	2306      	movs	r3, #6
 8008f32:	6063      	str	r3, [r4, #4]
 8008f34:	9b05      	ldr	r3, [sp, #20]
 8008f36:	6861      	ldr	r1, [r4, #4]
 8008f38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9303      	str	r3, [sp, #12]
 8008f40:	ab0a      	add	r3, sp, #40	; 0x28
 8008f42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f46:	ab09      	add	r3, sp, #36	; 0x24
 8008f48:	ec49 8b10 	vmov	d0, r8, r9
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	6022      	str	r2, [r4, #0]
 8008f50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7ff fecd 	bl	8008cf4 <__cvt>
 8008f5a:	9b06      	ldr	r3, [sp, #24]
 8008f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f5e:	2b47      	cmp	r3, #71	; 0x47
 8008f60:	4680      	mov	r8, r0
 8008f62:	d108      	bne.n	8008f76 <_printf_float+0x142>
 8008f64:	1cc8      	adds	r0, r1, #3
 8008f66:	db02      	blt.n	8008f6e <_printf_float+0x13a>
 8008f68:	6863      	ldr	r3, [r4, #4]
 8008f6a:	4299      	cmp	r1, r3
 8008f6c:	dd41      	ble.n	8008ff2 <_printf_float+0x1be>
 8008f6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f72:	fa5f fb8b 	uxtb.w	fp, fp
 8008f76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f7a:	d820      	bhi.n	8008fbe <_printf_float+0x18a>
 8008f7c:	3901      	subs	r1, #1
 8008f7e:	465a      	mov	r2, fp
 8008f80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f84:	9109      	str	r1, [sp, #36]	; 0x24
 8008f86:	f7ff ff17 	bl	8008db8 <__exponent>
 8008f8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f8c:	1813      	adds	r3, r2, r0
 8008f8e:	2a01      	cmp	r2, #1
 8008f90:	4681      	mov	r9, r0
 8008f92:	6123      	str	r3, [r4, #16]
 8008f94:	dc02      	bgt.n	8008f9c <_printf_float+0x168>
 8008f96:	6822      	ldr	r2, [r4, #0]
 8008f98:	07d2      	lsls	r2, r2, #31
 8008f9a:	d501      	bpl.n	8008fa0 <_printf_float+0x16c>
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d09c      	beq.n	8008ee2 <_printf_float+0xae>
 8008fa8:	232d      	movs	r3, #45	; 0x2d
 8008faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fae:	e798      	b.n	8008ee2 <_printf_float+0xae>
 8008fb0:	9a06      	ldr	r2, [sp, #24]
 8008fb2:	2a47      	cmp	r2, #71	; 0x47
 8008fb4:	d1be      	bne.n	8008f34 <_printf_float+0x100>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1bc      	bne.n	8008f34 <_printf_float+0x100>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e7b9      	b.n	8008f32 <_printf_float+0xfe>
 8008fbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fc2:	d118      	bne.n	8008ff6 <_printf_float+0x1c2>
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	dd0b      	ble.n	8008fe2 <_printf_float+0x1ae>
 8008fca:	6121      	str	r1, [r4, #16]
 8008fcc:	b913      	cbnz	r3, 8008fd4 <_printf_float+0x1a0>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	07d0      	lsls	r0, r2, #31
 8008fd2:	d502      	bpl.n	8008fda <_printf_float+0x1a6>
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	440b      	add	r3, r1
 8008fd8:	6123      	str	r3, [r4, #16]
 8008fda:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fdc:	f04f 0900 	mov.w	r9, #0
 8008fe0:	e7de      	b.n	8008fa0 <_printf_float+0x16c>
 8008fe2:	b913      	cbnz	r3, 8008fea <_printf_float+0x1b6>
 8008fe4:	6822      	ldr	r2, [r4, #0]
 8008fe6:	07d2      	lsls	r2, r2, #31
 8008fe8:	d501      	bpl.n	8008fee <_printf_float+0x1ba>
 8008fea:	3302      	adds	r3, #2
 8008fec:	e7f4      	b.n	8008fd8 <_printf_float+0x1a4>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e7f2      	b.n	8008fd8 <_printf_float+0x1a4>
 8008ff2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff8:	4299      	cmp	r1, r3
 8008ffa:	db05      	blt.n	8009008 <_printf_float+0x1d4>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	6121      	str	r1, [r4, #16]
 8009000:	07d8      	lsls	r0, r3, #31
 8009002:	d5ea      	bpl.n	8008fda <_printf_float+0x1a6>
 8009004:	1c4b      	adds	r3, r1, #1
 8009006:	e7e7      	b.n	8008fd8 <_printf_float+0x1a4>
 8009008:	2900      	cmp	r1, #0
 800900a:	bfd4      	ite	le
 800900c:	f1c1 0202 	rsble	r2, r1, #2
 8009010:	2201      	movgt	r2, #1
 8009012:	4413      	add	r3, r2
 8009014:	e7e0      	b.n	8008fd8 <_printf_float+0x1a4>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	055a      	lsls	r2, r3, #21
 800901a:	d407      	bmi.n	800902c <_printf_float+0x1f8>
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	4642      	mov	r2, r8
 8009020:	4631      	mov	r1, r6
 8009022:	4628      	mov	r0, r5
 8009024:	47b8      	blx	r7
 8009026:	3001      	adds	r0, #1
 8009028:	d12c      	bne.n	8009084 <_printf_float+0x250>
 800902a:	e764      	b.n	8008ef6 <_printf_float+0xc2>
 800902c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009030:	f240 80e0 	bls.w	80091f4 <_printf_float+0x3c0>
 8009034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009038:	2200      	movs	r2, #0
 800903a:	2300      	movs	r3, #0
 800903c:	f7f7 fd4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009040:	2800      	cmp	r0, #0
 8009042:	d034      	beq.n	80090ae <_printf_float+0x27a>
 8009044:	4a37      	ldr	r2, [pc, #220]	; (8009124 <_printf_float+0x2f0>)
 8009046:	2301      	movs	r3, #1
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	47b8      	blx	r7
 800904e:	3001      	adds	r0, #1
 8009050:	f43f af51 	beq.w	8008ef6 <_printf_float+0xc2>
 8009054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009058:	429a      	cmp	r2, r3
 800905a:	db02      	blt.n	8009062 <_printf_float+0x22e>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	07d8      	lsls	r0, r3, #31
 8009060:	d510      	bpl.n	8009084 <_printf_float+0x250>
 8009062:	ee18 3a10 	vmov	r3, s16
 8009066:	4652      	mov	r2, sl
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	f43f af41 	beq.w	8008ef6 <_printf_float+0xc2>
 8009074:	f04f 0800 	mov.w	r8, #0
 8009078:	f104 091a 	add.w	r9, r4, #26
 800907c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800907e:	3b01      	subs	r3, #1
 8009080:	4543      	cmp	r3, r8
 8009082:	dc09      	bgt.n	8009098 <_printf_float+0x264>
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	079b      	lsls	r3, r3, #30
 8009088:	f100 8105 	bmi.w	8009296 <_printf_float+0x462>
 800908c:	68e0      	ldr	r0, [r4, #12]
 800908e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009090:	4298      	cmp	r0, r3
 8009092:	bfb8      	it	lt
 8009094:	4618      	movlt	r0, r3
 8009096:	e730      	b.n	8008efa <_printf_float+0xc6>
 8009098:	2301      	movs	r3, #1
 800909a:	464a      	mov	r2, r9
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	f43f af27 	beq.w	8008ef6 <_printf_float+0xc2>
 80090a8:	f108 0801 	add.w	r8, r8, #1
 80090ac:	e7e6      	b.n	800907c <_printf_float+0x248>
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dc39      	bgt.n	8009128 <_printf_float+0x2f4>
 80090b4:	4a1b      	ldr	r2, [pc, #108]	; (8009124 <_printf_float+0x2f0>)
 80090b6:	2301      	movs	r3, #1
 80090b8:	4631      	mov	r1, r6
 80090ba:	4628      	mov	r0, r5
 80090bc:	47b8      	blx	r7
 80090be:	3001      	adds	r0, #1
 80090c0:	f43f af19 	beq.w	8008ef6 <_printf_float+0xc2>
 80090c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090c8:	4313      	orrs	r3, r2
 80090ca:	d102      	bne.n	80090d2 <_printf_float+0x29e>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	07d9      	lsls	r1, r3, #31
 80090d0:	d5d8      	bpl.n	8009084 <_printf_float+0x250>
 80090d2:	ee18 3a10 	vmov	r3, s16
 80090d6:	4652      	mov	r2, sl
 80090d8:	4631      	mov	r1, r6
 80090da:	4628      	mov	r0, r5
 80090dc:	47b8      	blx	r7
 80090de:	3001      	adds	r0, #1
 80090e0:	f43f af09 	beq.w	8008ef6 <_printf_float+0xc2>
 80090e4:	f04f 0900 	mov.w	r9, #0
 80090e8:	f104 0a1a 	add.w	sl, r4, #26
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	425b      	negs	r3, r3
 80090f0:	454b      	cmp	r3, r9
 80090f2:	dc01      	bgt.n	80090f8 <_printf_float+0x2c4>
 80090f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f6:	e792      	b.n	800901e <_printf_float+0x1ea>
 80090f8:	2301      	movs	r3, #1
 80090fa:	4652      	mov	r2, sl
 80090fc:	4631      	mov	r1, r6
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	f43f aef7 	beq.w	8008ef6 <_printf_float+0xc2>
 8009108:	f109 0901 	add.w	r9, r9, #1
 800910c:	e7ee      	b.n	80090ec <_printf_float+0x2b8>
 800910e:	bf00      	nop
 8009110:	7fefffff 	.word	0x7fefffff
 8009114:	0800fc34 	.word	0x0800fc34
 8009118:	0800fc38 	.word	0x0800fc38
 800911c:	0800fc40 	.word	0x0800fc40
 8009120:	0800fc3c 	.word	0x0800fc3c
 8009124:	08010039 	.word	0x08010039
 8009128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800912a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800912c:	429a      	cmp	r2, r3
 800912e:	bfa8      	it	ge
 8009130:	461a      	movge	r2, r3
 8009132:	2a00      	cmp	r2, #0
 8009134:	4691      	mov	r9, r2
 8009136:	dc37      	bgt.n	80091a8 <_printf_float+0x374>
 8009138:	f04f 0b00 	mov.w	fp, #0
 800913c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009140:	f104 021a 	add.w	r2, r4, #26
 8009144:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009146:	9305      	str	r3, [sp, #20]
 8009148:	eba3 0309 	sub.w	r3, r3, r9
 800914c:	455b      	cmp	r3, fp
 800914e:	dc33      	bgt.n	80091b8 <_printf_float+0x384>
 8009150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009154:	429a      	cmp	r2, r3
 8009156:	db3b      	blt.n	80091d0 <_printf_float+0x39c>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	07da      	lsls	r2, r3, #31
 800915c:	d438      	bmi.n	80091d0 <_printf_float+0x39c>
 800915e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009160:	9a05      	ldr	r2, [sp, #20]
 8009162:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009164:	1a9a      	subs	r2, r3, r2
 8009166:	eba3 0901 	sub.w	r9, r3, r1
 800916a:	4591      	cmp	r9, r2
 800916c:	bfa8      	it	ge
 800916e:	4691      	movge	r9, r2
 8009170:	f1b9 0f00 	cmp.w	r9, #0
 8009174:	dc35      	bgt.n	80091e2 <_printf_float+0x3ae>
 8009176:	f04f 0800 	mov.w	r8, #0
 800917a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800917e:	f104 0a1a 	add.w	sl, r4, #26
 8009182:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	eba3 0309 	sub.w	r3, r3, r9
 800918c:	4543      	cmp	r3, r8
 800918e:	f77f af79 	ble.w	8009084 <_printf_float+0x250>
 8009192:	2301      	movs	r3, #1
 8009194:	4652      	mov	r2, sl
 8009196:	4631      	mov	r1, r6
 8009198:	4628      	mov	r0, r5
 800919a:	47b8      	blx	r7
 800919c:	3001      	adds	r0, #1
 800919e:	f43f aeaa 	beq.w	8008ef6 <_printf_float+0xc2>
 80091a2:	f108 0801 	add.w	r8, r8, #1
 80091a6:	e7ec      	b.n	8009182 <_printf_float+0x34e>
 80091a8:	4613      	mov	r3, r2
 80091aa:	4631      	mov	r1, r6
 80091ac:	4642      	mov	r2, r8
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	d1c0      	bne.n	8009138 <_printf_float+0x304>
 80091b6:	e69e      	b.n	8008ef6 <_printf_float+0xc2>
 80091b8:	2301      	movs	r3, #1
 80091ba:	4631      	mov	r1, r6
 80091bc:	4628      	mov	r0, r5
 80091be:	9205      	str	r2, [sp, #20]
 80091c0:	47b8      	blx	r7
 80091c2:	3001      	adds	r0, #1
 80091c4:	f43f ae97 	beq.w	8008ef6 <_printf_float+0xc2>
 80091c8:	9a05      	ldr	r2, [sp, #20]
 80091ca:	f10b 0b01 	add.w	fp, fp, #1
 80091ce:	e7b9      	b.n	8009144 <_printf_float+0x310>
 80091d0:	ee18 3a10 	vmov	r3, s16
 80091d4:	4652      	mov	r2, sl
 80091d6:	4631      	mov	r1, r6
 80091d8:	4628      	mov	r0, r5
 80091da:	47b8      	blx	r7
 80091dc:	3001      	adds	r0, #1
 80091de:	d1be      	bne.n	800915e <_printf_float+0x32a>
 80091e0:	e689      	b.n	8008ef6 <_printf_float+0xc2>
 80091e2:	9a05      	ldr	r2, [sp, #20]
 80091e4:	464b      	mov	r3, r9
 80091e6:	4442      	add	r2, r8
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	d1c1      	bne.n	8009176 <_printf_float+0x342>
 80091f2:	e680      	b.n	8008ef6 <_printf_float+0xc2>
 80091f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f6:	2a01      	cmp	r2, #1
 80091f8:	dc01      	bgt.n	80091fe <_printf_float+0x3ca>
 80091fa:	07db      	lsls	r3, r3, #31
 80091fc:	d538      	bpl.n	8009270 <_printf_float+0x43c>
 80091fe:	2301      	movs	r3, #1
 8009200:	4642      	mov	r2, r8
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	f43f ae74 	beq.w	8008ef6 <_printf_float+0xc2>
 800920e:	ee18 3a10 	vmov	r3, s16
 8009212:	4652      	mov	r2, sl
 8009214:	4631      	mov	r1, r6
 8009216:	4628      	mov	r0, r5
 8009218:	47b8      	blx	r7
 800921a:	3001      	adds	r0, #1
 800921c:	f43f ae6b 	beq.w	8008ef6 <_printf_float+0xc2>
 8009220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	f7f7 fc56 	bl	8000ad8 <__aeabi_dcmpeq>
 800922c:	b9d8      	cbnz	r0, 8009266 <_printf_float+0x432>
 800922e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009230:	f108 0201 	add.w	r2, r8, #1
 8009234:	3b01      	subs	r3, #1
 8009236:	4631      	mov	r1, r6
 8009238:	4628      	mov	r0, r5
 800923a:	47b8      	blx	r7
 800923c:	3001      	adds	r0, #1
 800923e:	d10e      	bne.n	800925e <_printf_float+0x42a>
 8009240:	e659      	b.n	8008ef6 <_printf_float+0xc2>
 8009242:	2301      	movs	r3, #1
 8009244:	4652      	mov	r2, sl
 8009246:	4631      	mov	r1, r6
 8009248:	4628      	mov	r0, r5
 800924a:	47b8      	blx	r7
 800924c:	3001      	adds	r0, #1
 800924e:	f43f ae52 	beq.w	8008ef6 <_printf_float+0xc2>
 8009252:	f108 0801 	add.w	r8, r8, #1
 8009256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009258:	3b01      	subs	r3, #1
 800925a:	4543      	cmp	r3, r8
 800925c:	dcf1      	bgt.n	8009242 <_printf_float+0x40e>
 800925e:	464b      	mov	r3, r9
 8009260:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009264:	e6dc      	b.n	8009020 <_printf_float+0x1ec>
 8009266:	f04f 0800 	mov.w	r8, #0
 800926a:	f104 0a1a 	add.w	sl, r4, #26
 800926e:	e7f2      	b.n	8009256 <_printf_float+0x422>
 8009270:	2301      	movs	r3, #1
 8009272:	4642      	mov	r2, r8
 8009274:	e7df      	b.n	8009236 <_printf_float+0x402>
 8009276:	2301      	movs	r3, #1
 8009278:	464a      	mov	r2, r9
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	f43f ae38 	beq.w	8008ef6 <_printf_float+0xc2>
 8009286:	f108 0801 	add.w	r8, r8, #1
 800928a:	68e3      	ldr	r3, [r4, #12]
 800928c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800928e:	1a5b      	subs	r3, r3, r1
 8009290:	4543      	cmp	r3, r8
 8009292:	dcf0      	bgt.n	8009276 <_printf_float+0x442>
 8009294:	e6fa      	b.n	800908c <_printf_float+0x258>
 8009296:	f04f 0800 	mov.w	r8, #0
 800929a:	f104 0919 	add.w	r9, r4, #25
 800929e:	e7f4      	b.n	800928a <_printf_float+0x456>

080092a0 <_printf_common>:
 80092a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	4616      	mov	r6, r2
 80092a6:	4699      	mov	r9, r3
 80092a8:	688a      	ldr	r2, [r1, #8]
 80092aa:	690b      	ldr	r3, [r1, #16]
 80092ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092b0:	4293      	cmp	r3, r2
 80092b2:	bfb8      	it	lt
 80092b4:	4613      	movlt	r3, r2
 80092b6:	6033      	str	r3, [r6, #0]
 80092b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092bc:	4607      	mov	r7, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	b10a      	cbz	r2, 80092c6 <_printf_common+0x26>
 80092c2:	3301      	adds	r3, #1
 80092c4:	6033      	str	r3, [r6, #0]
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	0699      	lsls	r1, r3, #26
 80092ca:	bf42      	ittt	mi
 80092cc:	6833      	ldrmi	r3, [r6, #0]
 80092ce:	3302      	addmi	r3, #2
 80092d0:	6033      	strmi	r3, [r6, #0]
 80092d2:	6825      	ldr	r5, [r4, #0]
 80092d4:	f015 0506 	ands.w	r5, r5, #6
 80092d8:	d106      	bne.n	80092e8 <_printf_common+0x48>
 80092da:	f104 0a19 	add.w	sl, r4, #25
 80092de:	68e3      	ldr	r3, [r4, #12]
 80092e0:	6832      	ldr	r2, [r6, #0]
 80092e2:	1a9b      	subs	r3, r3, r2
 80092e4:	42ab      	cmp	r3, r5
 80092e6:	dc26      	bgt.n	8009336 <_printf_common+0x96>
 80092e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092ec:	1e13      	subs	r3, r2, #0
 80092ee:	6822      	ldr	r2, [r4, #0]
 80092f0:	bf18      	it	ne
 80092f2:	2301      	movne	r3, #1
 80092f4:	0692      	lsls	r2, r2, #26
 80092f6:	d42b      	bmi.n	8009350 <_printf_common+0xb0>
 80092f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092fc:	4649      	mov	r1, r9
 80092fe:	4638      	mov	r0, r7
 8009300:	47c0      	blx	r8
 8009302:	3001      	adds	r0, #1
 8009304:	d01e      	beq.n	8009344 <_printf_common+0xa4>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	68e5      	ldr	r5, [r4, #12]
 800930a:	6832      	ldr	r2, [r6, #0]
 800930c:	f003 0306 	and.w	r3, r3, #6
 8009310:	2b04      	cmp	r3, #4
 8009312:	bf08      	it	eq
 8009314:	1aad      	subeq	r5, r5, r2
 8009316:	68a3      	ldr	r3, [r4, #8]
 8009318:	6922      	ldr	r2, [r4, #16]
 800931a:	bf0c      	ite	eq
 800931c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009320:	2500      	movne	r5, #0
 8009322:	4293      	cmp	r3, r2
 8009324:	bfc4      	itt	gt
 8009326:	1a9b      	subgt	r3, r3, r2
 8009328:	18ed      	addgt	r5, r5, r3
 800932a:	2600      	movs	r6, #0
 800932c:	341a      	adds	r4, #26
 800932e:	42b5      	cmp	r5, r6
 8009330:	d11a      	bne.n	8009368 <_printf_common+0xc8>
 8009332:	2000      	movs	r0, #0
 8009334:	e008      	b.n	8009348 <_printf_common+0xa8>
 8009336:	2301      	movs	r3, #1
 8009338:	4652      	mov	r2, sl
 800933a:	4649      	mov	r1, r9
 800933c:	4638      	mov	r0, r7
 800933e:	47c0      	blx	r8
 8009340:	3001      	adds	r0, #1
 8009342:	d103      	bne.n	800934c <_printf_common+0xac>
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934c:	3501      	adds	r5, #1
 800934e:	e7c6      	b.n	80092de <_printf_common+0x3e>
 8009350:	18e1      	adds	r1, r4, r3
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	2030      	movs	r0, #48	; 0x30
 8009356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800935a:	4422      	add	r2, r4
 800935c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009364:	3302      	adds	r3, #2
 8009366:	e7c7      	b.n	80092f8 <_printf_common+0x58>
 8009368:	2301      	movs	r3, #1
 800936a:	4622      	mov	r2, r4
 800936c:	4649      	mov	r1, r9
 800936e:	4638      	mov	r0, r7
 8009370:	47c0      	blx	r8
 8009372:	3001      	adds	r0, #1
 8009374:	d0e6      	beq.n	8009344 <_printf_common+0xa4>
 8009376:	3601      	adds	r6, #1
 8009378:	e7d9      	b.n	800932e <_printf_common+0x8e>
	...

0800937c <_printf_i>:
 800937c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009380:	7e0f      	ldrb	r7, [r1, #24]
 8009382:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009384:	2f78      	cmp	r7, #120	; 0x78
 8009386:	4691      	mov	r9, r2
 8009388:	4680      	mov	r8, r0
 800938a:	460c      	mov	r4, r1
 800938c:	469a      	mov	sl, r3
 800938e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009392:	d807      	bhi.n	80093a4 <_printf_i+0x28>
 8009394:	2f62      	cmp	r7, #98	; 0x62
 8009396:	d80a      	bhi.n	80093ae <_printf_i+0x32>
 8009398:	2f00      	cmp	r7, #0
 800939a:	f000 80d8 	beq.w	800954e <_printf_i+0x1d2>
 800939e:	2f58      	cmp	r7, #88	; 0x58
 80093a0:	f000 80a3 	beq.w	80094ea <_printf_i+0x16e>
 80093a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093ac:	e03a      	b.n	8009424 <_printf_i+0xa8>
 80093ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093b2:	2b15      	cmp	r3, #21
 80093b4:	d8f6      	bhi.n	80093a4 <_printf_i+0x28>
 80093b6:	a101      	add	r1, pc, #4	; (adr r1, 80093bc <_printf_i+0x40>)
 80093b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093bc:	08009415 	.word	0x08009415
 80093c0:	08009429 	.word	0x08009429
 80093c4:	080093a5 	.word	0x080093a5
 80093c8:	080093a5 	.word	0x080093a5
 80093cc:	080093a5 	.word	0x080093a5
 80093d0:	080093a5 	.word	0x080093a5
 80093d4:	08009429 	.word	0x08009429
 80093d8:	080093a5 	.word	0x080093a5
 80093dc:	080093a5 	.word	0x080093a5
 80093e0:	080093a5 	.word	0x080093a5
 80093e4:	080093a5 	.word	0x080093a5
 80093e8:	08009535 	.word	0x08009535
 80093ec:	08009459 	.word	0x08009459
 80093f0:	08009517 	.word	0x08009517
 80093f4:	080093a5 	.word	0x080093a5
 80093f8:	080093a5 	.word	0x080093a5
 80093fc:	08009557 	.word	0x08009557
 8009400:	080093a5 	.word	0x080093a5
 8009404:	08009459 	.word	0x08009459
 8009408:	080093a5 	.word	0x080093a5
 800940c:	080093a5 	.word	0x080093a5
 8009410:	0800951f 	.word	0x0800951f
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	1d1a      	adds	r2, r3, #4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	602a      	str	r2, [r5, #0]
 800941c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009424:	2301      	movs	r3, #1
 8009426:	e0a3      	b.n	8009570 <_printf_i+0x1f4>
 8009428:	6820      	ldr	r0, [r4, #0]
 800942a:	6829      	ldr	r1, [r5, #0]
 800942c:	0606      	lsls	r6, r0, #24
 800942e:	f101 0304 	add.w	r3, r1, #4
 8009432:	d50a      	bpl.n	800944a <_printf_i+0xce>
 8009434:	680e      	ldr	r6, [r1, #0]
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	2e00      	cmp	r6, #0
 800943a:	da03      	bge.n	8009444 <_printf_i+0xc8>
 800943c:	232d      	movs	r3, #45	; 0x2d
 800943e:	4276      	negs	r6, r6
 8009440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009444:	485e      	ldr	r0, [pc, #376]	; (80095c0 <_printf_i+0x244>)
 8009446:	230a      	movs	r3, #10
 8009448:	e019      	b.n	800947e <_printf_i+0x102>
 800944a:	680e      	ldr	r6, [r1, #0]
 800944c:	602b      	str	r3, [r5, #0]
 800944e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009452:	bf18      	it	ne
 8009454:	b236      	sxthne	r6, r6
 8009456:	e7ef      	b.n	8009438 <_printf_i+0xbc>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	6820      	ldr	r0, [r4, #0]
 800945c:	1d19      	adds	r1, r3, #4
 800945e:	6029      	str	r1, [r5, #0]
 8009460:	0601      	lsls	r1, r0, #24
 8009462:	d501      	bpl.n	8009468 <_printf_i+0xec>
 8009464:	681e      	ldr	r6, [r3, #0]
 8009466:	e002      	b.n	800946e <_printf_i+0xf2>
 8009468:	0646      	lsls	r6, r0, #25
 800946a:	d5fb      	bpl.n	8009464 <_printf_i+0xe8>
 800946c:	881e      	ldrh	r6, [r3, #0]
 800946e:	4854      	ldr	r0, [pc, #336]	; (80095c0 <_printf_i+0x244>)
 8009470:	2f6f      	cmp	r7, #111	; 0x6f
 8009472:	bf0c      	ite	eq
 8009474:	2308      	moveq	r3, #8
 8009476:	230a      	movne	r3, #10
 8009478:	2100      	movs	r1, #0
 800947a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800947e:	6865      	ldr	r5, [r4, #4]
 8009480:	60a5      	str	r5, [r4, #8]
 8009482:	2d00      	cmp	r5, #0
 8009484:	bfa2      	ittt	ge
 8009486:	6821      	ldrge	r1, [r4, #0]
 8009488:	f021 0104 	bicge.w	r1, r1, #4
 800948c:	6021      	strge	r1, [r4, #0]
 800948e:	b90e      	cbnz	r6, 8009494 <_printf_i+0x118>
 8009490:	2d00      	cmp	r5, #0
 8009492:	d04d      	beq.n	8009530 <_printf_i+0x1b4>
 8009494:	4615      	mov	r5, r2
 8009496:	fbb6 f1f3 	udiv	r1, r6, r3
 800949a:	fb03 6711 	mls	r7, r3, r1, r6
 800949e:	5dc7      	ldrb	r7, [r0, r7]
 80094a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094a4:	4637      	mov	r7, r6
 80094a6:	42bb      	cmp	r3, r7
 80094a8:	460e      	mov	r6, r1
 80094aa:	d9f4      	bls.n	8009496 <_printf_i+0x11a>
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d10b      	bne.n	80094c8 <_printf_i+0x14c>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	07de      	lsls	r6, r3, #31
 80094b4:	d508      	bpl.n	80094c8 <_printf_i+0x14c>
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	6861      	ldr	r1, [r4, #4]
 80094ba:	4299      	cmp	r1, r3
 80094bc:	bfde      	ittt	le
 80094be:	2330      	movle	r3, #48	; 0x30
 80094c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094c8:	1b52      	subs	r2, r2, r5
 80094ca:	6122      	str	r2, [r4, #16]
 80094cc:	f8cd a000 	str.w	sl, [sp]
 80094d0:	464b      	mov	r3, r9
 80094d2:	aa03      	add	r2, sp, #12
 80094d4:	4621      	mov	r1, r4
 80094d6:	4640      	mov	r0, r8
 80094d8:	f7ff fee2 	bl	80092a0 <_printf_common>
 80094dc:	3001      	adds	r0, #1
 80094de:	d14c      	bne.n	800957a <_printf_i+0x1fe>
 80094e0:	f04f 30ff 	mov.w	r0, #4294967295
 80094e4:	b004      	add	sp, #16
 80094e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ea:	4835      	ldr	r0, [pc, #212]	; (80095c0 <_printf_i+0x244>)
 80094ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094f0:	6829      	ldr	r1, [r5, #0]
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80094f8:	6029      	str	r1, [r5, #0]
 80094fa:	061d      	lsls	r5, r3, #24
 80094fc:	d514      	bpl.n	8009528 <_printf_i+0x1ac>
 80094fe:	07df      	lsls	r7, r3, #31
 8009500:	bf44      	itt	mi
 8009502:	f043 0320 	orrmi.w	r3, r3, #32
 8009506:	6023      	strmi	r3, [r4, #0]
 8009508:	b91e      	cbnz	r6, 8009512 <_printf_i+0x196>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	f023 0320 	bic.w	r3, r3, #32
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	2310      	movs	r3, #16
 8009514:	e7b0      	b.n	8009478 <_printf_i+0xfc>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	f043 0320 	orr.w	r3, r3, #32
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	2378      	movs	r3, #120	; 0x78
 8009520:	4828      	ldr	r0, [pc, #160]	; (80095c4 <_printf_i+0x248>)
 8009522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009526:	e7e3      	b.n	80094f0 <_printf_i+0x174>
 8009528:	0659      	lsls	r1, r3, #25
 800952a:	bf48      	it	mi
 800952c:	b2b6      	uxthmi	r6, r6
 800952e:	e7e6      	b.n	80094fe <_printf_i+0x182>
 8009530:	4615      	mov	r5, r2
 8009532:	e7bb      	b.n	80094ac <_printf_i+0x130>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	6826      	ldr	r6, [r4, #0]
 8009538:	6961      	ldr	r1, [r4, #20]
 800953a:	1d18      	adds	r0, r3, #4
 800953c:	6028      	str	r0, [r5, #0]
 800953e:	0635      	lsls	r5, r6, #24
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	d501      	bpl.n	8009548 <_printf_i+0x1cc>
 8009544:	6019      	str	r1, [r3, #0]
 8009546:	e002      	b.n	800954e <_printf_i+0x1d2>
 8009548:	0670      	lsls	r0, r6, #25
 800954a:	d5fb      	bpl.n	8009544 <_printf_i+0x1c8>
 800954c:	8019      	strh	r1, [r3, #0]
 800954e:	2300      	movs	r3, #0
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	4615      	mov	r5, r2
 8009554:	e7ba      	b.n	80094cc <_printf_i+0x150>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	1d1a      	adds	r2, r3, #4
 800955a:	602a      	str	r2, [r5, #0]
 800955c:	681d      	ldr	r5, [r3, #0]
 800955e:	6862      	ldr	r2, [r4, #4]
 8009560:	2100      	movs	r1, #0
 8009562:	4628      	mov	r0, r5
 8009564:	f7f6 fe44 	bl	80001f0 <memchr>
 8009568:	b108      	cbz	r0, 800956e <_printf_i+0x1f2>
 800956a:	1b40      	subs	r0, r0, r5
 800956c:	6060      	str	r0, [r4, #4]
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	6123      	str	r3, [r4, #16]
 8009572:	2300      	movs	r3, #0
 8009574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009578:	e7a8      	b.n	80094cc <_printf_i+0x150>
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	462a      	mov	r2, r5
 800957e:	4649      	mov	r1, r9
 8009580:	4640      	mov	r0, r8
 8009582:	47d0      	blx	sl
 8009584:	3001      	adds	r0, #1
 8009586:	d0ab      	beq.n	80094e0 <_printf_i+0x164>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	079b      	lsls	r3, r3, #30
 800958c:	d413      	bmi.n	80095b6 <_printf_i+0x23a>
 800958e:	68e0      	ldr	r0, [r4, #12]
 8009590:	9b03      	ldr	r3, [sp, #12]
 8009592:	4298      	cmp	r0, r3
 8009594:	bfb8      	it	lt
 8009596:	4618      	movlt	r0, r3
 8009598:	e7a4      	b.n	80094e4 <_printf_i+0x168>
 800959a:	2301      	movs	r3, #1
 800959c:	4632      	mov	r2, r6
 800959e:	4649      	mov	r1, r9
 80095a0:	4640      	mov	r0, r8
 80095a2:	47d0      	blx	sl
 80095a4:	3001      	adds	r0, #1
 80095a6:	d09b      	beq.n	80094e0 <_printf_i+0x164>
 80095a8:	3501      	adds	r5, #1
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	9903      	ldr	r1, [sp, #12]
 80095ae:	1a5b      	subs	r3, r3, r1
 80095b0:	42ab      	cmp	r3, r5
 80095b2:	dcf2      	bgt.n	800959a <_printf_i+0x21e>
 80095b4:	e7eb      	b.n	800958e <_printf_i+0x212>
 80095b6:	2500      	movs	r5, #0
 80095b8:	f104 0619 	add.w	r6, r4, #25
 80095bc:	e7f5      	b.n	80095aa <_printf_i+0x22e>
 80095be:	bf00      	nop
 80095c0:	0800fc44 	.word	0x0800fc44
 80095c4:	0800fc55 	.word	0x0800fc55

080095c8 <_scanf_float>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	b087      	sub	sp, #28
 80095ce:	4617      	mov	r7, r2
 80095d0:	9303      	str	r3, [sp, #12]
 80095d2:	688b      	ldr	r3, [r1, #8]
 80095d4:	1e5a      	subs	r2, r3, #1
 80095d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80095da:	bf83      	ittte	hi
 80095dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80095e0:	195b      	addhi	r3, r3, r5
 80095e2:	9302      	strhi	r3, [sp, #8]
 80095e4:	2300      	movls	r3, #0
 80095e6:	bf86      	itte	hi
 80095e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095ec:	608b      	strhi	r3, [r1, #8]
 80095ee:	9302      	strls	r3, [sp, #8]
 80095f0:	680b      	ldr	r3, [r1, #0]
 80095f2:	468b      	mov	fp, r1
 80095f4:	2500      	movs	r5, #0
 80095f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80095fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80095fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009602:	4680      	mov	r8, r0
 8009604:	460c      	mov	r4, r1
 8009606:	465e      	mov	r6, fp
 8009608:	46aa      	mov	sl, r5
 800960a:	46a9      	mov	r9, r5
 800960c:	9501      	str	r5, [sp, #4]
 800960e:	68a2      	ldr	r2, [r4, #8]
 8009610:	b152      	cbz	r2, 8009628 <_scanf_float+0x60>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b4e      	cmp	r3, #78	; 0x4e
 8009618:	d864      	bhi.n	80096e4 <_scanf_float+0x11c>
 800961a:	2b40      	cmp	r3, #64	; 0x40
 800961c:	d83c      	bhi.n	8009698 <_scanf_float+0xd0>
 800961e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009622:	b2c8      	uxtb	r0, r1
 8009624:	280e      	cmp	r0, #14
 8009626:	d93a      	bls.n	800969e <_scanf_float+0xd6>
 8009628:	f1b9 0f00 	cmp.w	r9, #0
 800962c:	d003      	beq.n	8009636 <_scanf_float+0x6e>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800963a:	f1ba 0f01 	cmp.w	sl, #1
 800963e:	f200 8113 	bhi.w	8009868 <_scanf_float+0x2a0>
 8009642:	455e      	cmp	r6, fp
 8009644:	f200 8105 	bhi.w	8009852 <_scanf_float+0x28a>
 8009648:	2501      	movs	r5, #1
 800964a:	4628      	mov	r0, r5
 800964c:	b007      	add	sp, #28
 800964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009652:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009656:	2a0d      	cmp	r2, #13
 8009658:	d8e6      	bhi.n	8009628 <_scanf_float+0x60>
 800965a:	a101      	add	r1, pc, #4	; (adr r1, 8009660 <_scanf_float+0x98>)
 800965c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009660:	0800979f 	.word	0x0800979f
 8009664:	08009629 	.word	0x08009629
 8009668:	08009629 	.word	0x08009629
 800966c:	08009629 	.word	0x08009629
 8009670:	080097ff 	.word	0x080097ff
 8009674:	080097d7 	.word	0x080097d7
 8009678:	08009629 	.word	0x08009629
 800967c:	08009629 	.word	0x08009629
 8009680:	080097ad 	.word	0x080097ad
 8009684:	08009629 	.word	0x08009629
 8009688:	08009629 	.word	0x08009629
 800968c:	08009629 	.word	0x08009629
 8009690:	08009629 	.word	0x08009629
 8009694:	08009765 	.word	0x08009765
 8009698:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800969c:	e7db      	b.n	8009656 <_scanf_float+0x8e>
 800969e:	290e      	cmp	r1, #14
 80096a0:	d8c2      	bhi.n	8009628 <_scanf_float+0x60>
 80096a2:	a001      	add	r0, pc, #4	; (adr r0, 80096a8 <_scanf_float+0xe0>)
 80096a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80096a8:	08009757 	.word	0x08009757
 80096ac:	08009629 	.word	0x08009629
 80096b0:	08009757 	.word	0x08009757
 80096b4:	080097eb 	.word	0x080097eb
 80096b8:	08009629 	.word	0x08009629
 80096bc:	08009705 	.word	0x08009705
 80096c0:	08009741 	.word	0x08009741
 80096c4:	08009741 	.word	0x08009741
 80096c8:	08009741 	.word	0x08009741
 80096cc:	08009741 	.word	0x08009741
 80096d0:	08009741 	.word	0x08009741
 80096d4:	08009741 	.word	0x08009741
 80096d8:	08009741 	.word	0x08009741
 80096dc:	08009741 	.word	0x08009741
 80096e0:	08009741 	.word	0x08009741
 80096e4:	2b6e      	cmp	r3, #110	; 0x6e
 80096e6:	d809      	bhi.n	80096fc <_scanf_float+0x134>
 80096e8:	2b60      	cmp	r3, #96	; 0x60
 80096ea:	d8b2      	bhi.n	8009652 <_scanf_float+0x8a>
 80096ec:	2b54      	cmp	r3, #84	; 0x54
 80096ee:	d077      	beq.n	80097e0 <_scanf_float+0x218>
 80096f0:	2b59      	cmp	r3, #89	; 0x59
 80096f2:	d199      	bne.n	8009628 <_scanf_float+0x60>
 80096f4:	2d07      	cmp	r5, #7
 80096f6:	d197      	bne.n	8009628 <_scanf_float+0x60>
 80096f8:	2508      	movs	r5, #8
 80096fa:	e029      	b.n	8009750 <_scanf_float+0x188>
 80096fc:	2b74      	cmp	r3, #116	; 0x74
 80096fe:	d06f      	beq.n	80097e0 <_scanf_float+0x218>
 8009700:	2b79      	cmp	r3, #121	; 0x79
 8009702:	e7f6      	b.n	80096f2 <_scanf_float+0x12a>
 8009704:	6821      	ldr	r1, [r4, #0]
 8009706:	05c8      	lsls	r0, r1, #23
 8009708:	d51a      	bpl.n	8009740 <_scanf_float+0x178>
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009710:	6021      	str	r1, [r4, #0]
 8009712:	f109 0901 	add.w	r9, r9, #1
 8009716:	b11b      	cbz	r3, 8009720 <_scanf_float+0x158>
 8009718:	3b01      	subs	r3, #1
 800971a:	3201      	adds	r2, #1
 800971c:	9302      	str	r3, [sp, #8]
 800971e:	60a2      	str	r2, [r4, #8]
 8009720:	68a3      	ldr	r3, [r4, #8]
 8009722:	3b01      	subs	r3, #1
 8009724:	60a3      	str	r3, [r4, #8]
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	3301      	adds	r3, #1
 800972a:	6123      	str	r3, [r4, #16]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3b01      	subs	r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	607b      	str	r3, [r7, #4]
 8009734:	f340 8084 	ble.w	8009840 <_scanf_float+0x278>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	3301      	adds	r3, #1
 800973c:	603b      	str	r3, [r7, #0]
 800973e:	e766      	b.n	800960e <_scanf_float+0x46>
 8009740:	eb1a 0f05 	cmn.w	sl, r5
 8009744:	f47f af70 	bne.w	8009628 <_scanf_float+0x60>
 8009748:	6822      	ldr	r2, [r4, #0]
 800974a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800974e:	6022      	str	r2, [r4, #0]
 8009750:	f806 3b01 	strb.w	r3, [r6], #1
 8009754:	e7e4      	b.n	8009720 <_scanf_float+0x158>
 8009756:	6822      	ldr	r2, [r4, #0]
 8009758:	0610      	lsls	r0, r2, #24
 800975a:	f57f af65 	bpl.w	8009628 <_scanf_float+0x60>
 800975e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009762:	e7f4      	b.n	800974e <_scanf_float+0x186>
 8009764:	f1ba 0f00 	cmp.w	sl, #0
 8009768:	d10e      	bne.n	8009788 <_scanf_float+0x1c0>
 800976a:	f1b9 0f00 	cmp.w	r9, #0
 800976e:	d10e      	bne.n	800978e <_scanf_float+0x1c6>
 8009770:	6822      	ldr	r2, [r4, #0]
 8009772:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009776:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800977a:	d108      	bne.n	800978e <_scanf_float+0x1c6>
 800977c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009780:	6022      	str	r2, [r4, #0]
 8009782:	f04f 0a01 	mov.w	sl, #1
 8009786:	e7e3      	b.n	8009750 <_scanf_float+0x188>
 8009788:	f1ba 0f02 	cmp.w	sl, #2
 800978c:	d055      	beq.n	800983a <_scanf_float+0x272>
 800978e:	2d01      	cmp	r5, #1
 8009790:	d002      	beq.n	8009798 <_scanf_float+0x1d0>
 8009792:	2d04      	cmp	r5, #4
 8009794:	f47f af48 	bne.w	8009628 <_scanf_float+0x60>
 8009798:	3501      	adds	r5, #1
 800979a:	b2ed      	uxtb	r5, r5
 800979c:	e7d8      	b.n	8009750 <_scanf_float+0x188>
 800979e:	f1ba 0f01 	cmp.w	sl, #1
 80097a2:	f47f af41 	bne.w	8009628 <_scanf_float+0x60>
 80097a6:	f04f 0a02 	mov.w	sl, #2
 80097aa:	e7d1      	b.n	8009750 <_scanf_float+0x188>
 80097ac:	b97d      	cbnz	r5, 80097ce <_scanf_float+0x206>
 80097ae:	f1b9 0f00 	cmp.w	r9, #0
 80097b2:	f47f af3c 	bne.w	800962e <_scanf_float+0x66>
 80097b6:	6822      	ldr	r2, [r4, #0]
 80097b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097c0:	f47f af39 	bne.w	8009636 <_scanf_float+0x6e>
 80097c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097c8:	6022      	str	r2, [r4, #0]
 80097ca:	2501      	movs	r5, #1
 80097cc:	e7c0      	b.n	8009750 <_scanf_float+0x188>
 80097ce:	2d03      	cmp	r5, #3
 80097d0:	d0e2      	beq.n	8009798 <_scanf_float+0x1d0>
 80097d2:	2d05      	cmp	r5, #5
 80097d4:	e7de      	b.n	8009794 <_scanf_float+0x1cc>
 80097d6:	2d02      	cmp	r5, #2
 80097d8:	f47f af26 	bne.w	8009628 <_scanf_float+0x60>
 80097dc:	2503      	movs	r5, #3
 80097de:	e7b7      	b.n	8009750 <_scanf_float+0x188>
 80097e0:	2d06      	cmp	r5, #6
 80097e2:	f47f af21 	bne.w	8009628 <_scanf_float+0x60>
 80097e6:	2507      	movs	r5, #7
 80097e8:	e7b2      	b.n	8009750 <_scanf_float+0x188>
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	0591      	lsls	r1, r2, #22
 80097ee:	f57f af1b 	bpl.w	8009628 <_scanf_float+0x60>
 80097f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80097fc:	e7a8      	b.n	8009750 <_scanf_float+0x188>
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009804:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009808:	d006      	beq.n	8009818 <_scanf_float+0x250>
 800980a:	0550      	lsls	r0, r2, #21
 800980c:	f57f af0c 	bpl.w	8009628 <_scanf_float+0x60>
 8009810:	f1b9 0f00 	cmp.w	r9, #0
 8009814:	f43f af0f 	beq.w	8009636 <_scanf_float+0x6e>
 8009818:	0591      	lsls	r1, r2, #22
 800981a:	bf58      	it	pl
 800981c:	9901      	ldrpl	r1, [sp, #4]
 800981e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009822:	bf58      	it	pl
 8009824:	eba9 0101 	subpl.w	r1, r9, r1
 8009828:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800982c:	bf58      	it	pl
 800982e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009832:	6022      	str	r2, [r4, #0]
 8009834:	f04f 0900 	mov.w	r9, #0
 8009838:	e78a      	b.n	8009750 <_scanf_float+0x188>
 800983a:	f04f 0a03 	mov.w	sl, #3
 800983e:	e787      	b.n	8009750 <_scanf_float+0x188>
 8009840:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009844:	4639      	mov	r1, r7
 8009846:	4640      	mov	r0, r8
 8009848:	4798      	blx	r3
 800984a:	2800      	cmp	r0, #0
 800984c:	f43f aedf 	beq.w	800960e <_scanf_float+0x46>
 8009850:	e6ea      	b.n	8009628 <_scanf_float+0x60>
 8009852:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009856:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800985a:	463a      	mov	r2, r7
 800985c:	4640      	mov	r0, r8
 800985e:	4798      	blx	r3
 8009860:	6923      	ldr	r3, [r4, #16]
 8009862:	3b01      	subs	r3, #1
 8009864:	6123      	str	r3, [r4, #16]
 8009866:	e6ec      	b.n	8009642 <_scanf_float+0x7a>
 8009868:	1e6b      	subs	r3, r5, #1
 800986a:	2b06      	cmp	r3, #6
 800986c:	d825      	bhi.n	80098ba <_scanf_float+0x2f2>
 800986e:	2d02      	cmp	r5, #2
 8009870:	d836      	bhi.n	80098e0 <_scanf_float+0x318>
 8009872:	455e      	cmp	r6, fp
 8009874:	f67f aee8 	bls.w	8009648 <_scanf_float+0x80>
 8009878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800987c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009880:	463a      	mov	r2, r7
 8009882:	4640      	mov	r0, r8
 8009884:	4798      	blx	r3
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	3b01      	subs	r3, #1
 800988a:	6123      	str	r3, [r4, #16]
 800988c:	e7f1      	b.n	8009872 <_scanf_float+0x2aa>
 800988e:	9802      	ldr	r0, [sp, #8]
 8009890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009894:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009898:	9002      	str	r0, [sp, #8]
 800989a:	463a      	mov	r2, r7
 800989c:	4640      	mov	r0, r8
 800989e:	4798      	blx	r3
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098aa:	fa5f fa8a 	uxtb.w	sl, sl
 80098ae:	f1ba 0f02 	cmp.w	sl, #2
 80098b2:	d1ec      	bne.n	800988e <_scanf_float+0x2c6>
 80098b4:	3d03      	subs	r5, #3
 80098b6:	b2ed      	uxtb	r5, r5
 80098b8:	1b76      	subs	r6, r6, r5
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	05da      	lsls	r2, r3, #23
 80098be:	d52f      	bpl.n	8009920 <_scanf_float+0x358>
 80098c0:	055b      	lsls	r3, r3, #21
 80098c2:	d510      	bpl.n	80098e6 <_scanf_float+0x31e>
 80098c4:	455e      	cmp	r6, fp
 80098c6:	f67f aebf 	bls.w	8009648 <_scanf_float+0x80>
 80098ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098d2:	463a      	mov	r2, r7
 80098d4:	4640      	mov	r0, r8
 80098d6:	4798      	blx	r3
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	3b01      	subs	r3, #1
 80098dc:	6123      	str	r3, [r4, #16]
 80098de:	e7f1      	b.n	80098c4 <_scanf_float+0x2fc>
 80098e0:	46aa      	mov	sl, r5
 80098e2:	9602      	str	r6, [sp, #8]
 80098e4:	e7df      	b.n	80098a6 <_scanf_float+0x2de>
 80098e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098ea:	6923      	ldr	r3, [r4, #16]
 80098ec:	2965      	cmp	r1, #101	; 0x65
 80098ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80098f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	d00c      	beq.n	8009914 <_scanf_float+0x34c>
 80098fa:	2945      	cmp	r1, #69	; 0x45
 80098fc:	d00a      	beq.n	8009914 <_scanf_float+0x34c>
 80098fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009902:	463a      	mov	r2, r7
 8009904:	4640      	mov	r0, r8
 8009906:	4798      	blx	r3
 8009908:	6923      	ldr	r3, [r4, #16]
 800990a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800990e:	3b01      	subs	r3, #1
 8009910:	1eb5      	subs	r5, r6, #2
 8009912:	6123      	str	r3, [r4, #16]
 8009914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009918:	463a      	mov	r2, r7
 800991a:	4640      	mov	r0, r8
 800991c:	4798      	blx	r3
 800991e:	462e      	mov	r6, r5
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	f015 0510 	ands.w	r5, r5, #16
 8009926:	d159      	bne.n	80099dc <_scanf_float+0x414>
 8009928:	7035      	strb	r5, [r6, #0]
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009934:	d11b      	bne.n	800996e <_scanf_float+0x3a6>
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	454b      	cmp	r3, r9
 800993a:	eba3 0209 	sub.w	r2, r3, r9
 800993e:	d123      	bne.n	8009988 <_scanf_float+0x3c0>
 8009940:	2200      	movs	r2, #0
 8009942:	4659      	mov	r1, fp
 8009944:	4640      	mov	r0, r8
 8009946:	f000 ff2d 	bl	800a7a4 <_strtod_r>
 800994a:	6822      	ldr	r2, [r4, #0]
 800994c:	9b03      	ldr	r3, [sp, #12]
 800994e:	f012 0f02 	tst.w	r2, #2
 8009952:	ec57 6b10 	vmov	r6, r7, d0
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	d021      	beq.n	800999e <_scanf_float+0x3d6>
 800995a:	9903      	ldr	r1, [sp, #12]
 800995c:	1d1a      	adds	r2, r3, #4
 800995e:	600a      	str	r2, [r1, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	e9c3 6700 	strd	r6, r7, [r3]
 8009966:	68e3      	ldr	r3, [r4, #12]
 8009968:	3301      	adds	r3, #1
 800996a:	60e3      	str	r3, [r4, #12]
 800996c:	e66d      	b.n	800964a <_scanf_float+0x82>
 800996e:	9b04      	ldr	r3, [sp, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d0e5      	beq.n	8009940 <_scanf_float+0x378>
 8009974:	9905      	ldr	r1, [sp, #20]
 8009976:	230a      	movs	r3, #10
 8009978:	462a      	mov	r2, r5
 800997a:	3101      	adds	r1, #1
 800997c:	4640      	mov	r0, r8
 800997e:	f000 ff99 	bl	800a8b4 <_strtol_r>
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	9e05      	ldr	r6, [sp, #20]
 8009986:	1ac2      	subs	r2, r0, r3
 8009988:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800998c:	429e      	cmp	r6, r3
 800998e:	bf28      	it	cs
 8009990:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009994:	4912      	ldr	r1, [pc, #72]	; (80099e0 <_scanf_float+0x418>)
 8009996:	4630      	mov	r0, r6
 8009998:	f000 f83c 	bl	8009a14 <siprintf>
 800999c:	e7d0      	b.n	8009940 <_scanf_float+0x378>
 800999e:	9903      	ldr	r1, [sp, #12]
 80099a0:	f012 0f04 	tst.w	r2, #4
 80099a4:	f103 0204 	add.w	r2, r3, #4
 80099a8:	600a      	str	r2, [r1, #0]
 80099aa:	d1d9      	bne.n	8009960 <_scanf_float+0x398>
 80099ac:	f8d3 8000 	ldr.w	r8, [r3]
 80099b0:	ee10 2a10 	vmov	r2, s0
 80099b4:	ee10 0a10 	vmov	r0, s0
 80099b8:	463b      	mov	r3, r7
 80099ba:	4639      	mov	r1, r7
 80099bc:	f7f7 f8be 	bl	8000b3c <__aeabi_dcmpun>
 80099c0:	b128      	cbz	r0, 80099ce <_scanf_float+0x406>
 80099c2:	4808      	ldr	r0, [pc, #32]	; (80099e4 <_scanf_float+0x41c>)
 80099c4:	f000 f820 	bl	8009a08 <nanf>
 80099c8:	ed88 0a00 	vstr	s0, [r8]
 80099cc:	e7cb      	b.n	8009966 <_scanf_float+0x39e>
 80099ce:	4630      	mov	r0, r6
 80099d0:	4639      	mov	r1, r7
 80099d2:	f7f7 f911 	bl	8000bf8 <__aeabi_d2f>
 80099d6:	f8c8 0000 	str.w	r0, [r8]
 80099da:	e7c4      	b.n	8009966 <_scanf_float+0x39e>
 80099dc:	2500      	movs	r5, #0
 80099de:	e634      	b.n	800964a <_scanf_float+0x82>
 80099e0:	0800fc66 	.word	0x0800fc66
 80099e4:	0801008b 	.word	0x0801008b

080099e8 <_sbrk_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d06      	ldr	r5, [pc, #24]	; (8009a04 <_sbrk_r+0x1c>)
 80099ec:	2300      	movs	r3, #0
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	f7fa f8aa 	bl	8003b4c <_sbrk>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_sbrk_r+0x1a>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_sbrk_r+0x1a>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	20000b68 	.word	0x20000b68

08009a08 <nanf>:
 8009a08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a10 <nanf+0x8>
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	7fc00000 	.word	0x7fc00000

08009a14 <siprintf>:
 8009a14:	b40e      	push	{r1, r2, r3}
 8009a16:	b500      	push	{lr}
 8009a18:	b09c      	sub	sp, #112	; 0x70
 8009a1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a1c:	9002      	str	r0, [sp, #8]
 8009a1e:	9006      	str	r0, [sp, #24]
 8009a20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a24:	4809      	ldr	r0, [pc, #36]	; (8009a4c <siprintf+0x38>)
 8009a26:	9107      	str	r1, [sp, #28]
 8009a28:	9104      	str	r1, [sp, #16]
 8009a2a:	4909      	ldr	r1, [pc, #36]	; (8009a50 <siprintf+0x3c>)
 8009a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a30:	9105      	str	r1, [sp, #20]
 8009a32:	6800      	ldr	r0, [r0, #0]
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	a902      	add	r1, sp, #8
 8009a38:	f002 feb2 	bl	800c7a0 <_svfiprintf_r>
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	b01c      	add	sp, #112	; 0x70
 8009a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a48:	b003      	add	sp, #12
 8009a4a:	4770      	bx	lr
 8009a4c:	2000007c 	.word	0x2000007c
 8009a50:	ffff0208 	.word	0xffff0208

08009a54 <siscanf>:
 8009a54:	b40e      	push	{r1, r2, r3}
 8009a56:	b510      	push	{r4, lr}
 8009a58:	b09f      	sub	sp, #124	; 0x7c
 8009a5a:	ac21      	add	r4, sp, #132	; 0x84
 8009a5c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009a60:	f854 2b04 	ldr.w	r2, [r4], #4
 8009a64:	9201      	str	r2, [sp, #4]
 8009a66:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009a6a:	9004      	str	r0, [sp, #16]
 8009a6c:	9008      	str	r0, [sp, #32]
 8009a6e:	f7f6 fbb7 	bl	80001e0 <strlen>
 8009a72:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <siscanf+0x50>)
 8009a74:	9005      	str	r0, [sp, #20]
 8009a76:	9009      	str	r0, [sp, #36]	; 0x24
 8009a78:	930d      	str	r3, [sp, #52]	; 0x34
 8009a7a:	480b      	ldr	r0, [pc, #44]	; (8009aa8 <siscanf+0x54>)
 8009a7c:	9a01      	ldr	r2, [sp, #4]
 8009a7e:	6800      	ldr	r0, [r0, #0]
 8009a80:	9403      	str	r4, [sp, #12]
 8009a82:	2300      	movs	r3, #0
 8009a84:	9311      	str	r3, [sp, #68]	; 0x44
 8009a86:	9316      	str	r3, [sp, #88]	; 0x58
 8009a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009a90:	a904      	add	r1, sp, #16
 8009a92:	4623      	mov	r3, r4
 8009a94:	f002 ffde 	bl	800ca54 <__ssvfiscanf_r>
 8009a98:	b01f      	add	sp, #124	; 0x7c
 8009a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a9e:	b003      	add	sp, #12
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	08009acf 	.word	0x08009acf
 8009aa8:	2000007c 	.word	0x2000007c

08009aac <__sread>:
 8009aac:	b510      	push	{r4, lr}
 8009aae:	460c      	mov	r4, r1
 8009ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab4:	f003 fa98 	bl	800cfe8 <_read_r>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	bfab      	itete	ge
 8009abc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009abe:	89a3      	ldrhlt	r3, [r4, #12]
 8009ac0:	181b      	addge	r3, r3, r0
 8009ac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ac6:	bfac      	ite	ge
 8009ac8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009aca:	81a3      	strhlt	r3, [r4, #12]
 8009acc:	bd10      	pop	{r4, pc}

08009ace <__seofread>:
 8009ace:	2000      	movs	r0, #0
 8009ad0:	4770      	bx	lr

08009ad2 <__swrite>:
 8009ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad6:	461f      	mov	r7, r3
 8009ad8:	898b      	ldrh	r3, [r1, #12]
 8009ada:	05db      	lsls	r3, r3, #23
 8009adc:	4605      	mov	r5, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	d505      	bpl.n	8009af0 <__swrite+0x1e>
 8009ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae8:	2302      	movs	r3, #2
 8009aea:	2200      	movs	r2, #0
 8009aec:	f002 f8f6 	bl	800bcdc <_lseek_r>
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009af6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009afa:	81a3      	strh	r3, [r4, #12]
 8009afc:	4632      	mov	r2, r6
 8009afe:	463b      	mov	r3, r7
 8009b00:	4628      	mov	r0, r5
 8009b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b06:	f000 bed7 	b.w	800a8b8 <_write_r>

08009b0a <__sseek>:
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b12:	f002 f8e3 	bl	800bcdc <_lseek_r>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	bf15      	itete	ne
 8009b1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b26:	81a3      	strheq	r3, [r4, #12]
 8009b28:	bf18      	it	ne
 8009b2a:	81a3      	strhne	r3, [r4, #12]
 8009b2c:	bd10      	pop	{r4, pc}

08009b2e <__sclose>:
 8009b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b32:	f000 bed3 	b.w	800a8dc <_close_r>

08009b36 <strncmp>:
 8009b36:	b510      	push	{r4, lr}
 8009b38:	b17a      	cbz	r2, 8009b5a <strncmp+0x24>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	3901      	subs	r1, #1
 8009b3e:	1884      	adds	r4, r0, r2
 8009b40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b48:	4290      	cmp	r0, r2
 8009b4a:	d101      	bne.n	8009b50 <strncmp+0x1a>
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	d101      	bne.n	8009b54 <strncmp+0x1e>
 8009b50:	1a80      	subs	r0, r0, r2
 8009b52:	bd10      	pop	{r4, pc}
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d1f3      	bne.n	8009b40 <strncmp+0xa>
 8009b58:	e7fa      	b.n	8009b50 <strncmp+0x1a>
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	e7f9      	b.n	8009b52 <strncmp+0x1c>

08009b5e <sulp>:
 8009b5e:	b570      	push	{r4, r5, r6, lr}
 8009b60:	4604      	mov	r4, r0
 8009b62:	460d      	mov	r5, r1
 8009b64:	ec45 4b10 	vmov	d0, r4, r5
 8009b68:	4616      	mov	r6, r2
 8009b6a:	f002 fc59 	bl	800c420 <__ulp>
 8009b6e:	ec51 0b10 	vmov	r0, r1, d0
 8009b72:	b17e      	cbz	r6, 8009b94 <sulp+0x36>
 8009b74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009b78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	dd09      	ble.n	8009b94 <sulp+0x36>
 8009b80:	051b      	lsls	r3, r3, #20
 8009b82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b86:	2400      	movs	r4, #0
 8009b88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	462b      	mov	r3, r5
 8009b90:	f7f6 fd3a 	bl	8000608 <__aeabi_dmul>
 8009b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b98 <_strtod_l>:
 8009b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9c:	ed2d 8b02 	vpush	{d8}
 8009ba0:	b09d      	sub	sp, #116	; 0x74
 8009ba2:	461f      	mov	r7, r3
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9318      	str	r3, [sp, #96]	; 0x60
 8009ba8:	4ba2      	ldr	r3, [pc, #648]	; (8009e34 <_strtod_l+0x29c>)
 8009baa:	9213      	str	r2, [sp, #76]	; 0x4c
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	9305      	str	r3, [sp, #20]
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	4688      	mov	r8, r1
 8009bb6:	f7f6 fb13 	bl	80001e0 <strlen>
 8009bba:	f04f 0a00 	mov.w	sl, #0
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	f04f 0b00 	mov.w	fp, #0
 8009bc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009bc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bca:	781a      	ldrb	r2, [r3, #0]
 8009bcc:	2a2b      	cmp	r2, #43	; 0x2b
 8009bce:	d04e      	beq.n	8009c6e <_strtod_l+0xd6>
 8009bd0:	d83b      	bhi.n	8009c4a <_strtod_l+0xb2>
 8009bd2:	2a0d      	cmp	r2, #13
 8009bd4:	d834      	bhi.n	8009c40 <_strtod_l+0xa8>
 8009bd6:	2a08      	cmp	r2, #8
 8009bd8:	d834      	bhi.n	8009c44 <_strtod_l+0xac>
 8009bda:	2a00      	cmp	r2, #0
 8009bdc:	d03e      	beq.n	8009c5c <_strtod_l+0xc4>
 8009bde:	2300      	movs	r3, #0
 8009be0:	930a      	str	r3, [sp, #40]	; 0x28
 8009be2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009be4:	7833      	ldrb	r3, [r6, #0]
 8009be6:	2b30      	cmp	r3, #48	; 0x30
 8009be8:	f040 80b0 	bne.w	8009d4c <_strtod_l+0x1b4>
 8009bec:	7873      	ldrb	r3, [r6, #1]
 8009bee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bf2:	2b58      	cmp	r3, #88	; 0x58
 8009bf4:	d168      	bne.n	8009cc8 <_strtod_l+0x130>
 8009bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf8:	9301      	str	r3, [sp, #4]
 8009bfa:	ab18      	add	r3, sp, #96	; 0x60
 8009bfc:	9702      	str	r7, [sp, #8]
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	4a8d      	ldr	r2, [pc, #564]	; (8009e38 <_strtod_l+0x2a0>)
 8009c02:	ab19      	add	r3, sp, #100	; 0x64
 8009c04:	a917      	add	r1, sp, #92	; 0x5c
 8009c06:	4620      	mov	r0, r4
 8009c08:	f001 fd5c 	bl	800b6c4 <__gethex>
 8009c0c:	f010 0707 	ands.w	r7, r0, #7
 8009c10:	4605      	mov	r5, r0
 8009c12:	d005      	beq.n	8009c20 <_strtod_l+0x88>
 8009c14:	2f06      	cmp	r7, #6
 8009c16:	d12c      	bne.n	8009c72 <_strtod_l+0xda>
 8009c18:	3601      	adds	r6, #1
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9617      	str	r6, [sp, #92]	; 0x5c
 8009c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f040 8590 	bne.w	800a748 <_strtod_l+0xbb0>
 8009c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c2a:	b1eb      	cbz	r3, 8009c68 <_strtod_l+0xd0>
 8009c2c:	4652      	mov	r2, sl
 8009c2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c32:	ec43 2b10 	vmov	d0, r2, r3
 8009c36:	b01d      	add	sp, #116	; 0x74
 8009c38:	ecbd 8b02 	vpop	{d8}
 8009c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c40:	2a20      	cmp	r2, #32
 8009c42:	d1cc      	bne.n	8009bde <_strtod_l+0x46>
 8009c44:	3301      	adds	r3, #1
 8009c46:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c48:	e7be      	b.n	8009bc8 <_strtod_l+0x30>
 8009c4a:	2a2d      	cmp	r2, #45	; 0x2d
 8009c4c:	d1c7      	bne.n	8009bde <_strtod_l+0x46>
 8009c4e:	2201      	movs	r2, #1
 8009c50:	920a      	str	r2, [sp, #40]	; 0x28
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c56:	785b      	ldrb	r3, [r3, #1]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1c2      	bne.n	8009be2 <_strtod_l+0x4a>
 8009c5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c5e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f040 856e 	bne.w	800a744 <_strtod_l+0xbac>
 8009c68:	4652      	mov	r2, sl
 8009c6a:	465b      	mov	r3, fp
 8009c6c:	e7e1      	b.n	8009c32 <_strtod_l+0x9a>
 8009c6e:	2200      	movs	r2, #0
 8009c70:	e7ee      	b.n	8009c50 <_strtod_l+0xb8>
 8009c72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c74:	b13a      	cbz	r2, 8009c86 <_strtod_l+0xee>
 8009c76:	2135      	movs	r1, #53	; 0x35
 8009c78:	a81a      	add	r0, sp, #104	; 0x68
 8009c7a:	f002 fcdc 	bl	800c636 <__copybits>
 8009c7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c80:	4620      	mov	r0, r4
 8009c82:	f002 f89b 	bl	800bdbc <_Bfree>
 8009c86:	3f01      	subs	r7, #1
 8009c88:	2f04      	cmp	r7, #4
 8009c8a:	d806      	bhi.n	8009c9a <_strtod_l+0x102>
 8009c8c:	e8df f007 	tbb	[pc, r7]
 8009c90:	1714030a 	.word	0x1714030a
 8009c94:	0a          	.byte	0x0a
 8009c95:	00          	.byte	0x00
 8009c96:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009c9a:	0728      	lsls	r0, r5, #28
 8009c9c:	d5c0      	bpl.n	8009c20 <_strtod_l+0x88>
 8009c9e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009ca2:	e7bd      	b.n	8009c20 <_strtod_l+0x88>
 8009ca4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009ca8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009caa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009cae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009cb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009cb6:	e7f0      	b.n	8009c9a <_strtod_l+0x102>
 8009cb8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009e3c <_strtod_l+0x2a4>
 8009cbc:	e7ed      	b.n	8009c9a <_strtod_l+0x102>
 8009cbe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009cc2:	f04f 3aff 	mov.w	sl, #4294967295
 8009cc6:	e7e8      	b.n	8009c9a <_strtod_l+0x102>
 8009cc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	9217      	str	r2, [sp, #92]	; 0x5c
 8009cce:	785b      	ldrb	r3, [r3, #1]
 8009cd0:	2b30      	cmp	r3, #48	; 0x30
 8009cd2:	d0f9      	beq.n	8009cc8 <_strtod_l+0x130>
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0a3      	beq.n	8009c20 <_strtod_l+0x88>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f04f 0900 	mov.w	r9, #0
 8009cde:	9304      	str	r3, [sp, #16]
 8009ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ce2:	9308      	str	r3, [sp, #32]
 8009ce4:	f8cd 901c 	str.w	r9, [sp, #28]
 8009ce8:	464f      	mov	r7, r9
 8009cea:	220a      	movs	r2, #10
 8009cec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009cee:	7806      	ldrb	r6, [r0, #0]
 8009cf0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009cf4:	b2d9      	uxtb	r1, r3
 8009cf6:	2909      	cmp	r1, #9
 8009cf8:	d92a      	bls.n	8009d50 <_strtod_l+0x1b8>
 8009cfa:	9905      	ldr	r1, [sp, #20]
 8009cfc:	462a      	mov	r2, r5
 8009cfe:	f7ff ff1a 	bl	8009b36 <strncmp>
 8009d02:	b398      	cbz	r0, 8009d6c <_strtod_l+0x1d4>
 8009d04:	2000      	movs	r0, #0
 8009d06:	4632      	mov	r2, r6
 8009d08:	463d      	mov	r5, r7
 8009d0a:	9005      	str	r0, [sp, #20]
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2a65      	cmp	r2, #101	; 0x65
 8009d10:	d001      	beq.n	8009d16 <_strtod_l+0x17e>
 8009d12:	2a45      	cmp	r2, #69	; 0x45
 8009d14:	d118      	bne.n	8009d48 <_strtod_l+0x1b0>
 8009d16:	b91d      	cbnz	r5, 8009d20 <_strtod_l+0x188>
 8009d18:	9a04      	ldr	r2, [sp, #16]
 8009d1a:	4302      	orrs	r2, r0
 8009d1c:	d09e      	beq.n	8009c5c <_strtod_l+0xc4>
 8009d1e:	2500      	movs	r5, #0
 8009d20:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009d24:	f108 0201 	add.w	r2, r8, #1
 8009d28:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009d2e:	2a2b      	cmp	r2, #43	; 0x2b
 8009d30:	d075      	beq.n	8009e1e <_strtod_l+0x286>
 8009d32:	2a2d      	cmp	r2, #45	; 0x2d
 8009d34:	d07b      	beq.n	8009e2e <_strtod_l+0x296>
 8009d36:	f04f 0c00 	mov.w	ip, #0
 8009d3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009d3e:	2909      	cmp	r1, #9
 8009d40:	f240 8082 	bls.w	8009e48 <_strtod_l+0x2b0>
 8009d44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009d48:	2600      	movs	r6, #0
 8009d4a:	e09d      	b.n	8009e88 <_strtod_l+0x2f0>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e7c4      	b.n	8009cda <_strtod_l+0x142>
 8009d50:	2f08      	cmp	r7, #8
 8009d52:	bfd8      	it	le
 8009d54:	9907      	ldrle	r1, [sp, #28]
 8009d56:	f100 0001 	add.w	r0, r0, #1
 8009d5a:	bfda      	itte	le
 8009d5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d60:	9307      	strle	r3, [sp, #28]
 8009d62:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009d66:	3701      	adds	r7, #1
 8009d68:	9017      	str	r0, [sp, #92]	; 0x5c
 8009d6a:	e7bf      	b.n	8009cec <_strtod_l+0x154>
 8009d6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d6e:	195a      	adds	r2, r3, r5
 8009d70:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d72:	5d5a      	ldrb	r2, [r3, r5]
 8009d74:	2f00      	cmp	r7, #0
 8009d76:	d037      	beq.n	8009de8 <_strtod_l+0x250>
 8009d78:	9005      	str	r0, [sp, #20]
 8009d7a:	463d      	mov	r5, r7
 8009d7c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009d80:	2b09      	cmp	r3, #9
 8009d82:	d912      	bls.n	8009daa <_strtod_l+0x212>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e7c2      	b.n	8009d0e <_strtod_l+0x176>
 8009d88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d8e:	785a      	ldrb	r2, [r3, #1]
 8009d90:	3001      	adds	r0, #1
 8009d92:	2a30      	cmp	r2, #48	; 0x30
 8009d94:	d0f8      	beq.n	8009d88 <_strtod_l+0x1f0>
 8009d96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009d9a:	2b08      	cmp	r3, #8
 8009d9c:	f200 84d9 	bhi.w	800a752 <_strtod_l+0xbba>
 8009da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009da2:	9005      	str	r0, [sp, #20]
 8009da4:	2000      	movs	r0, #0
 8009da6:	9308      	str	r3, [sp, #32]
 8009da8:	4605      	mov	r5, r0
 8009daa:	3a30      	subs	r2, #48	; 0x30
 8009dac:	f100 0301 	add.w	r3, r0, #1
 8009db0:	d014      	beq.n	8009ddc <_strtod_l+0x244>
 8009db2:	9905      	ldr	r1, [sp, #20]
 8009db4:	4419      	add	r1, r3
 8009db6:	9105      	str	r1, [sp, #20]
 8009db8:	462b      	mov	r3, r5
 8009dba:	eb00 0e05 	add.w	lr, r0, r5
 8009dbe:	210a      	movs	r1, #10
 8009dc0:	4573      	cmp	r3, lr
 8009dc2:	d113      	bne.n	8009dec <_strtod_l+0x254>
 8009dc4:	182b      	adds	r3, r5, r0
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	f105 0501 	add.w	r5, r5, #1
 8009dcc:	4405      	add	r5, r0
 8009dce:	dc1c      	bgt.n	8009e0a <_strtod_l+0x272>
 8009dd0:	9907      	ldr	r1, [sp, #28]
 8009dd2:	230a      	movs	r3, #10
 8009dd4:	fb03 2301 	mla	r3, r3, r1, r2
 8009dd8:	9307      	str	r3, [sp, #28]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009dde:	1c51      	adds	r1, r2, #1
 8009de0:	9117      	str	r1, [sp, #92]	; 0x5c
 8009de2:	7852      	ldrb	r2, [r2, #1]
 8009de4:	4618      	mov	r0, r3
 8009de6:	e7c9      	b.n	8009d7c <_strtod_l+0x1e4>
 8009de8:	4638      	mov	r0, r7
 8009dea:	e7d2      	b.n	8009d92 <_strtod_l+0x1fa>
 8009dec:	2b08      	cmp	r3, #8
 8009dee:	dc04      	bgt.n	8009dfa <_strtod_l+0x262>
 8009df0:	9e07      	ldr	r6, [sp, #28]
 8009df2:	434e      	muls	r6, r1
 8009df4:	9607      	str	r6, [sp, #28]
 8009df6:	3301      	adds	r3, #1
 8009df8:	e7e2      	b.n	8009dc0 <_strtod_l+0x228>
 8009dfa:	f103 0c01 	add.w	ip, r3, #1
 8009dfe:	f1bc 0f10 	cmp.w	ip, #16
 8009e02:	bfd8      	it	le
 8009e04:	fb01 f909 	mulle.w	r9, r1, r9
 8009e08:	e7f5      	b.n	8009df6 <_strtod_l+0x25e>
 8009e0a:	2d10      	cmp	r5, #16
 8009e0c:	bfdc      	itt	le
 8009e0e:	230a      	movle	r3, #10
 8009e10:	fb03 2909 	mlale	r9, r3, r9, r2
 8009e14:	e7e1      	b.n	8009dda <_strtod_l+0x242>
 8009e16:	2300      	movs	r3, #0
 8009e18:	9305      	str	r3, [sp, #20]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e77c      	b.n	8009d18 <_strtod_l+0x180>
 8009e1e:	f04f 0c00 	mov.w	ip, #0
 8009e22:	f108 0202 	add.w	r2, r8, #2
 8009e26:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e28:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009e2c:	e785      	b.n	8009d3a <_strtod_l+0x1a2>
 8009e2e:	f04f 0c01 	mov.w	ip, #1
 8009e32:	e7f6      	b.n	8009e22 <_strtod_l+0x28a>
 8009e34:	0800feb8 	.word	0x0800feb8
 8009e38:	0800fc6c 	.word	0x0800fc6c
 8009e3c:	7ff00000 	.word	0x7ff00000
 8009e40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e42:	1c51      	adds	r1, r2, #1
 8009e44:	9117      	str	r1, [sp, #92]	; 0x5c
 8009e46:	7852      	ldrb	r2, [r2, #1]
 8009e48:	2a30      	cmp	r2, #48	; 0x30
 8009e4a:	d0f9      	beq.n	8009e40 <_strtod_l+0x2a8>
 8009e4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009e50:	2908      	cmp	r1, #8
 8009e52:	f63f af79 	bhi.w	8009d48 <_strtod_l+0x1b0>
 8009e56:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009e5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e5c:	9206      	str	r2, [sp, #24]
 8009e5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e60:	1c51      	adds	r1, r2, #1
 8009e62:	9117      	str	r1, [sp, #92]	; 0x5c
 8009e64:	7852      	ldrb	r2, [r2, #1]
 8009e66:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009e6a:	2e09      	cmp	r6, #9
 8009e6c:	d937      	bls.n	8009ede <_strtod_l+0x346>
 8009e6e:	9e06      	ldr	r6, [sp, #24]
 8009e70:	1b89      	subs	r1, r1, r6
 8009e72:	2908      	cmp	r1, #8
 8009e74:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009e78:	dc02      	bgt.n	8009e80 <_strtod_l+0x2e8>
 8009e7a:	4576      	cmp	r6, lr
 8009e7c:	bfa8      	it	ge
 8009e7e:	4676      	movge	r6, lr
 8009e80:	f1bc 0f00 	cmp.w	ip, #0
 8009e84:	d000      	beq.n	8009e88 <_strtod_l+0x2f0>
 8009e86:	4276      	negs	r6, r6
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	d14d      	bne.n	8009f28 <_strtod_l+0x390>
 8009e8c:	9904      	ldr	r1, [sp, #16]
 8009e8e:	4301      	orrs	r1, r0
 8009e90:	f47f aec6 	bne.w	8009c20 <_strtod_l+0x88>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f47f aee1 	bne.w	8009c5c <_strtod_l+0xc4>
 8009e9a:	2a69      	cmp	r2, #105	; 0x69
 8009e9c:	d027      	beq.n	8009eee <_strtod_l+0x356>
 8009e9e:	dc24      	bgt.n	8009eea <_strtod_l+0x352>
 8009ea0:	2a49      	cmp	r2, #73	; 0x49
 8009ea2:	d024      	beq.n	8009eee <_strtod_l+0x356>
 8009ea4:	2a4e      	cmp	r2, #78	; 0x4e
 8009ea6:	f47f aed9 	bne.w	8009c5c <_strtod_l+0xc4>
 8009eaa:	499f      	ldr	r1, [pc, #636]	; (800a128 <_strtod_l+0x590>)
 8009eac:	a817      	add	r0, sp, #92	; 0x5c
 8009eae:	f001 fe61 	bl	800bb74 <__match>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f43f aed2 	beq.w	8009c5c <_strtod_l+0xc4>
 8009eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b28      	cmp	r3, #40	; 0x28
 8009ebe:	d12d      	bne.n	8009f1c <_strtod_l+0x384>
 8009ec0:	499a      	ldr	r1, [pc, #616]	; (800a12c <_strtod_l+0x594>)
 8009ec2:	aa1a      	add	r2, sp, #104	; 0x68
 8009ec4:	a817      	add	r0, sp, #92	; 0x5c
 8009ec6:	f001 fe69 	bl	800bb9c <__hexnan>
 8009eca:	2805      	cmp	r0, #5
 8009ecc:	d126      	bne.n	8009f1c <_strtod_l+0x384>
 8009ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ed0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009ed4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009ed8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009edc:	e6a0      	b.n	8009c20 <_strtod_l+0x88>
 8009ede:	210a      	movs	r1, #10
 8009ee0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009ee4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009ee8:	e7b9      	b.n	8009e5e <_strtod_l+0x2c6>
 8009eea:	2a6e      	cmp	r2, #110	; 0x6e
 8009eec:	e7db      	b.n	8009ea6 <_strtod_l+0x30e>
 8009eee:	4990      	ldr	r1, [pc, #576]	; (800a130 <_strtod_l+0x598>)
 8009ef0:	a817      	add	r0, sp, #92	; 0x5c
 8009ef2:	f001 fe3f 	bl	800bb74 <__match>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	f43f aeb0 	beq.w	8009c5c <_strtod_l+0xc4>
 8009efc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009efe:	498d      	ldr	r1, [pc, #564]	; (800a134 <_strtod_l+0x59c>)
 8009f00:	3b01      	subs	r3, #1
 8009f02:	a817      	add	r0, sp, #92	; 0x5c
 8009f04:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f06:	f001 fe35 	bl	800bb74 <__match>
 8009f0a:	b910      	cbnz	r0, 8009f12 <_strtod_l+0x37a>
 8009f0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f0e:	3301      	adds	r3, #1
 8009f10:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f12:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a144 <_strtod_l+0x5ac>
 8009f16:	f04f 0a00 	mov.w	sl, #0
 8009f1a:	e681      	b.n	8009c20 <_strtod_l+0x88>
 8009f1c:	4886      	ldr	r0, [pc, #536]	; (800a138 <_strtod_l+0x5a0>)
 8009f1e:	f003 f877 	bl	800d010 <nan>
 8009f22:	ec5b ab10 	vmov	sl, fp, d0
 8009f26:	e67b      	b.n	8009c20 <_strtod_l+0x88>
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	9807      	ldr	r0, [sp, #28]
 8009f2c:	1af3      	subs	r3, r6, r3
 8009f2e:	2f00      	cmp	r7, #0
 8009f30:	bf08      	it	eq
 8009f32:	462f      	moveq	r7, r5
 8009f34:	2d10      	cmp	r5, #16
 8009f36:	9306      	str	r3, [sp, #24]
 8009f38:	46a8      	mov	r8, r5
 8009f3a:	bfa8      	it	ge
 8009f3c:	f04f 0810 	movge.w	r8, #16
 8009f40:	f7f6 fae8 	bl	8000514 <__aeabi_ui2d>
 8009f44:	2d09      	cmp	r5, #9
 8009f46:	4682      	mov	sl, r0
 8009f48:	468b      	mov	fp, r1
 8009f4a:	dd13      	ble.n	8009f74 <_strtod_l+0x3dc>
 8009f4c:	4b7b      	ldr	r3, [pc, #492]	; (800a13c <_strtod_l+0x5a4>)
 8009f4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009f52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f56:	f7f6 fb57 	bl	8000608 <__aeabi_dmul>
 8009f5a:	4682      	mov	sl, r0
 8009f5c:	4648      	mov	r0, r9
 8009f5e:	468b      	mov	fp, r1
 8009f60:	f7f6 fad8 	bl	8000514 <__aeabi_ui2d>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4650      	mov	r0, sl
 8009f6a:	4659      	mov	r1, fp
 8009f6c:	f7f6 f996 	bl	800029c <__adddf3>
 8009f70:	4682      	mov	sl, r0
 8009f72:	468b      	mov	fp, r1
 8009f74:	2d0f      	cmp	r5, #15
 8009f76:	dc38      	bgt.n	8009fea <_strtod_l+0x452>
 8009f78:	9b06      	ldr	r3, [sp, #24]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f43f ae50 	beq.w	8009c20 <_strtod_l+0x88>
 8009f80:	dd24      	ble.n	8009fcc <_strtod_l+0x434>
 8009f82:	2b16      	cmp	r3, #22
 8009f84:	dc0b      	bgt.n	8009f9e <_strtod_l+0x406>
 8009f86:	496d      	ldr	r1, [pc, #436]	; (800a13c <_strtod_l+0x5a4>)
 8009f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f90:	4652      	mov	r2, sl
 8009f92:	465b      	mov	r3, fp
 8009f94:	f7f6 fb38 	bl	8000608 <__aeabi_dmul>
 8009f98:	4682      	mov	sl, r0
 8009f9a:	468b      	mov	fp, r1
 8009f9c:	e640      	b.n	8009c20 <_strtod_l+0x88>
 8009f9e:	9a06      	ldr	r2, [sp, #24]
 8009fa0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	db20      	blt.n	8009fea <_strtod_l+0x452>
 8009fa8:	4c64      	ldr	r4, [pc, #400]	; (800a13c <_strtod_l+0x5a4>)
 8009faa:	f1c5 050f 	rsb	r5, r5, #15
 8009fae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009fb2:	4652      	mov	r2, sl
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fba:	f7f6 fb25 	bl	8000608 <__aeabi_dmul>
 8009fbe:	9b06      	ldr	r3, [sp, #24]
 8009fc0:	1b5d      	subs	r5, r3, r5
 8009fc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009fc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009fca:	e7e3      	b.n	8009f94 <_strtod_l+0x3fc>
 8009fcc:	9b06      	ldr	r3, [sp, #24]
 8009fce:	3316      	adds	r3, #22
 8009fd0:	db0b      	blt.n	8009fea <_strtod_l+0x452>
 8009fd2:	9b05      	ldr	r3, [sp, #20]
 8009fd4:	1b9e      	subs	r6, r3, r6
 8009fd6:	4b59      	ldr	r3, [pc, #356]	; (800a13c <_strtod_l+0x5a4>)
 8009fd8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009fdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	4659      	mov	r1, fp
 8009fe4:	f7f6 fc3a 	bl	800085c <__aeabi_ddiv>
 8009fe8:	e7d6      	b.n	8009f98 <_strtod_l+0x400>
 8009fea:	9b06      	ldr	r3, [sp, #24]
 8009fec:	eba5 0808 	sub.w	r8, r5, r8
 8009ff0:	4498      	add	r8, r3
 8009ff2:	f1b8 0f00 	cmp.w	r8, #0
 8009ff6:	dd74      	ble.n	800a0e2 <_strtod_l+0x54a>
 8009ff8:	f018 030f 	ands.w	r3, r8, #15
 8009ffc:	d00a      	beq.n	800a014 <_strtod_l+0x47c>
 8009ffe:	494f      	ldr	r1, [pc, #316]	; (800a13c <_strtod_l+0x5a4>)
 800a000:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a004:	4652      	mov	r2, sl
 800a006:	465b      	mov	r3, fp
 800a008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a00c:	f7f6 fafc 	bl	8000608 <__aeabi_dmul>
 800a010:	4682      	mov	sl, r0
 800a012:	468b      	mov	fp, r1
 800a014:	f038 080f 	bics.w	r8, r8, #15
 800a018:	d04f      	beq.n	800a0ba <_strtod_l+0x522>
 800a01a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a01e:	dd22      	ble.n	800a066 <_strtod_l+0x4ce>
 800a020:	2500      	movs	r5, #0
 800a022:	462e      	mov	r6, r5
 800a024:	9507      	str	r5, [sp, #28]
 800a026:	9505      	str	r5, [sp, #20]
 800a028:	2322      	movs	r3, #34	; 0x22
 800a02a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a144 <_strtod_l+0x5ac>
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	f04f 0a00 	mov.w	sl, #0
 800a034:	9b07      	ldr	r3, [sp, #28]
 800a036:	2b00      	cmp	r3, #0
 800a038:	f43f adf2 	beq.w	8009c20 <_strtod_l+0x88>
 800a03c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a03e:	4620      	mov	r0, r4
 800a040:	f001 febc 	bl	800bdbc <_Bfree>
 800a044:	9905      	ldr	r1, [sp, #20]
 800a046:	4620      	mov	r0, r4
 800a048:	f001 feb8 	bl	800bdbc <_Bfree>
 800a04c:	4631      	mov	r1, r6
 800a04e:	4620      	mov	r0, r4
 800a050:	f001 feb4 	bl	800bdbc <_Bfree>
 800a054:	9907      	ldr	r1, [sp, #28]
 800a056:	4620      	mov	r0, r4
 800a058:	f001 feb0 	bl	800bdbc <_Bfree>
 800a05c:	4629      	mov	r1, r5
 800a05e:	4620      	mov	r0, r4
 800a060:	f001 feac 	bl	800bdbc <_Bfree>
 800a064:	e5dc      	b.n	8009c20 <_strtod_l+0x88>
 800a066:	4b36      	ldr	r3, [pc, #216]	; (800a140 <_strtod_l+0x5a8>)
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	2300      	movs	r3, #0
 800a06c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a070:	4650      	mov	r0, sl
 800a072:	4659      	mov	r1, fp
 800a074:	4699      	mov	r9, r3
 800a076:	f1b8 0f01 	cmp.w	r8, #1
 800a07a:	dc21      	bgt.n	800a0c0 <_strtod_l+0x528>
 800a07c:	b10b      	cbz	r3, 800a082 <_strtod_l+0x4ea>
 800a07e:	4682      	mov	sl, r0
 800a080:	468b      	mov	fp, r1
 800a082:	4b2f      	ldr	r3, [pc, #188]	; (800a140 <_strtod_l+0x5a8>)
 800a084:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a088:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a08c:	4652      	mov	r2, sl
 800a08e:	465b      	mov	r3, fp
 800a090:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a094:	f7f6 fab8 	bl	8000608 <__aeabi_dmul>
 800a098:	4b2a      	ldr	r3, [pc, #168]	; (800a144 <_strtod_l+0x5ac>)
 800a09a:	460a      	mov	r2, r1
 800a09c:	400b      	ands	r3, r1
 800a09e:	492a      	ldr	r1, [pc, #168]	; (800a148 <_strtod_l+0x5b0>)
 800a0a0:	428b      	cmp	r3, r1
 800a0a2:	4682      	mov	sl, r0
 800a0a4:	d8bc      	bhi.n	800a020 <_strtod_l+0x488>
 800a0a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a0aa:	428b      	cmp	r3, r1
 800a0ac:	bf86      	itte	hi
 800a0ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a14c <_strtod_l+0x5b4>
 800a0b2:	f04f 3aff 	movhi.w	sl, #4294967295
 800a0b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9304      	str	r3, [sp, #16]
 800a0be:	e084      	b.n	800a1ca <_strtod_l+0x632>
 800a0c0:	f018 0f01 	tst.w	r8, #1
 800a0c4:	d005      	beq.n	800a0d2 <_strtod_l+0x53a>
 800a0c6:	9b04      	ldr	r3, [sp, #16]
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 fa9c 	bl	8000608 <__aeabi_dmul>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	9a04      	ldr	r2, [sp, #16]
 800a0d4:	3208      	adds	r2, #8
 800a0d6:	f109 0901 	add.w	r9, r9, #1
 800a0da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0de:	9204      	str	r2, [sp, #16]
 800a0e0:	e7c9      	b.n	800a076 <_strtod_l+0x4de>
 800a0e2:	d0ea      	beq.n	800a0ba <_strtod_l+0x522>
 800a0e4:	f1c8 0800 	rsb	r8, r8, #0
 800a0e8:	f018 020f 	ands.w	r2, r8, #15
 800a0ec:	d00a      	beq.n	800a104 <_strtod_l+0x56c>
 800a0ee:	4b13      	ldr	r3, [pc, #76]	; (800a13c <_strtod_l+0x5a4>)
 800a0f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0f4:	4650      	mov	r0, sl
 800a0f6:	4659      	mov	r1, fp
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	f7f6 fbae 	bl	800085c <__aeabi_ddiv>
 800a100:	4682      	mov	sl, r0
 800a102:	468b      	mov	fp, r1
 800a104:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a108:	d0d7      	beq.n	800a0ba <_strtod_l+0x522>
 800a10a:	f1b8 0f1f 	cmp.w	r8, #31
 800a10e:	dd1f      	ble.n	800a150 <_strtod_l+0x5b8>
 800a110:	2500      	movs	r5, #0
 800a112:	462e      	mov	r6, r5
 800a114:	9507      	str	r5, [sp, #28]
 800a116:	9505      	str	r5, [sp, #20]
 800a118:	2322      	movs	r3, #34	; 0x22
 800a11a:	f04f 0a00 	mov.w	sl, #0
 800a11e:	f04f 0b00 	mov.w	fp, #0
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	e786      	b.n	800a034 <_strtod_l+0x49c>
 800a126:	bf00      	nop
 800a128:	0800fc41 	.word	0x0800fc41
 800a12c:	0800fc80 	.word	0x0800fc80
 800a130:	0800fc39 	.word	0x0800fc39
 800a134:	0800fdc4 	.word	0x0800fdc4
 800a138:	0801008b 	.word	0x0801008b
 800a13c:	0800ff50 	.word	0x0800ff50
 800a140:	0800ff28 	.word	0x0800ff28
 800a144:	7ff00000 	.word	0x7ff00000
 800a148:	7ca00000 	.word	0x7ca00000
 800a14c:	7fefffff 	.word	0x7fefffff
 800a150:	f018 0310 	ands.w	r3, r8, #16
 800a154:	bf18      	it	ne
 800a156:	236a      	movne	r3, #106	; 0x6a
 800a158:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a508 <_strtod_l+0x970>
 800a15c:	9304      	str	r3, [sp, #16]
 800a15e:	4650      	mov	r0, sl
 800a160:	4659      	mov	r1, fp
 800a162:	2300      	movs	r3, #0
 800a164:	f018 0f01 	tst.w	r8, #1
 800a168:	d004      	beq.n	800a174 <_strtod_l+0x5dc>
 800a16a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a16e:	f7f6 fa4b 	bl	8000608 <__aeabi_dmul>
 800a172:	2301      	movs	r3, #1
 800a174:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a178:	f109 0908 	add.w	r9, r9, #8
 800a17c:	d1f2      	bne.n	800a164 <_strtod_l+0x5cc>
 800a17e:	b10b      	cbz	r3, 800a184 <_strtod_l+0x5ec>
 800a180:	4682      	mov	sl, r0
 800a182:	468b      	mov	fp, r1
 800a184:	9b04      	ldr	r3, [sp, #16]
 800a186:	b1c3      	cbz	r3, 800a1ba <_strtod_l+0x622>
 800a188:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a18c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a190:	2b00      	cmp	r3, #0
 800a192:	4659      	mov	r1, fp
 800a194:	dd11      	ble.n	800a1ba <_strtod_l+0x622>
 800a196:	2b1f      	cmp	r3, #31
 800a198:	f340 8124 	ble.w	800a3e4 <_strtod_l+0x84c>
 800a19c:	2b34      	cmp	r3, #52	; 0x34
 800a19e:	bfde      	ittt	le
 800a1a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a1a4:	f04f 33ff 	movle.w	r3, #4294967295
 800a1a8:	fa03 f202 	lslle.w	r2, r3, r2
 800a1ac:	f04f 0a00 	mov.w	sl, #0
 800a1b0:	bfcc      	ite	gt
 800a1b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a1b6:	ea02 0b01 	andle.w	fp, r2, r1
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4650      	mov	r0, sl
 800a1c0:	4659      	mov	r1, fp
 800a1c2:	f7f6 fc89 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d1a2      	bne.n	800a110 <_strtod_l+0x578>
 800a1ca:	9b07      	ldr	r3, [sp, #28]
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	9908      	ldr	r1, [sp, #32]
 800a1d0:	462b      	mov	r3, r5
 800a1d2:	463a      	mov	r2, r7
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f001 fe59 	bl	800be8c <__s2b>
 800a1da:	9007      	str	r0, [sp, #28]
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	f43f af1f 	beq.w	800a020 <_strtod_l+0x488>
 800a1e2:	9b05      	ldr	r3, [sp, #20]
 800a1e4:	1b9e      	subs	r6, r3, r6
 800a1e6:	9b06      	ldr	r3, [sp, #24]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	bfb4      	ite	lt
 800a1ec:	4633      	movlt	r3, r6
 800a1ee:	2300      	movge	r3, #0
 800a1f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a1f2:	9b06      	ldr	r3, [sp, #24]
 800a1f4:	2500      	movs	r5, #0
 800a1f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1fa:	9312      	str	r3, [sp, #72]	; 0x48
 800a1fc:	462e      	mov	r6, r5
 800a1fe:	9b07      	ldr	r3, [sp, #28]
 800a200:	4620      	mov	r0, r4
 800a202:	6859      	ldr	r1, [r3, #4]
 800a204:	f001 fd9a 	bl	800bd3c <_Balloc>
 800a208:	9005      	str	r0, [sp, #20]
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f43f af0c 	beq.w	800a028 <_strtod_l+0x490>
 800a210:	9b07      	ldr	r3, [sp, #28]
 800a212:	691a      	ldr	r2, [r3, #16]
 800a214:	3202      	adds	r2, #2
 800a216:	f103 010c 	add.w	r1, r3, #12
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	300c      	adds	r0, #12
 800a21e:	f7fe fc59 	bl	8008ad4 <memcpy>
 800a222:	ec4b ab10 	vmov	d0, sl, fp
 800a226:	aa1a      	add	r2, sp, #104	; 0x68
 800a228:	a919      	add	r1, sp, #100	; 0x64
 800a22a:	4620      	mov	r0, r4
 800a22c:	f002 f974 	bl	800c518 <__d2b>
 800a230:	ec4b ab18 	vmov	d8, sl, fp
 800a234:	9018      	str	r0, [sp, #96]	; 0x60
 800a236:	2800      	cmp	r0, #0
 800a238:	f43f aef6 	beq.w	800a028 <_strtod_l+0x490>
 800a23c:	2101      	movs	r1, #1
 800a23e:	4620      	mov	r0, r4
 800a240:	f001 febe 	bl	800bfc0 <__i2b>
 800a244:	4606      	mov	r6, r0
 800a246:	2800      	cmp	r0, #0
 800a248:	f43f aeee 	beq.w	800a028 <_strtod_l+0x490>
 800a24c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a24e:	9904      	ldr	r1, [sp, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	bfab      	itete	ge
 800a254:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a256:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a258:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a25a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a25e:	bfac      	ite	ge
 800a260:	eb03 0902 	addge.w	r9, r3, r2
 800a264:	1ad7      	sublt	r7, r2, r3
 800a266:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a268:	eba3 0801 	sub.w	r8, r3, r1
 800a26c:	4490      	add	r8, r2
 800a26e:	4ba1      	ldr	r3, [pc, #644]	; (800a4f4 <_strtod_l+0x95c>)
 800a270:	f108 38ff 	add.w	r8, r8, #4294967295
 800a274:	4598      	cmp	r8, r3
 800a276:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a27a:	f280 80c7 	bge.w	800a40c <_strtod_l+0x874>
 800a27e:	eba3 0308 	sub.w	r3, r3, r8
 800a282:	2b1f      	cmp	r3, #31
 800a284:	eba2 0203 	sub.w	r2, r2, r3
 800a288:	f04f 0101 	mov.w	r1, #1
 800a28c:	f300 80b1 	bgt.w	800a3f2 <_strtod_l+0x85a>
 800a290:	fa01 f303 	lsl.w	r3, r1, r3
 800a294:	930d      	str	r3, [sp, #52]	; 0x34
 800a296:	2300      	movs	r3, #0
 800a298:	9308      	str	r3, [sp, #32]
 800a29a:	eb09 0802 	add.w	r8, r9, r2
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	45c1      	cmp	r9, r8
 800a2a2:	4417      	add	r7, r2
 800a2a4:	441f      	add	r7, r3
 800a2a6:	464b      	mov	r3, r9
 800a2a8:	bfa8      	it	ge
 800a2aa:	4643      	movge	r3, r8
 800a2ac:	42bb      	cmp	r3, r7
 800a2ae:	bfa8      	it	ge
 800a2b0:	463b      	movge	r3, r7
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	bfc2      	ittt	gt
 800a2b6:	eba8 0803 	subgt.w	r8, r8, r3
 800a2ba:	1aff      	subgt	r7, r7, r3
 800a2bc:	eba9 0903 	subgt.w	r9, r9, r3
 800a2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dd17      	ble.n	800a2f6 <_strtod_l+0x75e>
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f001 ff38 	bl	800c140 <__pow5mult>
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f43f aea8 	beq.w	800a028 <_strtod_l+0x490>
 800a2d8:	4601      	mov	r1, r0
 800a2da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f001 fe85 	bl	800bfec <__multiply>
 800a2e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	f43f ae9f 	beq.w	800a028 <_strtod_l+0x490>
 800a2ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f001 fd65 	bl	800bdbc <_Bfree>
 800a2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f4:	9318      	str	r3, [sp, #96]	; 0x60
 800a2f6:	f1b8 0f00 	cmp.w	r8, #0
 800a2fa:	f300 808c 	bgt.w	800a416 <_strtod_l+0x87e>
 800a2fe:	9b06      	ldr	r3, [sp, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	dd08      	ble.n	800a316 <_strtod_l+0x77e>
 800a304:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a306:	9905      	ldr	r1, [sp, #20]
 800a308:	4620      	mov	r0, r4
 800a30a:	f001 ff19 	bl	800c140 <__pow5mult>
 800a30e:	9005      	str	r0, [sp, #20]
 800a310:	2800      	cmp	r0, #0
 800a312:	f43f ae89 	beq.w	800a028 <_strtod_l+0x490>
 800a316:	2f00      	cmp	r7, #0
 800a318:	dd08      	ble.n	800a32c <_strtod_l+0x794>
 800a31a:	9905      	ldr	r1, [sp, #20]
 800a31c:	463a      	mov	r2, r7
 800a31e:	4620      	mov	r0, r4
 800a320:	f001 ff68 	bl	800c1f4 <__lshift>
 800a324:	9005      	str	r0, [sp, #20]
 800a326:	2800      	cmp	r0, #0
 800a328:	f43f ae7e 	beq.w	800a028 <_strtod_l+0x490>
 800a32c:	f1b9 0f00 	cmp.w	r9, #0
 800a330:	dd08      	ble.n	800a344 <_strtod_l+0x7ac>
 800a332:	4631      	mov	r1, r6
 800a334:	464a      	mov	r2, r9
 800a336:	4620      	mov	r0, r4
 800a338:	f001 ff5c 	bl	800c1f4 <__lshift>
 800a33c:	4606      	mov	r6, r0
 800a33e:	2800      	cmp	r0, #0
 800a340:	f43f ae72 	beq.w	800a028 <_strtod_l+0x490>
 800a344:	9a05      	ldr	r2, [sp, #20]
 800a346:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a348:	4620      	mov	r0, r4
 800a34a:	f001 ffdf 	bl	800c30c <__mdiff>
 800a34e:	4605      	mov	r5, r0
 800a350:	2800      	cmp	r0, #0
 800a352:	f43f ae69 	beq.w	800a028 <_strtod_l+0x490>
 800a356:	68c3      	ldr	r3, [r0, #12]
 800a358:	930b      	str	r3, [sp, #44]	; 0x2c
 800a35a:	2300      	movs	r3, #0
 800a35c:	60c3      	str	r3, [r0, #12]
 800a35e:	4631      	mov	r1, r6
 800a360:	f001 ffb8 	bl	800c2d4 <__mcmp>
 800a364:	2800      	cmp	r0, #0
 800a366:	da60      	bge.n	800a42a <_strtod_l+0x892>
 800a368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a36a:	ea53 030a 	orrs.w	r3, r3, sl
 800a36e:	f040 8082 	bne.w	800a476 <_strtod_l+0x8de>
 800a372:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a376:	2b00      	cmp	r3, #0
 800a378:	d17d      	bne.n	800a476 <_strtod_l+0x8de>
 800a37a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a37e:	0d1b      	lsrs	r3, r3, #20
 800a380:	051b      	lsls	r3, r3, #20
 800a382:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a386:	d976      	bls.n	800a476 <_strtod_l+0x8de>
 800a388:	696b      	ldr	r3, [r5, #20]
 800a38a:	b913      	cbnz	r3, 800a392 <_strtod_l+0x7fa>
 800a38c:	692b      	ldr	r3, [r5, #16]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	dd71      	ble.n	800a476 <_strtod_l+0x8de>
 800a392:	4629      	mov	r1, r5
 800a394:	2201      	movs	r2, #1
 800a396:	4620      	mov	r0, r4
 800a398:	f001 ff2c 	bl	800c1f4 <__lshift>
 800a39c:	4631      	mov	r1, r6
 800a39e:	4605      	mov	r5, r0
 800a3a0:	f001 ff98 	bl	800c2d4 <__mcmp>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	dd66      	ble.n	800a476 <_strtod_l+0x8de>
 800a3a8:	9904      	ldr	r1, [sp, #16]
 800a3aa:	4a53      	ldr	r2, [pc, #332]	; (800a4f8 <_strtod_l+0x960>)
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	2900      	cmp	r1, #0
 800a3b0:	f000 8081 	beq.w	800a4b6 <_strtod_l+0x91e>
 800a3b4:	ea02 010b 	and.w	r1, r2, fp
 800a3b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a3bc:	dc7b      	bgt.n	800a4b6 <_strtod_l+0x91e>
 800a3be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a3c2:	f77f aea9 	ble.w	800a118 <_strtod_l+0x580>
 800a3c6:	4b4d      	ldr	r3, [pc, #308]	; (800a4fc <_strtod_l+0x964>)
 800a3c8:	4650      	mov	r0, sl
 800a3ca:	4659      	mov	r1, fp
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f7f6 f91b 	bl	8000608 <__aeabi_dmul>
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4303      	orrs	r3, r0
 800a3d6:	bf08      	it	eq
 800a3d8:	2322      	moveq	r3, #34	; 0x22
 800a3da:	4682      	mov	sl, r0
 800a3dc:	468b      	mov	fp, r1
 800a3de:	bf08      	it	eq
 800a3e0:	6023      	streq	r3, [r4, #0]
 800a3e2:	e62b      	b.n	800a03c <_strtod_l+0x4a4>
 800a3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ec:	ea03 0a0a 	and.w	sl, r3, sl
 800a3f0:	e6e3      	b.n	800a1ba <_strtod_l+0x622>
 800a3f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a3f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a3fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a3fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a402:	fa01 f308 	lsl.w	r3, r1, r8
 800a406:	9308      	str	r3, [sp, #32]
 800a408:	910d      	str	r1, [sp, #52]	; 0x34
 800a40a:	e746      	b.n	800a29a <_strtod_l+0x702>
 800a40c:	2300      	movs	r3, #0
 800a40e:	9308      	str	r3, [sp, #32]
 800a410:	2301      	movs	r3, #1
 800a412:	930d      	str	r3, [sp, #52]	; 0x34
 800a414:	e741      	b.n	800a29a <_strtod_l+0x702>
 800a416:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a418:	4642      	mov	r2, r8
 800a41a:	4620      	mov	r0, r4
 800a41c:	f001 feea 	bl	800c1f4 <__lshift>
 800a420:	9018      	str	r0, [sp, #96]	; 0x60
 800a422:	2800      	cmp	r0, #0
 800a424:	f47f af6b 	bne.w	800a2fe <_strtod_l+0x766>
 800a428:	e5fe      	b.n	800a028 <_strtod_l+0x490>
 800a42a:	465f      	mov	r7, fp
 800a42c:	d16e      	bne.n	800a50c <_strtod_l+0x974>
 800a42e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a430:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a434:	b342      	cbz	r2, 800a488 <_strtod_l+0x8f0>
 800a436:	4a32      	ldr	r2, [pc, #200]	; (800a500 <_strtod_l+0x968>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d128      	bne.n	800a48e <_strtod_l+0x8f6>
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	4651      	mov	r1, sl
 800a440:	b1eb      	cbz	r3, 800a47e <_strtod_l+0x8e6>
 800a442:	4b2d      	ldr	r3, [pc, #180]	; (800a4f8 <_strtod_l+0x960>)
 800a444:	403b      	ands	r3, r7
 800a446:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a44a:	f04f 32ff 	mov.w	r2, #4294967295
 800a44e:	d819      	bhi.n	800a484 <_strtod_l+0x8ec>
 800a450:	0d1b      	lsrs	r3, r3, #20
 800a452:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a456:	fa02 f303 	lsl.w	r3, r2, r3
 800a45a:	4299      	cmp	r1, r3
 800a45c:	d117      	bne.n	800a48e <_strtod_l+0x8f6>
 800a45e:	4b29      	ldr	r3, [pc, #164]	; (800a504 <_strtod_l+0x96c>)
 800a460:	429f      	cmp	r7, r3
 800a462:	d102      	bne.n	800a46a <_strtod_l+0x8d2>
 800a464:	3101      	adds	r1, #1
 800a466:	f43f addf 	beq.w	800a028 <_strtod_l+0x490>
 800a46a:	4b23      	ldr	r3, [pc, #140]	; (800a4f8 <_strtod_l+0x960>)
 800a46c:	403b      	ands	r3, r7
 800a46e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a472:	f04f 0a00 	mov.w	sl, #0
 800a476:	9b04      	ldr	r3, [sp, #16]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1a4      	bne.n	800a3c6 <_strtod_l+0x82e>
 800a47c:	e5de      	b.n	800a03c <_strtod_l+0x4a4>
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	e7ea      	b.n	800a45a <_strtod_l+0x8c2>
 800a484:	4613      	mov	r3, r2
 800a486:	e7e8      	b.n	800a45a <_strtod_l+0x8c2>
 800a488:	ea53 030a 	orrs.w	r3, r3, sl
 800a48c:	d08c      	beq.n	800a3a8 <_strtod_l+0x810>
 800a48e:	9b08      	ldr	r3, [sp, #32]
 800a490:	b1db      	cbz	r3, 800a4ca <_strtod_l+0x932>
 800a492:	423b      	tst	r3, r7
 800a494:	d0ef      	beq.n	800a476 <_strtod_l+0x8de>
 800a496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a498:	9a04      	ldr	r2, [sp, #16]
 800a49a:	4650      	mov	r0, sl
 800a49c:	4659      	mov	r1, fp
 800a49e:	b1c3      	cbz	r3, 800a4d2 <_strtod_l+0x93a>
 800a4a0:	f7ff fb5d 	bl	8009b5e <sulp>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	ec51 0b18 	vmov	r0, r1, d8
 800a4ac:	f7f5 fef6 	bl	800029c <__adddf3>
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	468b      	mov	fp, r1
 800a4b4:	e7df      	b.n	800a476 <_strtod_l+0x8de>
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a4bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a4c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a4c4:	f04f 3aff 	mov.w	sl, #4294967295
 800a4c8:	e7d5      	b.n	800a476 <_strtod_l+0x8de>
 800a4ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4cc:	ea13 0f0a 	tst.w	r3, sl
 800a4d0:	e7e0      	b.n	800a494 <_strtod_l+0x8fc>
 800a4d2:	f7ff fb44 	bl	8009b5e <sulp>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	ec51 0b18 	vmov	r0, r1, d8
 800a4de:	f7f5 fedb 	bl	8000298 <__aeabi_dsub>
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4682      	mov	sl, r0
 800a4e8:	468b      	mov	fp, r1
 800a4ea:	f7f6 faf5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d0c1      	beq.n	800a476 <_strtod_l+0x8de>
 800a4f2:	e611      	b.n	800a118 <_strtod_l+0x580>
 800a4f4:	fffffc02 	.word	0xfffffc02
 800a4f8:	7ff00000 	.word	0x7ff00000
 800a4fc:	39500000 	.word	0x39500000
 800a500:	000fffff 	.word	0x000fffff
 800a504:	7fefffff 	.word	0x7fefffff
 800a508:	0800fc98 	.word	0x0800fc98
 800a50c:	4631      	mov	r1, r6
 800a50e:	4628      	mov	r0, r5
 800a510:	f002 f85e 	bl	800c5d0 <__ratio>
 800a514:	ec59 8b10 	vmov	r8, r9, d0
 800a518:	ee10 0a10 	vmov	r0, s0
 800a51c:	2200      	movs	r2, #0
 800a51e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a522:	4649      	mov	r1, r9
 800a524:	f7f6 faec 	bl	8000b00 <__aeabi_dcmple>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d07a      	beq.n	800a622 <_strtod_l+0xa8a>
 800a52c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d04a      	beq.n	800a5c8 <_strtod_l+0xa30>
 800a532:	4b95      	ldr	r3, [pc, #596]	; (800a788 <_strtod_l+0xbf0>)
 800a534:	2200      	movs	r2, #0
 800a536:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a53a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a788 <_strtod_l+0xbf0>
 800a53e:	f04f 0800 	mov.w	r8, #0
 800a542:	4b92      	ldr	r3, [pc, #584]	; (800a78c <_strtod_l+0xbf4>)
 800a544:	403b      	ands	r3, r7
 800a546:	930d      	str	r3, [sp, #52]	; 0x34
 800a548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a54a:	4b91      	ldr	r3, [pc, #580]	; (800a790 <_strtod_l+0xbf8>)
 800a54c:	429a      	cmp	r2, r3
 800a54e:	f040 80b0 	bne.w	800a6b2 <_strtod_l+0xb1a>
 800a552:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a556:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a55a:	ec4b ab10 	vmov	d0, sl, fp
 800a55e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a562:	f001 ff5d 	bl	800c420 <__ulp>
 800a566:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a56a:	ec53 2b10 	vmov	r2, r3, d0
 800a56e:	f7f6 f84b 	bl	8000608 <__aeabi_dmul>
 800a572:	4652      	mov	r2, sl
 800a574:	465b      	mov	r3, fp
 800a576:	f7f5 fe91 	bl	800029c <__adddf3>
 800a57a:	460b      	mov	r3, r1
 800a57c:	4983      	ldr	r1, [pc, #524]	; (800a78c <_strtod_l+0xbf4>)
 800a57e:	4a85      	ldr	r2, [pc, #532]	; (800a794 <_strtod_l+0xbfc>)
 800a580:	4019      	ands	r1, r3
 800a582:	4291      	cmp	r1, r2
 800a584:	4682      	mov	sl, r0
 800a586:	d960      	bls.n	800a64a <_strtod_l+0xab2>
 800a588:	ee18 3a90 	vmov	r3, s17
 800a58c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a590:	4293      	cmp	r3, r2
 800a592:	d104      	bne.n	800a59e <_strtod_l+0xa06>
 800a594:	ee18 3a10 	vmov	r3, s16
 800a598:	3301      	adds	r3, #1
 800a59a:	f43f ad45 	beq.w	800a028 <_strtod_l+0x490>
 800a59e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a7a0 <_strtod_l+0xc08>
 800a5a2:	f04f 3aff 	mov.w	sl, #4294967295
 800a5a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f001 fc07 	bl	800bdbc <_Bfree>
 800a5ae:	9905      	ldr	r1, [sp, #20]
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f001 fc03 	bl	800bdbc <_Bfree>
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f001 fbff 	bl	800bdbc <_Bfree>
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f001 fbfb 	bl	800bdbc <_Bfree>
 800a5c6:	e61a      	b.n	800a1fe <_strtod_l+0x666>
 800a5c8:	f1ba 0f00 	cmp.w	sl, #0
 800a5cc:	d11b      	bne.n	800a606 <_strtod_l+0xa6e>
 800a5ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5d2:	b9f3      	cbnz	r3, 800a612 <_strtod_l+0xa7a>
 800a5d4:	4b6c      	ldr	r3, [pc, #432]	; (800a788 <_strtod_l+0xbf0>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	4640      	mov	r0, r8
 800a5da:	4649      	mov	r1, r9
 800a5dc:	f7f6 fa86 	bl	8000aec <__aeabi_dcmplt>
 800a5e0:	b9d0      	cbnz	r0, 800a618 <_strtod_l+0xa80>
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	4b6c      	ldr	r3, [pc, #432]	; (800a798 <_strtod_l+0xc00>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f7f6 f80d 	bl	8000608 <__aeabi_dmul>
 800a5ee:	4680      	mov	r8, r0
 800a5f0:	4689      	mov	r9, r1
 800a5f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a5f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a5fa:	9315      	str	r3, [sp, #84]	; 0x54
 800a5fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a600:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a604:	e79d      	b.n	800a542 <_strtod_l+0x9aa>
 800a606:	f1ba 0f01 	cmp.w	sl, #1
 800a60a:	d102      	bne.n	800a612 <_strtod_l+0xa7a>
 800a60c:	2f00      	cmp	r7, #0
 800a60e:	f43f ad83 	beq.w	800a118 <_strtod_l+0x580>
 800a612:	4b62      	ldr	r3, [pc, #392]	; (800a79c <_strtod_l+0xc04>)
 800a614:	2200      	movs	r2, #0
 800a616:	e78e      	b.n	800a536 <_strtod_l+0x99e>
 800a618:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a798 <_strtod_l+0xc00>
 800a61c:	f04f 0800 	mov.w	r8, #0
 800a620:	e7e7      	b.n	800a5f2 <_strtod_l+0xa5a>
 800a622:	4b5d      	ldr	r3, [pc, #372]	; (800a798 <_strtod_l+0xc00>)
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	2200      	movs	r2, #0
 800a62a:	f7f5 ffed 	bl	8000608 <__aeabi_dmul>
 800a62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a630:	4680      	mov	r8, r0
 800a632:	4689      	mov	r9, r1
 800a634:	b933      	cbnz	r3, 800a644 <_strtod_l+0xaac>
 800a636:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a63a:	900e      	str	r0, [sp, #56]	; 0x38
 800a63c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a63e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a642:	e7dd      	b.n	800a600 <_strtod_l+0xa68>
 800a644:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a648:	e7f9      	b.n	800a63e <_strtod_l+0xaa6>
 800a64a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a64e:	9b04      	ldr	r3, [sp, #16]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1a8      	bne.n	800a5a6 <_strtod_l+0xa0e>
 800a654:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a65a:	0d1b      	lsrs	r3, r3, #20
 800a65c:	051b      	lsls	r3, r3, #20
 800a65e:	429a      	cmp	r2, r3
 800a660:	d1a1      	bne.n	800a5a6 <_strtod_l+0xa0e>
 800a662:	4640      	mov	r0, r8
 800a664:	4649      	mov	r1, r9
 800a666:	f7f6 fb2f 	bl	8000cc8 <__aeabi_d2lz>
 800a66a:	f7f5 ff9f 	bl	80005ac <__aeabi_l2d>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4640      	mov	r0, r8
 800a674:	4649      	mov	r1, r9
 800a676:	f7f5 fe0f 	bl	8000298 <__aeabi_dsub>
 800a67a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a67c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a680:	ea43 030a 	orr.w	r3, r3, sl
 800a684:	4313      	orrs	r3, r2
 800a686:	4680      	mov	r8, r0
 800a688:	4689      	mov	r9, r1
 800a68a:	d055      	beq.n	800a738 <_strtod_l+0xba0>
 800a68c:	a336      	add	r3, pc, #216	; (adr r3, 800a768 <_strtod_l+0xbd0>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7f6 fa2b 	bl	8000aec <__aeabi_dcmplt>
 800a696:	2800      	cmp	r0, #0
 800a698:	f47f acd0 	bne.w	800a03c <_strtod_l+0x4a4>
 800a69c:	a334      	add	r3, pc, #208	; (adr r3, 800a770 <_strtod_l+0xbd8>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	f7f6 fa3f 	bl	8000b28 <__aeabi_dcmpgt>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f43f af7b 	beq.w	800a5a6 <_strtod_l+0xa0e>
 800a6b0:	e4c4      	b.n	800a03c <_strtod_l+0x4a4>
 800a6b2:	9b04      	ldr	r3, [sp, #16]
 800a6b4:	b333      	cbz	r3, 800a704 <_strtod_l+0xb6c>
 800a6b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6bc:	d822      	bhi.n	800a704 <_strtod_l+0xb6c>
 800a6be:	a32e      	add	r3, pc, #184	; (adr r3, 800a778 <_strtod_l+0xbe0>)
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	4640      	mov	r0, r8
 800a6c6:	4649      	mov	r1, r9
 800a6c8:	f7f6 fa1a 	bl	8000b00 <__aeabi_dcmple>
 800a6cc:	b1a0      	cbz	r0, 800a6f8 <_strtod_l+0xb60>
 800a6ce:	4649      	mov	r1, r9
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	f7f6 fa71 	bl	8000bb8 <__aeabi_d2uiz>
 800a6d6:	2801      	cmp	r0, #1
 800a6d8:	bf38      	it	cc
 800a6da:	2001      	movcc	r0, #1
 800a6dc:	f7f5 ff1a 	bl	8000514 <__aeabi_ui2d>
 800a6e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	4689      	mov	r9, r1
 800a6e6:	bb23      	cbnz	r3, 800a732 <_strtod_l+0xb9a>
 800a6e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6ec:	9010      	str	r0, [sp, #64]	; 0x40
 800a6ee:	9311      	str	r3, [sp, #68]	; 0x44
 800a6f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a700:	1a9b      	subs	r3, r3, r2
 800a702:	9309      	str	r3, [sp, #36]	; 0x24
 800a704:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a708:	eeb0 0a48 	vmov.f32	s0, s16
 800a70c:	eef0 0a68 	vmov.f32	s1, s17
 800a710:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a714:	f001 fe84 	bl	800c420 <__ulp>
 800a718:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a71c:	ec53 2b10 	vmov	r2, r3, d0
 800a720:	f7f5 ff72 	bl	8000608 <__aeabi_dmul>
 800a724:	ec53 2b18 	vmov	r2, r3, d8
 800a728:	f7f5 fdb8 	bl	800029c <__adddf3>
 800a72c:	4682      	mov	sl, r0
 800a72e:	468b      	mov	fp, r1
 800a730:	e78d      	b.n	800a64e <_strtod_l+0xab6>
 800a732:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a736:	e7db      	b.n	800a6f0 <_strtod_l+0xb58>
 800a738:	a311      	add	r3, pc, #68	; (adr r3, 800a780 <_strtod_l+0xbe8>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	f7f6 f9d5 	bl	8000aec <__aeabi_dcmplt>
 800a742:	e7b2      	b.n	800a6aa <_strtod_l+0xb12>
 800a744:	2300      	movs	r3, #0
 800a746:	930a      	str	r3, [sp, #40]	; 0x28
 800a748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a74a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	f7ff ba6b 	b.w	8009c28 <_strtod_l+0x90>
 800a752:	2a65      	cmp	r2, #101	; 0x65
 800a754:	f43f ab5f 	beq.w	8009e16 <_strtod_l+0x27e>
 800a758:	2a45      	cmp	r2, #69	; 0x45
 800a75a:	f43f ab5c 	beq.w	8009e16 <_strtod_l+0x27e>
 800a75e:	2301      	movs	r3, #1
 800a760:	f7ff bb94 	b.w	8009e8c <_strtod_l+0x2f4>
 800a764:	f3af 8000 	nop.w
 800a768:	94a03595 	.word	0x94a03595
 800a76c:	3fdfffff 	.word	0x3fdfffff
 800a770:	35afe535 	.word	0x35afe535
 800a774:	3fe00000 	.word	0x3fe00000
 800a778:	ffc00000 	.word	0xffc00000
 800a77c:	41dfffff 	.word	0x41dfffff
 800a780:	94a03595 	.word	0x94a03595
 800a784:	3fcfffff 	.word	0x3fcfffff
 800a788:	3ff00000 	.word	0x3ff00000
 800a78c:	7ff00000 	.word	0x7ff00000
 800a790:	7fe00000 	.word	0x7fe00000
 800a794:	7c9fffff 	.word	0x7c9fffff
 800a798:	3fe00000 	.word	0x3fe00000
 800a79c:	bff00000 	.word	0xbff00000
 800a7a0:	7fefffff 	.word	0x7fefffff

0800a7a4 <_strtod_r>:
 800a7a4:	4b01      	ldr	r3, [pc, #4]	; (800a7ac <_strtod_r+0x8>)
 800a7a6:	f7ff b9f7 	b.w	8009b98 <_strtod_l>
 800a7aa:	bf00      	nop
 800a7ac:	200000e4 	.word	0x200000e4

0800a7b0 <_strtol_l.constprop.0>:
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b6:	d001      	beq.n	800a7bc <_strtol_l.constprop.0+0xc>
 800a7b8:	2b24      	cmp	r3, #36	; 0x24
 800a7ba:	d906      	bls.n	800a7ca <_strtol_l.constprop.0+0x1a>
 800a7bc:	f7fe f950 	bl	8008a60 <__errno>
 800a7c0:	2316      	movs	r3, #22
 800a7c2:	6003      	str	r3, [r0, #0]
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a8b0 <_strtol_l.constprop.0+0x100>
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	462e      	mov	r6, r5
 800a7d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a7da:	f017 0708 	ands.w	r7, r7, #8
 800a7de:	d1f7      	bne.n	800a7d0 <_strtol_l.constprop.0+0x20>
 800a7e0:	2c2d      	cmp	r4, #45	; 0x2d
 800a7e2:	d132      	bne.n	800a84a <_strtol_l.constprop.0+0x9a>
 800a7e4:	782c      	ldrb	r4, [r5, #0]
 800a7e6:	2701      	movs	r7, #1
 800a7e8:	1cb5      	adds	r5, r6, #2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d05b      	beq.n	800a8a6 <_strtol_l.constprop.0+0xf6>
 800a7ee:	2b10      	cmp	r3, #16
 800a7f0:	d109      	bne.n	800a806 <_strtol_l.constprop.0+0x56>
 800a7f2:	2c30      	cmp	r4, #48	; 0x30
 800a7f4:	d107      	bne.n	800a806 <_strtol_l.constprop.0+0x56>
 800a7f6:	782c      	ldrb	r4, [r5, #0]
 800a7f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a7fc:	2c58      	cmp	r4, #88	; 0x58
 800a7fe:	d14d      	bne.n	800a89c <_strtol_l.constprop.0+0xec>
 800a800:	786c      	ldrb	r4, [r5, #1]
 800a802:	2310      	movs	r3, #16
 800a804:	3502      	adds	r5, #2
 800a806:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a80a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a80e:	f04f 0c00 	mov.w	ip, #0
 800a812:	fbb8 f9f3 	udiv	r9, r8, r3
 800a816:	4666      	mov	r6, ip
 800a818:	fb03 8a19 	mls	sl, r3, r9, r8
 800a81c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a820:	f1be 0f09 	cmp.w	lr, #9
 800a824:	d816      	bhi.n	800a854 <_strtol_l.constprop.0+0xa4>
 800a826:	4674      	mov	r4, lr
 800a828:	42a3      	cmp	r3, r4
 800a82a:	dd24      	ble.n	800a876 <_strtol_l.constprop.0+0xc6>
 800a82c:	f1bc 0f00 	cmp.w	ip, #0
 800a830:	db1e      	blt.n	800a870 <_strtol_l.constprop.0+0xc0>
 800a832:	45b1      	cmp	r9, r6
 800a834:	d31c      	bcc.n	800a870 <_strtol_l.constprop.0+0xc0>
 800a836:	d101      	bne.n	800a83c <_strtol_l.constprop.0+0x8c>
 800a838:	45a2      	cmp	sl, r4
 800a83a:	db19      	blt.n	800a870 <_strtol_l.constprop.0+0xc0>
 800a83c:	fb06 4603 	mla	r6, r6, r3, r4
 800a840:	f04f 0c01 	mov.w	ip, #1
 800a844:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a848:	e7e8      	b.n	800a81c <_strtol_l.constprop.0+0x6c>
 800a84a:	2c2b      	cmp	r4, #43	; 0x2b
 800a84c:	bf04      	itt	eq
 800a84e:	782c      	ldrbeq	r4, [r5, #0]
 800a850:	1cb5      	addeq	r5, r6, #2
 800a852:	e7ca      	b.n	800a7ea <_strtol_l.constprop.0+0x3a>
 800a854:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a858:	f1be 0f19 	cmp.w	lr, #25
 800a85c:	d801      	bhi.n	800a862 <_strtol_l.constprop.0+0xb2>
 800a85e:	3c37      	subs	r4, #55	; 0x37
 800a860:	e7e2      	b.n	800a828 <_strtol_l.constprop.0+0x78>
 800a862:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a866:	f1be 0f19 	cmp.w	lr, #25
 800a86a:	d804      	bhi.n	800a876 <_strtol_l.constprop.0+0xc6>
 800a86c:	3c57      	subs	r4, #87	; 0x57
 800a86e:	e7db      	b.n	800a828 <_strtol_l.constprop.0+0x78>
 800a870:	f04f 3cff 	mov.w	ip, #4294967295
 800a874:	e7e6      	b.n	800a844 <_strtol_l.constprop.0+0x94>
 800a876:	f1bc 0f00 	cmp.w	ip, #0
 800a87a:	da05      	bge.n	800a888 <_strtol_l.constprop.0+0xd8>
 800a87c:	2322      	movs	r3, #34	; 0x22
 800a87e:	6003      	str	r3, [r0, #0]
 800a880:	4646      	mov	r6, r8
 800a882:	b942      	cbnz	r2, 800a896 <_strtol_l.constprop.0+0xe6>
 800a884:	4630      	mov	r0, r6
 800a886:	e79e      	b.n	800a7c6 <_strtol_l.constprop.0+0x16>
 800a888:	b107      	cbz	r7, 800a88c <_strtol_l.constprop.0+0xdc>
 800a88a:	4276      	negs	r6, r6
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	d0f9      	beq.n	800a884 <_strtol_l.constprop.0+0xd4>
 800a890:	f1bc 0f00 	cmp.w	ip, #0
 800a894:	d000      	beq.n	800a898 <_strtol_l.constprop.0+0xe8>
 800a896:	1e69      	subs	r1, r5, #1
 800a898:	6011      	str	r1, [r2, #0]
 800a89a:	e7f3      	b.n	800a884 <_strtol_l.constprop.0+0xd4>
 800a89c:	2430      	movs	r4, #48	; 0x30
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1b1      	bne.n	800a806 <_strtol_l.constprop.0+0x56>
 800a8a2:	2308      	movs	r3, #8
 800a8a4:	e7af      	b.n	800a806 <_strtol_l.constprop.0+0x56>
 800a8a6:	2c30      	cmp	r4, #48	; 0x30
 800a8a8:	d0a5      	beq.n	800a7f6 <_strtol_l.constprop.0+0x46>
 800a8aa:	230a      	movs	r3, #10
 800a8ac:	e7ab      	b.n	800a806 <_strtol_l.constprop.0+0x56>
 800a8ae:	bf00      	nop
 800a8b0:	0800fcc1 	.word	0x0800fcc1

0800a8b4 <_strtol_r>:
 800a8b4:	f7ff bf7c 	b.w	800a7b0 <_strtol_l.constprop.0>

0800a8b8 <_write_r>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	4d07      	ldr	r5, [pc, #28]	; (800a8d8 <_write_r+0x20>)
 800a8bc:	4604      	mov	r4, r0
 800a8be:	4608      	mov	r0, r1
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	602a      	str	r2, [r5, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f7f9 f8ef 	bl	8003aaa <_write>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	d102      	bne.n	800a8d6 <_write_r+0x1e>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	b103      	cbz	r3, 800a8d6 <_write_r+0x1e>
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	20000b68 	.word	0x20000b68

0800a8dc <_close_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4d06      	ldr	r5, [pc, #24]	; (800a8f8 <_close_r+0x1c>)
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	602b      	str	r3, [r5, #0]
 800a8e8:	f7f9 f8fb 	bl	8003ae2 <_close>
 800a8ec:	1c43      	adds	r3, r0, #1
 800a8ee:	d102      	bne.n	800a8f6 <_close_r+0x1a>
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	b103      	cbz	r3, 800a8f6 <_close_r+0x1a>
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	bd38      	pop	{r3, r4, r5, pc}
 800a8f8:	20000b68 	.word	0x20000b68

0800a8fc <quorem>:
 800a8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	6903      	ldr	r3, [r0, #16]
 800a902:	690c      	ldr	r4, [r1, #16]
 800a904:	42a3      	cmp	r3, r4
 800a906:	4607      	mov	r7, r0
 800a908:	f2c0 8081 	blt.w	800aa0e <quorem+0x112>
 800a90c:	3c01      	subs	r4, #1
 800a90e:	f101 0814 	add.w	r8, r1, #20
 800a912:	f100 0514 	add.w	r5, r0, #20
 800a916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a91a:	9301      	str	r3, [sp, #4]
 800a91c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a924:	3301      	adds	r3, #1
 800a926:	429a      	cmp	r2, r3
 800a928:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a92c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a930:	fbb2 f6f3 	udiv	r6, r2, r3
 800a934:	d331      	bcc.n	800a99a <quorem+0x9e>
 800a936:	f04f 0e00 	mov.w	lr, #0
 800a93a:	4640      	mov	r0, r8
 800a93c:	46ac      	mov	ip, r5
 800a93e:	46f2      	mov	sl, lr
 800a940:	f850 2b04 	ldr.w	r2, [r0], #4
 800a944:	b293      	uxth	r3, r2
 800a946:	fb06 e303 	mla	r3, r6, r3, lr
 800a94a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a94e:	b29b      	uxth	r3, r3
 800a950:	ebaa 0303 	sub.w	r3, sl, r3
 800a954:	f8dc a000 	ldr.w	sl, [ip]
 800a958:	0c12      	lsrs	r2, r2, #16
 800a95a:	fa13 f38a 	uxtah	r3, r3, sl
 800a95e:	fb06 e202 	mla	r2, r6, r2, lr
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	9b00      	ldr	r3, [sp, #0]
 800a966:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a96a:	b292      	uxth	r2, r2
 800a96c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a974:	f8bd 3000 	ldrh.w	r3, [sp]
 800a978:	4581      	cmp	r9, r0
 800a97a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a97e:	f84c 3b04 	str.w	r3, [ip], #4
 800a982:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a986:	d2db      	bcs.n	800a940 <quorem+0x44>
 800a988:	f855 300b 	ldr.w	r3, [r5, fp]
 800a98c:	b92b      	cbnz	r3, 800a99a <quorem+0x9e>
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	3b04      	subs	r3, #4
 800a992:	429d      	cmp	r5, r3
 800a994:	461a      	mov	r2, r3
 800a996:	d32e      	bcc.n	800a9f6 <quorem+0xfa>
 800a998:	613c      	str	r4, [r7, #16]
 800a99a:	4638      	mov	r0, r7
 800a99c:	f001 fc9a 	bl	800c2d4 <__mcmp>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	db24      	blt.n	800a9ee <quorem+0xf2>
 800a9a4:	3601      	adds	r6, #1
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f04f 0c00 	mov.w	ip, #0
 800a9ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9b0:	f8d0 e000 	ldr.w	lr, [r0]
 800a9b4:	b293      	uxth	r3, r2
 800a9b6:	ebac 0303 	sub.w	r3, ip, r3
 800a9ba:	0c12      	lsrs	r2, r2, #16
 800a9bc:	fa13 f38e 	uxtah	r3, r3, lr
 800a9c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9ce:	45c1      	cmp	r9, r8
 800a9d0:	f840 3b04 	str.w	r3, [r0], #4
 800a9d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9d8:	d2e8      	bcs.n	800a9ac <quorem+0xb0>
 800a9da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9e2:	b922      	cbnz	r2, 800a9ee <quorem+0xf2>
 800a9e4:	3b04      	subs	r3, #4
 800a9e6:	429d      	cmp	r5, r3
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	d30a      	bcc.n	800aa02 <quorem+0x106>
 800a9ec:	613c      	str	r4, [r7, #16]
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	b003      	add	sp, #12
 800a9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f6:	6812      	ldr	r2, [r2, #0]
 800a9f8:	3b04      	subs	r3, #4
 800a9fa:	2a00      	cmp	r2, #0
 800a9fc:	d1cc      	bne.n	800a998 <quorem+0x9c>
 800a9fe:	3c01      	subs	r4, #1
 800aa00:	e7c7      	b.n	800a992 <quorem+0x96>
 800aa02:	6812      	ldr	r2, [r2, #0]
 800aa04:	3b04      	subs	r3, #4
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	d1f0      	bne.n	800a9ec <quorem+0xf0>
 800aa0a:	3c01      	subs	r4, #1
 800aa0c:	e7eb      	b.n	800a9e6 <quorem+0xea>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	e7ee      	b.n	800a9f0 <quorem+0xf4>
 800aa12:	0000      	movs	r0, r0
 800aa14:	0000      	movs	r0, r0
	...

0800aa18 <_dtoa_r>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	ed2d 8b04 	vpush	{d8-d9}
 800aa20:	ec57 6b10 	vmov	r6, r7, d0
 800aa24:	b093      	sub	sp, #76	; 0x4c
 800aa26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa2c:	9106      	str	r1, [sp, #24]
 800aa2e:	ee10 aa10 	vmov	sl, s0
 800aa32:	4604      	mov	r4, r0
 800aa34:	9209      	str	r2, [sp, #36]	; 0x24
 800aa36:	930c      	str	r3, [sp, #48]	; 0x30
 800aa38:	46bb      	mov	fp, r7
 800aa3a:	b975      	cbnz	r5, 800aa5a <_dtoa_r+0x42>
 800aa3c:	2010      	movs	r0, #16
 800aa3e:	f7fe f839 	bl	8008ab4 <malloc>
 800aa42:	4602      	mov	r2, r0
 800aa44:	6260      	str	r0, [r4, #36]	; 0x24
 800aa46:	b920      	cbnz	r0, 800aa52 <_dtoa_r+0x3a>
 800aa48:	4ba7      	ldr	r3, [pc, #668]	; (800ace8 <_dtoa_r+0x2d0>)
 800aa4a:	21ea      	movs	r1, #234	; 0xea
 800aa4c:	48a7      	ldr	r0, [pc, #668]	; (800acec <_dtoa_r+0x2d4>)
 800aa4e:	f002 fbdb 	bl	800d208 <__assert_func>
 800aa52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa56:	6005      	str	r5, [r0, #0]
 800aa58:	60c5      	str	r5, [r0, #12]
 800aa5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa5c:	6819      	ldr	r1, [r3, #0]
 800aa5e:	b151      	cbz	r1, 800aa76 <_dtoa_r+0x5e>
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	604a      	str	r2, [r1, #4]
 800aa64:	2301      	movs	r3, #1
 800aa66:	4093      	lsls	r3, r2
 800aa68:	608b      	str	r3, [r1, #8]
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f001 f9a6 	bl	800bdbc <_Bfree>
 800aa70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	1e3b      	subs	r3, r7, #0
 800aa78:	bfaa      	itet	ge
 800aa7a:	2300      	movge	r3, #0
 800aa7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aa80:	f8c8 3000 	strge.w	r3, [r8]
 800aa84:	4b9a      	ldr	r3, [pc, #616]	; (800acf0 <_dtoa_r+0x2d8>)
 800aa86:	bfbc      	itt	lt
 800aa88:	2201      	movlt	r2, #1
 800aa8a:	f8c8 2000 	strlt.w	r2, [r8]
 800aa8e:	ea33 030b 	bics.w	r3, r3, fp
 800aa92:	d11b      	bne.n	800aacc <_dtoa_r+0xb4>
 800aa94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa96:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaa0:	4333      	orrs	r3, r6
 800aaa2:	f000 8592 	beq.w	800b5ca <_dtoa_r+0xbb2>
 800aaa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaa8:	b963      	cbnz	r3, 800aac4 <_dtoa_r+0xac>
 800aaaa:	4b92      	ldr	r3, [pc, #584]	; (800acf4 <_dtoa_r+0x2dc>)
 800aaac:	e022      	b.n	800aaf4 <_dtoa_r+0xdc>
 800aaae:	4b92      	ldr	r3, [pc, #584]	; (800acf8 <_dtoa_r+0x2e0>)
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	3308      	adds	r3, #8
 800aab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	9801      	ldr	r0, [sp, #4]
 800aaba:	b013      	add	sp, #76	; 0x4c
 800aabc:	ecbd 8b04 	vpop	{d8-d9}
 800aac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac4:	4b8b      	ldr	r3, [pc, #556]	; (800acf4 <_dtoa_r+0x2dc>)
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	3303      	adds	r3, #3
 800aaca:	e7f3      	b.n	800aab4 <_dtoa_r+0x9c>
 800aacc:	2200      	movs	r2, #0
 800aace:	2300      	movs	r3, #0
 800aad0:	4650      	mov	r0, sl
 800aad2:	4659      	mov	r1, fp
 800aad4:	f7f6 f800 	bl	8000ad8 <__aeabi_dcmpeq>
 800aad8:	ec4b ab19 	vmov	d9, sl, fp
 800aadc:	4680      	mov	r8, r0
 800aade:	b158      	cbz	r0, 800aaf8 <_dtoa_r+0xe0>
 800aae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aae2:	2301      	movs	r3, #1
 800aae4:	6013      	str	r3, [r2, #0]
 800aae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 856b 	beq.w	800b5c4 <_dtoa_r+0xbac>
 800aaee:	4883      	ldr	r0, [pc, #524]	; (800acfc <_dtoa_r+0x2e4>)
 800aaf0:	6018      	str	r0, [r3, #0]
 800aaf2:	1e43      	subs	r3, r0, #1
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	e7df      	b.n	800aab8 <_dtoa_r+0xa0>
 800aaf8:	ec4b ab10 	vmov	d0, sl, fp
 800aafc:	aa10      	add	r2, sp, #64	; 0x40
 800aafe:	a911      	add	r1, sp, #68	; 0x44
 800ab00:	4620      	mov	r0, r4
 800ab02:	f001 fd09 	bl	800c518 <__d2b>
 800ab06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ab0a:	ee08 0a10 	vmov	s16, r0
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	f000 8084 	beq.w	800ac1c <_dtoa_r+0x204>
 800ab14:	ee19 3a90 	vmov	r3, s19
 800ab18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab20:	4656      	mov	r6, sl
 800ab22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ab2e:	4b74      	ldr	r3, [pc, #464]	; (800ad00 <_dtoa_r+0x2e8>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	4630      	mov	r0, r6
 800ab34:	4639      	mov	r1, r7
 800ab36:	f7f5 fbaf 	bl	8000298 <__aeabi_dsub>
 800ab3a:	a365      	add	r3, pc, #404	; (adr r3, 800acd0 <_dtoa_r+0x2b8>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fd62 	bl	8000608 <__aeabi_dmul>
 800ab44:	a364      	add	r3, pc, #400	; (adr r3, 800acd8 <_dtoa_r+0x2c0>)
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	f7f5 fba7 	bl	800029c <__adddf3>
 800ab4e:	4606      	mov	r6, r0
 800ab50:	4628      	mov	r0, r5
 800ab52:	460f      	mov	r7, r1
 800ab54:	f7f5 fcee 	bl	8000534 <__aeabi_i2d>
 800ab58:	a361      	add	r3, pc, #388	; (adr r3, 800ace0 <_dtoa_r+0x2c8>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	f7f5 fd53 	bl	8000608 <__aeabi_dmul>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4630      	mov	r0, r6
 800ab68:	4639      	mov	r1, r7
 800ab6a:	f7f5 fb97 	bl	800029c <__adddf3>
 800ab6e:	4606      	mov	r6, r0
 800ab70:	460f      	mov	r7, r1
 800ab72:	f7f5 fff9 	bl	8000b68 <__aeabi_d2iz>
 800ab76:	2200      	movs	r2, #0
 800ab78:	9000      	str	r0, [sp, #0]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	4639      	mov	r1, r7
 800ab80:	f7f5 ffb4 	bl	8000aec <__aeabi_dcmplt>
 800ab84:	b150      	cbz	r0, 800ab9c <_dtoa_r+0x184>
 800ab86:	9800      	ldr	r0, [sp, #0]
 800ab88:	f7f5 fcd4 	bl	8000534 <__aeabi_i2d>
 800ab8c:	4632      	mov	r2, r6
 800ab8e:	463b      	mov	r3, r7
 800ab90:	f7f5 ffa2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab94:	b910      	cbnz	r0, 800ab9c <_dtoa_r+0x184>
 800ab96:	9b00      	ldr	r3, [sp, #0]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	9b00      	ldr	r3, [sp, #0]
 800ab9e:	2b16      	cmp	r3, #22
 800aba0:	d85a      	bhi.n	800ac58 <_dtoa_r+0x240>
 800aba2:	9a00      	ldr	r2, [sp, #0]
 800aba4:	4b57      	ldr	r3, [pc, #348]	; (800ad04 <_dtoa_r+0x2ec>)
 800aba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	ec51 0b19 	vmov	r0, r1, d9
 800abb2:	f7f5 ff9b 	bl	8000aec <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d050      	beq.n	800ac5c <_dtoa_r+0x244>
 800abba:	9b00      	ldr	r3, [sp, #0]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	2300      	movs	r3, #0
 800abc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800abc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abc6:	1b5d      	subs	r5, r3, r5
 800abc8:	1e6b      	subs	r3, r5, #1
 800abca:	9305      	str	r3, [sp, #20]
 800abcc:	bf45      	ittet	mi
 800abce:	f1c5 0301 	rsbmi	r3, r5, #1
 800abd2:	9304      	strmi	r3, [sp, #16]
 800abd4:	2300      	movpl	r3, #0
 800abd6:	2300      	movmi	r3, #0
 800abd8:	bf4c      	ite	mi
 800abda:	9305      	strmi	r3, [sp, #20]
 800abdc:	9304      	strpl	r3, [sp, #16]
 800abde:	9b00      	ldr	r3, [sp, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	db3d      	blt.n	800ac60 <_dtoa_r+0x248>
 800abe4:	9b05      	ldr	r3, [sp, #20]
 800abe6:	9a00      	ldr	r2, [sp, #0]
 800abe8:	920a      	str	r2, [sp, #40]	; 0x28
 800abea:	4413      	add	r3, r2
 800abec:	9305      	str	r3, [sp, #20]
 800abee:	2300      	movs	r3, #0
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	9b06      	ldr	r3, [sp, #24]
 800abf4:	2b09      	cmp	r3, #9
 800abf6:	f200 8089 	bhi.w	800ad0c <_dtoa_r+0x2f4>
 800abfa:	2b05      	cmp	r3, #5
 800abfc:	bfc4      	itt	gt
 800abfe:	3b04      	subgt	r3, #4
 800ac00:	9306      	strgt	r3, [sp, #24]
 800ac02:	9b06      	ldr	r3, [sp, #24]
 800ac04:	f1a3 0302 	sub.w	r3, r3, #2
 800ac08:	bfcc      	ite	gt
 800ac0a:	2500      	movgt	r5, #0
 800ac0c:	2501      	movle	r5, #1
 800ac0e:	2b03      	cmp	r3, #3
 800ac10:	f200 8087 	bhi.w	800ad22 <_dtoa_r+0x30a>
 800ac14:	e8df f003 	tbb	[pc, r3]
 800ac18:	59383a2d 	.word	0x59383a2d
 800ac1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac20:	441d      	add	r5, r3
 800ac22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac26:	2b20      	cmp	r3, #32
 800ac28:	bfc1      	itttt	gt
 800ac2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac32:	fa0b f303 	lslgt.w	r3, fp, r3
 800ac36:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac3a:	bfda      	itte	le
 800ac3c:	f1c3 0320 	rsble	r3, r3, #32
 800ac40:	fa06 f003 	lslle.w	r0, r6, r3
 800ac44:	4318      	orrgt	r0, r3
 800ac46:	f7f5 fc65 	bl	8000514 <__aeabi_ui2d>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac52:	3d01      	subs	r5, #1
 800ac54:	930e      	str	r3, [sp, #56]	; 0x38
 800ac56:	e76a      	b.n	800ab2e <_dtoa_r+0x116>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e7b2      	b.n	800abc2 <_dtoa_r+0x1aa>
 800ac5c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac5e:	e7b1      	b.n	800abc4 <_dtoa_r+0x1ac>
 800ac60:	9b04      	ldr	r3, [sp, #16]
 800ac62:	9a00      	ldr	r2, [sp, #0]
 800ac64:	1a9b      	subs	r3, r3, r2
 800ac66:	9304      	str	r3, [sp, #16]
 800ac68:	4253      	negs	r3, r2
 800ac6a:	9307      	str	r3, [sp, #28]
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac70:	e7bf      	b.n	800abf2 <_dtoa_r+0x1da>
 800ac72:	2300      	movs	r3, #0
 800ac74:	9308      	str	r3, [sp, #32]
 800ac76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dc55      	bgt.n	800ad28 <_dtoa_r+0x310>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac82:	461a      	mov	r2, r3
 800ac84:	9209      	str	r2, [sp, #36]	; 0x24
 800ac86:	e00c      	b.n	800aca2 <_dtoa_r+0x28a>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e7f3      	b.n	800ac74 <_dtoa_r+0x25c>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac90:	9308      	str	r3, [sp, #32]
 800ac92:	9b00      	ldr	r3, [sp, #0]
 800ac94:	4413      	add	r3, r2
 800ac96:	9302      	str	r3, [sp, #8]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	9303      	str	r3, [sp, #12]
 800ac9e:	bfb8      	it	lt
 800aca0:	2301      	movlt	r3, #1
 800aca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aca4:	2200      	movs	r2, #0
 800aca6:	6042      	str	r2, [r0, #4]
 800aca8:	2204      	movs	r2, #4
 800acaa:	f102 0614 	add.w	r6, r2, #20
 800acae:	429e      	cmp	r6, r3
 800acb0:	6841      	ldr	r1, [r0, #4]
 800acb2:	d93d      	bls.n	800ad30 <_dtoa_r+0x318>
 800acb4:	4620      	mov	r0, r4
 800acb6:	f001 f841 	bl	800bd3c <_Balloc>
 800acba:	9001      	str	r0, [sp, #4]
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d13b      	bne.n	800ad38 <_dtoa_r+0x320>
 800acc0:	4b11      	ldr	r3, [pc, #68]	; (800ad08 <_dtoa_r+0x2f0>)
 800acc2:	4602      	mov	r2, r0
 800acc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800acc8:	e6c0      	b.n	800aa4c <_dtoa_r+0x34>
 800acca:	2301      	movs	r3, #1
 800accc:	e7df      	b.n	800ac8e <_dtoa_r+0x276>
 800acce:	bf00      	nop
 800acd0:	636f4361 	.word	0x636f4361
 800acd4:	3fd287a7 	.word	0x3fd287a7
 800acd8:	8b60c8b3 	.word	0x8b60c8b3
 800acdc:	3fc68a28 	.word	0x3fc68a28
 800ace0:	509f79fb 	.word	0x509f79fb
 800ace4:	3fd34413 	.word	0x3fd34413
 800ace8:	0800fdce 	.word	0x0800fdce
 800acec:	0800fde5 	.word	0x0800fde5
 800acf0:	7ff00000 	.word	0x7ff00000
 800acf4:	0800fdca 	.word	0x0800fdca
 800acf8:	0800fdc1 	.word	0x0800fdc1
 800acfc:	0801003a 	.word	0x0801003a
 800ad00:	3ff80000 	.word	0x3ff80000
 800ad04:	0800ff50 	.word	0x0800ff50
 800ad08:	0800fe40 	.word	0x0800fe40
 800ad0c:	2501      	movs	r5, #1
 800ad0e:	2300      	movs	r3, #0
 800ad10:	9306      	str	r3, [sp, #24]
 800ad12:	9508      	str	r5, [sp, #32]
 800ad14:	f04f 33ff 	mov.w	r3, #4294967295
 800ad18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2312      	movs	r3, #18
 800ad20:	e7b0      	b.n	800ac84 <_dtoa_r+0x26c>
 800ad22:	2301      	movs	r3, #1
 800ad24:	9308      	str	r3, [sp, #32]
 800ad26:	e7f5      	b.n	800ad14 <_dtoa_r+0x2fc>
 800ad28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad2e:	e7b8      	b.n	800aca2 <_dtoa_r+0x28a>
 800ad30:	3101      	adds	r1, #1
 800ad32:	6041      	str	r1, [r0, #4]
 800ad34:	0052      	lsls	r2, r2, #1
 800ad36:	e7b8      	b.n	800acaa <_dtoa_r+0x292>
 800ad38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad3a:	9a01      	ldr	r2, [sp, #4]
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	9b03      	ldr	r3, [sp, #12]
 800ad40:	2b0e      	cmp	r3, #14
 800ad42:	f200 809d 	bhi.w	800ae80 <_dtoa_r+0x468>
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	f000 809a 	beq.w	800ae80 <_dtoa_r+0x468>
 800ad4c:	9b00      	ldr	r3, [sp, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	dd32      	ble.n	800adb8 <_dtoa_r+0x3a0>
 800ad52:	4ab7      	ldr	r2, [pc, #732]	; (800b030 <_dtoa_r+0x618>)
 800ad54:	f003 030f 	and.w	r3, r3, #15
 800ad58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad60:	9b00      	ldr	r3, [sp, #0]
 800ad62:	05d8      	lsls	r0, r3, #23
 800ad64:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ad68:	d516      	bpl.n	800ad98 <_dtoa_r+0x380>
 800ad6a:	4bb2      	ldr	r3, [pc, #712]	; (800b034 <_dtoa_r+0x61c>)
 800ad6c:	ec51 0b19 	vmov	r0, r1, d9
 800ad70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad74:	f7f5 fd72 	bl	800085c <__aeabi_ddiv>
 800ad78:	f007 070f 	and.w	r7, r7, #15
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	468b      	mov	fp, r1
 800ad80:	2503      	movs	r5, #3
 800ad82:	4eac      	ldr	r6, [pc, #688]	; (800b034 <_dtoa_r+0x61c>)
 800ad84:	b957      	cbnz	r7, 800ad9c <_dtoa_r+0x384>
 800ad86:	4642      	mov	r2, r8
 800ad88:	464b      	mov	r3, r9
 800ad8a:	4650      	mov	r0, sl
 800ad8c:	4659      	mov	r1, fp
 800ad8e:	f7f5 fd65 	bl	800085c <__aeabi_ddiv>
 800ad92:	4682      	mov	sl, r0
 800ad94:	468b      	mov	fp, r1
 800ad96:	e028      	b.n	800adea <_dtoa_r+0x3d2>
 800ad98:	2502      	movs	r5, #2
 800ad9a:	e7f2      	b.n	800ad82 <_dtoa_r+0x36a>
 800ad9c:	07f9      	lsls	r1, r7, #31
 800ad9e:	d508      	bpl.n	800adb2 <_dtoa_r+0x39a>
 800ada0:	4640      	mov	r0, r8
 800ada2:	4649      	mov	r1, r9
 800ada4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ada8:	f7f5 fc2e 	bl	8000608 <__aeabi_dmul>
 800adac:	3501      	adds	r5, #1
 800adae:	4680      	mov	r8, r0
 800adb0:	4689      	mov	r9, r1
 800adb2:	107f      	asrs	r7, r7, #1
 800adb4:	3608      	adds	r6, #8
 800adb6:	e7e5      	b.n	800ad84 <_dtoa_r+0x36c>
 800adb8:	f000 809b 	beq.w	800aef2 <_dtoa_r+0x4da>
 800adbc:	9b00      	ldr	r3, [sp, #0]
 800adbe:	4f9d      	ldr	r7, [pc, #628]	; (800b034 <_dtoa_r+0x61c>)
 800adc0:	425e      	negs	r6, r3
 800adc2:	4b9b      	ldr	r3, [pc, #620]	; (800b030 <_dtoa_r+0x618>)
 800adc4:	f006 020f 	and.w	r2, r6, #15
 800adc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	ec51 0b19 	vmov	r0, r1, d9
 800add4:	f7f5 fc18 	bl	8000608 <__aeabi_dmul>
 800add8:	1136      	asrs	r6, r6, #4
 800adda:	4682      	mov	sl, r0
 800addc:	468b      	mov	fp, r1
 800adde:	2300      	movs	r3, #0
 800ade0:	2502      	movs	r5, #2
 800ade2:	2e00      	cmp	r6, #0
 800ade4:	d17a      	bne.n	800aedc <_dtoa_r+0x4c4>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1d3      	bne.n	800ad92 <_dtoa_r+0x37a>
 800adea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 8082 	beq.w	800aef6 <_dtoa_r+0x4de>
 800adf2:	4b91      	ldr	r3, [pc, #580]	; (800b038 <_dtoa_r+0x620>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	4650      	mov	r0, sl
 800adf8:	4659      	mov	r1, fp
 800adfa:	f7f5 fe77 	bl	8000aec <__aeabi_dcmplt>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d079      	beq.n	800aef6 <_dtoa_r+0x4de>
 800ae02:	9b03      	ldr	r3, [sp, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d076      	beq.n	800aef6 <_dtoa_r+0x4de>
 800ae08:	9b02      	ldr	r3, [sp, #8]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	dd36      	ble.n	800ae7c <_dtoa_r+0x464>
 800ae0e:	9b00      	ldr	r3, [sp, #0]
 800ae10:	4650      	mov	r0, sl
 800ae12:	4659      	mov	r1, fp
 800ae14:	1e5f      	subs	r7, r3, #1
 800ae16:	2200      	movs	r2, #0
 800ae18:	4b88      	ldr	r3, [pc, #544]	; (800b03c <_dtoa_r+0x624>)
 800ae1a:	f7f5 fbf5 	bl	8000608 <__aeabi_dmul>
 800ae1e:	9e02      	ldr	r6, [sp, #8]
 800ae20:	4682      	mov	sl, r0
 800ae22:	468b      	mov	fp, r1
 800ae24:	3501      	adds	r5, #1
 800ae26:	4628      	mov	r0, r5
 800ae28:	f7f5 fb84 	bl	8000534 <__aeabi_i2d>
 800ae2c:	4652      	mov	r2, sl
 800ae2e:	465b      	mov	r3, fp
 800ae30:	f7f5 fbea 	bl	8000608 <__aeabi_dmul>
 800ae34:	4b82      	ldr	r3, [pc, #520]	; (800b040 <_dtoa_r+0x628>)
 800ae36:	2200      	movs	r2, #0
 800ae38:	f7f5 fa30 	bl	800029c <__adddf3>
 800ae3c:	46d0      	mov	r8, sl
 800ae3e:	46d9      	mov	r9, fp
 800ae40:	4682      	mov	sl, r0
 800ae42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ae46:	2e00      	cmp	r6, #0
 800ae48:	d158      	bne.n	800aefc <_dtoa_r+0x4e4>
 800ae4a:	4b7e      	ldr	r3, [pc, #504]	; (800b044 <_dtoa_r+0x62c>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	4640      	mov	r0, r8
 800ae50:	4649      	mov	r1, r9
 800ae52:	f7f5 fa21 	bl	8000298 <__aeabi_dsub>
 800ae56:	4652      	mov	r2, sl
 800ae58:	465b      	mov	r3, fp
 800ae5a:	4680      	mov	r8, r0
 800ae5c:	4689      	mov	r9, r1
 800ae5e:	f7f5 fe63 	bl	8000b28 <__aeabi_dcmpgt>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	f040 8295 	bne.w	800b392 <_dtoa_r+0x97a>
 800ae68:	4652      	mov	r2, sl
 800ae6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ae6e:	4640      	mov	r0, r8
 800ae70:	4649      	mov	r1, r9
 800ae72:	f7f5 fe3b 	bl	8000aec <__aeabi_dcmplt>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	f040 8289 	bne.w	800b38e <_dtoa_r+0x976>
 800ae7c:	ec5b ab19 	vmov	sl, fp, d9
 800ae80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f2c0 8148 	blt.w	800b118 <_dtoa_r+0x700>
 800ae88:	9a00      	ldr	r2, [sp, #0]
 800ae8a:	2a0e      	cmp	r2, #14
 800ae8c:	f300 8144 	bgt.w	800b118 <_dtoa_r+0x700>
 800ae90:	4b67      	ldr	r3, [pc, #412]	; (800b030 <_dtoa_r+0x618>)
 800ae92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae96:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f280 80d5 	bge.w	800b04c <_dtoa_r+0x634>
 800aea2:	9b03      	ldr	r3, [sp, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f300 80d1 	bgt.w	800b04c <_dtoa_r+0x634>
 800aeaa:	f040 826f 	bne.w	800b38c <_dtoa_r+0x974>
 800aeae:	4b65      	ldr	r3, [pc, #404]	; (800b044 <_dtoa_r+0x62c>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	4640      	mov	r0, r8
 800aeb4:	4649      	mov	r1, r9
 800aeb6:	f7f5 fba7 	bl	8000608 <__aeabi_dmul>
 800aeba:	4652      	mov	r2, sl
 800aebc:	465b      	mov	r3, fp
 800aebe:	f7f5 fe29 	bl	8000b14 <__aeabi_dcmpge>
 800aec2:	9e03      	ldr	r6, [sp, #12]
 800aec4:	4637      	mov	r7, r6
 800aec6:	2800      	cmp	r0, #0
 800aec8:	f040 8245 	bne.w	800b356 <_dtoa_r+0x93e>
 800aecc:	9d01      	ldr	r5, [sp, #4]
 800aece:	2331      	movs	r3, #49	; 0x31
 800aed0:	f805 3b01 	strb.w	r3, [r5], #1
 800aed4:	9b00      	ldr	r3, [sp, #0]
 800aed6:	3301      	adds	r3, #1
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	e240      	b.n	800b35e <_dtoa_r+0x946>
 800aedc:	07f2      	lsls	r2, r6, #31
 800aede:	d505      	bpl.n	800aeec <_dtoa_r+0x4d4>
 800aee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee4:	f7f5 fb90 	bl	8000608 <__aeabi_dmul>
 800aee8:	3501      	adds	r5, #1
 800aeea:	2301      	movs	r3, #1
 800aeec:	1076      	asrs	r6, r6, #1
 800aeee:	3708      	adds	r7, #8
 800aef0:	e777      	b.n	800ade2 <_dtoa_r+0x3ca>
 800aef2:	2502      	movs	r5, #2
 800aef4:	e779      	b.n	800adea <_dtoa_r+0x3d2>
 800aef6:	9f00      	ldr	r7, [sp, #0]
 800aef8:	9e03      	ldr	r6, [sp, #12]
 800aefa:	e794      	b.n	800ae26 <_dtoa_r+0x40e>
 800aefc:	9901      	ldr	r1, [sp, #4]
 800aefe:	4b4c      	ldr	r3, [pc, #304]	; (800b030 <_dtoa_r+0x618>)
 800af00:	4431      	add	r1, r6
 800af02:	910d      	str	r1, [sp, #52]	; 0x34
 800af04:	9908      	ldr	r1, [sp, #32]
 800af06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af0e:	2900      	cmp	r1, #0
 800af10:	d043      	beq.n	800af9a <_dtoa_r+0x582>
 800af12:	494d      	ldr	r1, [pc, #308]	; (800b048 <_dtoa_r+0x630>)
 800af14:	2000      	movs	r0, #0
 800af16:	f7f5 fca1 	bl	800085c <__aeabi_ddiv>
 800af1a:	4652      	mov	r2, sl
 800af1c:	465b      	mov	r3, fp
 800af1e:	f7f5 f9bb 	bl	8000298 <__aeabi_dsub>
 800af22:	9d01      	ldr	r5, [sp, #4]
 800af24:	4682      	mov	sl, r0
 800af26:	468b      	mov	fp, r1
 800af28:	4649      	mov	r1, r9
 800af2a:	4640      	mov	r0, r8
 800af2c:	f7f5 fe1c 	bl	8000b68 <__aeabi_d2iz>
 800af30:	4606      	mov	r6, r0
 800af32:	f7f5 faff 	bl	8000534 <__aeabi_i2d>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	4640      	mov	r0, r8
 800af3c:	4649      	mov	r1, r9
 800af3e:	f7f5 f9ab 	bl	8000298 <__aeabi_dsub>
 800af42:	3630      	adds	r6, #48	; 0x30
 800af44:	f805 6b01 	strb.w	r6, [r5], #1
 800af48:	4652      	mov	r2, sl
 800af4a:	465b      	mov	r3, fp
 800af4c:	4680      	mov	r8, r0
 800af4e:	4689      	mov	r9, r1
 800af50:	f7f5 fdcc 	bl	8000aec <__aeabi_dcmplt>
 800af54:	2800      	cmp	r0, #0
 800af56:	d163      	bne.n	800b020 <_dtoa_r+0x608>
 800af58:	4642      	mov	r2, r8
 800af5a:	464b      	mov	r3, r9
 800af5c:	4936      	ldr	r1, [pc, #216]	; (800b038 <_dtoa_r+0x620>)
 800af5e:	2000      	movs	r0, #0
 800af60:	f7f5 f99a 	bl	8000298 <__aeabi_dsub>
 800af64:	4652      	mov	r2, sl
 800af66:	465b      	mov	r3, fp
 800af68:	f7f5 fdc0 	bl	8000aec <__aeabi_dcmplt>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f040 80b5 	bne.w	800b0dc <_dtoa_r+0x6c4>
 800af72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af74:	429d      	cmp	r5, r3
 800af76:	d081      	beq.n	800ae7c <_dtoa_r+0x464>
 800af78:	4b30      	ldr	r3, [pc, #192]	; (800b03c <_dtoa_r+0x624>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	4650      	mov	r0, sl
 800af7e:	4659      	mov	r1, fp
 800af80:	f7f5 fb42 	bl	8000608 <__aeabi_dmul>
 800af84:	4b2d      	ldr	r3, [pc, #180]	; (800b03c <_dtoa_r+0x624>)
 800af86:	4682      	mov	sl, r0
 800af88:	468b      	mov	fp, r1
 800af8a:	4640      	mov	r0, r8
 800af8c:	4649      	mov	r1, r9
 800af8e:	2200      	movs	r2, #0
 800af90:	f7f5 fb3a 	bl	8000608 <__aeabi_dmul>
 800af94:	4680      	mov	r8, r0
 800af96:	4689      	mov	r9, r1
 800af98:	e7c6      	b.n	800af28 <_dtoa_r+0x510>
 800af9a:	4650      	mov	r0, sl
 800af9c:	4659      	mov	r1, fp
 800af9e:	f7f5 fb33 	bl	8000608 <__aeabi_dmul>
 800afa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afa4:	9d01      	ldr	r5, [sp, #4]
 800afa6:	930f      	str	r3, [sp, #60]	; 0x3c
 800afa8:	4682      	mov	sl, r0
 800afaa:	468b      	mov	fp, r1
 800afac:	4649      	mov	r1, r9
 800afae:	4640      	mov	r0, r8
 800afb0:	f7f5 fdda 	bl	8000b68 <__aeabi_d2iz>
 800afb4:	4606      	mov	r6, r0
 800afb6:	f7f5 fabd 	bl	8000534 <__aeabi_i2d>
 800afba:	3630      	adds	r6, #48	; 0x30
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	4640      	mov	r0, r8
 800afc2:	4649      	mov	r1, r9
 800afc4:	f7f5 f968 	bl	8000298 <__aeabi_dsub>
 800afc8:	f805 6b01 	strb.w	r6, [r5], #1
 800afcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afce:	429d      	cmp	r5, r3
 800afd0:	4680      	mov	r8, r0
 800afd2:	4689      	mov	r9, r1
 800afd4:	f04f 0200 	mov.w	r2, #0
 800afd8:	d124      	bne.n	800b024 <_dtoa_r+0x60c>
 800afda:	4b1b      	ldr	r3, [pc, #108]	; (800b048 <_dtoa_r+0x630>)
 800afdc:	4650      	mov	r0, sl
 800afde:	4659      	mov	r1, fp
 800afe0:	f7f5 f95c 	bl	800029c <__adddf3>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4640      	mov	r0, r8
 800afea:	4649      	mov	r1, r9
 800afec:	f7f5 fd9c 	bl	8000b28 <__aeabi_dcmpgt>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d173      	bne.n	800b0dc <_dtoa_r+0x6c4>
 800aff4:	4652      	mov	r2, sl
 800aff6:	465b      	mov	r3, fp
 800aff8:	4913      	ldr	r1, [pc, #76]	; (800b048 <_dtoa_r+0x630>)
 800affa:	2000      	movs	r0, #0
 800affc:	f7f5 f94c 	bl	8000298 <__aeabi_dsub>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	f7f5 fd70 	bl	8000aec <__aeabi_dcmplt>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	f43f af35 	beq.w	800ae7c <_dtoa_r+0x464>
 800b012:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b014:	1e6b      	subs	r3, r5, #1
 800b016:	930f      	str	r3, [sp, #60]	; 0x3c
 800b018:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b01c:	2b30      	cmp	r3, #48	; 0x30
 800b01e:	d0f8      	beq.n	800b012 <_dtoa_r+0x5fa>
 800b020:	9700      	str	r7, [sp, #0]
 800b022:	e049      	b.n	800b0b8 <_dtoa_r+0x6a0>
 800b024:	4b05      	ldr	r3, [pc, #20]	; (800b03c <_dtoa_r+0x624>)
 800b026:	f7f5 faef 	bl	8000608 <__aeabi_dmul>
 800b02a:	4680      	mov	r8, r0
 800b02c:	4689      	mov	r9, r1
 800b02e:	e7bd      	b.n	800afac <_dtoa_r+0x594>
 800b030:	0800ff50 	.word	0x0800ff50
 800b034:	0800ff28 	.word	0x0800ff28
 800b038:	3ff00000 	.word	0x3ff00000
 800b03c:	40240000 	.word	0x40240000
 800b040:	401c0000 	.word	0x401c0000
 800b044:	40140000 	.word	0x40140000
 800b048:	3fe00000 	.word	0x3fe00000
 800b04c:	9d01      	ldr	r5, [sp, #4]
 800b04e:	4656      	mov	r6, sl
 800b050:	465f      	mov	r7, fp
 800b052:	4642      	mov	r2, r8
 800b054:	464b      	mov	r3, r9
 800b056:	4630      	mov	r0, r6
 800b058:	4639      	mov	r1, r7
 800b05a:	f7f5 fbff 	bl	800085c <__aeabi_ddiv>
 800b05e:	f7f5 fd83 	bl	8000b68 <__aeabi_d2iz>
 800b062:	4682      	mov	sl, r0
 800b064:	f7f5 fa66 	bl	8000534 <__aeabi_i2d>
 800b068:	4642      	mov	r2, r8
 800b06a:	464b      	mov	r3, r9
 800b06c:	f7f5 facc 	bl	8000608 <__aeabi_dmul>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4630      	mov	r0, r6
 800b076:	4639      	mov	r1, r7
 800b078:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b07c:	f7f5 f90c 	bl	8000298 <__aeabi_dsub>
 800b080:	f805 6b01 	strb.w	r6, [r5], #1
 800b084:	9e01      	ldr	r6, [sp, #4]
 800b086:	9f03      	ldr	r7, [sp, #12]
 800b088:	1bae      	subs	r6, r5, r6
 800b08a:	42b7      	cmp	r7, r6
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	d135      	bne.n	800b0fe <_dtoa_r+0x6e6>
 800b092:	f7f5 f903 	bl	800029c <__adddf3>
 800b096:	4642      	mov	r2, r8
 800b098:	464b      	mov	r3, r9
 800b09a:	4606      	mov	r6, r0
 800b09c:	460f      	mov	r7, r1
 800b09e:	f7f5 fd43 	bl	8000b28 <__aeabi_dcmpgt>
 800b0a2:	b9d0      	cbnz	r0, 800b0da <_dtoa_r+0x6c2>
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	f7f5 fd14 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0b0:	b110      	cbz	r0, 800b0b8 <_dtoa_r+0x6a0>
 800b0b2:	f01a 0f01 	tst.w	sl, #1
 800b0b6:	d110      	bne.n	800b0da <_dtoa_r+0x6c2>
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	ee18 1a10 	vmov	r1, s16
 800b0be:	f000 fe7d 	bl	800bdbc <_Bfree>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	9800      	ldr	r0, [sp, #0]
 800b0c6:	702b      	strb	r3, [r5, #0]
 800b0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	6018      	str	r0, [r3, #0]
 800b0ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f43f acf1 	beq.w	800aab8 <_dtoa_r+0xa0>
 800b0d6:	601d      	str	r5, [r3, #0]
 800b0d8:	e4ee      	b.n	800aab8 <_dtoa_r+0xa0>
 800b0da:	9f00      	ldr	r7, [sp, #0]
 800b0dc:	462b      	mov	r3, r5
 800b0de:	461d      	mov	r5, r3
 800b0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0e4:	2a39      	cmp	r2, #57	; 0x39
 800b0e6:	d106      	bne.n	800b0f6 <_dtoa_r+0x6de>
 800b0e8:	9a01      	ldr	r2, [sp, #4]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d1f7      	bne.n	800b0de <_dtoa_r+0x6c6>
 800b0ee:	9901      	ldr	r1, [sp, #4]
 800b0f0:	2230      	movs	r2, #48	; 0x30
 800b0f2:	3701      	adds	r7, #1
 800b0f4:	700a      	strb	r2, [r1, #0]
 800b0f6:	781a      	ldrb	r2, [r3, #0]
 800b0f8:	3201      	adds	r2, #1
 800b0fa:	701a      	strb	r2, [r3, #0]
 800b0fc:	e790      	b.n	800b020 <_dtoa_r+0x608>
 800b0fe:	4ba6      	ldr	r3, [pc, #664]	; (800b398 <_dtoa_r+0x980>)
 800b100:	2200      	movs	r2, #0
 800b102:	f7f5 fa81 	bl	8000608 <__aeabi_dmul>
 800b106:	2200      	movs	r2, #0
 800b108:	2300      	movs	r3, #0
 800b10a:	4606      	mov	r6, r0
 800b10c:	460f      	mov	r7, r1
 800b10e:	f7f5 fce3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b112:	2800      	cmp	r0, #0
 800b114:	d09d      	beq.n	800b052 <_dtoa_r+0x63a>
 800b116:	e7cf      	b.n	800b0b8 <_dtoa_r+0x6a0>
 800b118:	9a08      	ldr	r2, [sp, #32]
 800b11a:	2a00      	cmp	r2, #0
 800b11c:	f000 80d7 	beq.w	800b2ce <_dtoa_r+0x8b6>
 800b120:	9a06      	ldr	r2, [sp, #24]
 800b122:	2a01      	cmp	r2, #1
 800b124:	f300 80ba 	bgt.w	800b29c <_dtoa_r+0x884>
 800b128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	f000 80b2 	beq.w	800b294 <_dtoa_r+0x87c>
 800b130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b134:	9e07      	ldr	r6, [sp, #28]
 800b136:	9d04      	ldr	r5, [sp, #16]
 800b138:	9a04      	ldr	r2, [sp, #16]
 800b13a:	441a      	add	r2, r3
 800b13c:	9204      	str	r2, [sp, #16]
 800b13e:	9a05      	ldr	r2, [sp, #20]
 800b140:	2101      	movs	r1, #1
 800b142:	441a      	add	r2, r3
 800b144:	4620      	mov	r0, r4
 800b146:	9205      	str	r2, [sp, #20]
 800b148:	f000 ff3a 	bl	800bfc0 <__i2b>
 800b14c:	4607      	mov	r7, r0
 800b14e:	2d00      	cmp	r5, #0
 800b150:	dd0c      	ble.n	800b16c <_dtoa_r+0x754>
 800b152:	9b05      	ldr	r3, [sp, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	dd09      	ble.n	800b16c <_dtoa_r+0x754>
 800b158:	42ab      	cmp	r3, r5
 800b15a:	9a04      	ldr	r2, [sp, #16]
 800b15c:	bfa8      	it	ge
 800b15e:	462b      	movge	r3, r5
 800b160:	1ad2      	subs	r2, r2, r3
 800b162:	9204      	str	r2, [sp, #16]
 800b164:	9a05      	ldr	r2, [sp, #20]
 800b166:	1aed      	subs	r5, r5, r3
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	b31b      	cbz	r3, 800b1b8 <_dtoa_r+0x7a0>
 800b170:	9b08      	ldr	r3, [sp, #32]
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 80af 	beq.w	800b2d6 <_dtoa_r+0x8be>
 800b178:	2e00      	cmp	r6, #0
 800b17a:	dd13      	ble.n	800b1a4 <_dtoa_r+0x78c>
 800b17c:	4639      	mov	r1, r7
 800b17e:	4632      	mov	r2, r6
 800b180:	4620      	mov	r0, r4
 800b182:	f000 ffdd 	bl	800c140 <__pow5mult>
 800b186:	ee18 2a10 	vmov	r2, s16
 800b18a:	4601      	mov	r1, r0
 800b18c:	4607      	mov	r7, r0
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 ff2c 	bl	800bfec <__multiply>
 800b194:	ee18 1a10 	vmov	r1, s16
 800b198:	4680      	mov	r8, r0
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 fe0e 	bl	800bdbc <_Bfree>
 800b1a0:	ee08 8a10 	vmov	s16, r8
 800b1a4:	9b07      	ldr	r3, [sp, #28]
 800b1a6:	1b9a      	subs	r2, r3, r6
 800b1a8:	d006      	beq.n	800b1b8 <_dtoa_r+0x7a0>
 800b1aa:	ee18 1a10 	vmov	r1, s16
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 ffc6 	bl	800c140 <__pow5mult>
 800b1b4:	ee08 0a10 	vmov	s16, r0
 800b1b8:	2101      	movs	r1, #1
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 ff00 	bl	800bfc0 <__i2b>
 800b1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	f340 8088 	ble.w	800b2da <_dtoa_r+0x8c2>
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	4601      	mov	r1, r0
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 ffb6 	bl	800c140 <__pow5mult>
 800b1d4:	9b06      	ldr	r3, [sp, #24]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	4606      	mov	r6, r0
 800b1da:	f340 8081 	ble.w	800b2e0 <_dtoa_r+0x8c8>
 800b1de:	f04f 0800 	mov.w	r8, #0
 800b1e2:	6933      	ldr	r3, [r6, #16]
 800b1e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1e8:	6918      	ldr	r0, [r3, #16]
 800b1ea:	f000 fe99 	bl	800bf20 <__hi0bits>
 800b1ee:	f1c0 0020 	rsb	r0, r0, #32
 800b1f2:	9b05      	ldr	r3, [sp, #20]
 800b1f4:	4418      	add	r0, r3
 800b1f6:	f010 001f 	ands.w	r0, r0, #31
 800b1fa:	f000 8092 	beq.w	800b322 <_dtoa_r+0x90a>
 800b1fe:	f1c0 0320 	rsb	r3, r0, #32
 800b202:	2b04      	cmp	r3, #4
 800b204:	f340 808a 	ble.w	800b31c <_dtoa_r+0x904>
 800b208:	f1c0 001c 	rsb	r0, r0, #28
 800b20c:	9b04      	ldr	r3, [sp, #16]
 800b20e:	4403      	add	r3, r0
 800b210:	9304      	str	r3, [sp, #16]
 800b212:	9b05      	ldr	r3, [sp, #20]
 800b214:	4403      	add	r3, r0
 800b216:	4405      	add	r5, r0
 800b218:	9305      	str	r3, [sp, #20]
 800b21a:	9b04      	ldr	r3, [sp, #16]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dd07      	ble.n	800b230 <_dtoa_r+0x818>
 800b220:	ee18 1a10 	vmov	r1, s16
 800b224:	461a      	mov	r2, r3
 800b226:	4620      	mov	r0, r4
 800b228:	f000 ffe4 	bl	800c1f4 <__lshift>
 800b22c:	ee08 0a10 	vmov	s16, r0
 800b230:	9b05      	ldr	r3, [sp, #20]
 800b232:	2b00      	cmp	r3, #0
 800b234:	dd05      	ble.n	800b242 <_dtoa_r+0x82a>
 800b236:	4631      	mov	r1, r6
 800b238:	461a      	mov	r2, r3
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 ffda 	bl	800c1f4 <__lshift>
 800b240:	4606      	mov	r6, r0
 800b242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b244:	2b00      	cmp	r3, #0
 800b246:	d06e      	beq.n	800b326 <_dtoa_r+0x90e>
 800b248:	ee18 0a10 	vmov	r0, s16
 800b24c:	4631      	mov	r1, r6
 800b24e:	f001 f841 	bl	800c2d4 <__mcmp>
 800b252:	2800      	cmp	r0, #0
 800b254:	da67      	bge.n	800b326 <_dtoa_r+0x90e>
 800b256:	9b00      	ldr	r3, [sp, #0]
 800b258:	3b01      	subs	r3, #1
 800b25a:	ee18 1a10 	vmov	r1, s16
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	220a      	movs	r2, #10
 800b262:	2300      	movs	r3, #0
 800b264:	4620      	mov	r0, r4
 800b266:	f000 fdcb 	bl	800be00 <__multadd>
 800b26a:	9b08      	ldr	r3, [sp, #32]
 800b26c:	ee08 0a10 	vmov	s16, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 81b1 	beq.w	800b5d8 <_dtoa_r+0xbc0>
 800b276:	2300      	movs	r3, #0
 800b278:	4639      	mov	r1, r7
 800b27a:	220a      	movs	r2, #10
 800b27c:	4620      	mov	r0, r4
 800b27e:	f000 fdbf 	bl	800be00 <__multadd>
 800b282:	9b02      	ldr	r3, [sp, #8]
 800b284:	2b00      	cmp	r3, #0
 800b286:	4607      	mov	r7, r0
 800b288:	f300 808e 	bgt.w	800b3a8 <_dtoa_r+0x990>
 800b28c:	9b06      	ldr	r3, [sp, #24]
 800b28e:	2b02      	cmp	r3, #2
 800b290:	dc51      	bgt.n	800b336 <_dtoa_r+0x91e>
 800b292:	e089      	b.n	800b3a8 <_dtoa_r+0x990>
 800b294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b29a:	e74b      	b.n	800b134 <_dtoa_r+0x71c>
 800b29c:	9b03      	ldr	r3, [sp, #12]
 800b29e:	1e5e      	subs	r6, r3, #1
 800b2a0:	9b07      	ldr	r3, [sp, #28]
 800b2a2:	42b3      	cmp	r3, r6
 800b2a4:	bfbf      	itttt	lt
 800b2a6:	9b07      	ldrlt	r3, [sp, #28]
 800b2a8:	9607      	strlt	r6, [sp, #28]
 800b2aa:	1af2      	sublt	r2, r6, r3
 800b2ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b2ae:	bfb6      	itet	lt
 800b2b0:	189b      	addlt	r3, r3, r2
 800b2b2:	1b9e      	subge	r6, r3, r6
 800b2b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b2b6:	9b03      	ldr	r3, [sp, #12]
 800b2b8:	bfb8      	it	lt
 800b2ba:	2600      	movlt	r6, #0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bfb7      	itett	lt
 800b2c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b2c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b2c8:	1a9d      	sublt	r5, r3, r2
 800b2ca:	2300      	movlt	r3, #0
 800b2cc:	e734      	b.n	800b138 <_dtoa_r+0x720>
 800b2ce:	9e07      	ldr	r6, [sp, #28]
 800b2d0:	9d04      	ldr	r5, [sp, #16]
 800b2d2:	9f08      	ldr	r7, [sp, #32]
 800b2d4:	e73b      	b.n	800b14e <_dtoa_r+0x736>
 800b2d6:	9a07      	ldr	r2, [sp, #28]
 800b2d8:	e767      	b.n	800b1aa <_dtoa_r+0x792>
 800b2da:	9b06      	ldr	r3, [sp, #24]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	dc18      	bgt.n	800b312 <_dtoa_r+0x8fa>
 800b2e0:	f1ba 0f00 	cmp.w	sl, #0
 800b2e4:	d115      	bne.n	800b312 <_dtoa_r+0x8fa>
 800b2e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2ea:	b993      	cbnz	r3, 800b312 <_dtoa_r+0x8fa>
 800b2ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2f0:	0d1b      	lsrs	r3, r3, #20
 800b2f2:	051b      	lsls	r3, r3, #20
 800b2f4:	b183      	cbz	r3, 800b318 <_dtoa_r+0x900>
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	9b05      	ldr	r3, [sp, #20]
 800b2fe:	3301      	adds	r3, #1
 800b300:	9305      	str	r3, [sp, #20]
 800b302:	f04f 0801 	mov.w	r8, #1
 800b306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f47f af6a 	bne.w	800b1e2 <_dtoa_r+0x7ca>
 800b30e:	2001      	movs	r0, #1
 800b310:	e76f      	b.n	800b1f2 <_dtoa_r+0x7da>
 800b312:	f04f 0800 	mov.w	r8, #0
 800b316:	e7f6      	b.n	800b306 <_dtoa_r+0x8ee>
 800b318:	4698      	mov	r8, r3
 800b31a:	e7f4      	b.n	800b306 <_dtoa_r+0x8ee>
 800b31c:	f43f af7d 	beq.w	800b21a <_dtoa_r+0x802>
 800b320:	4618      	mov	r0, r3
 800b322:	301c      	adds	r0, #28
 800b324:	e772      	b.n	800b20c <_dtoa_r+0x7f4>
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	dc37      	bgt.n	800b39c <_dtoa_r+0x984>
 800b32c:	9b06      	ldr	r3, [sp, #24]
 800b32e:	2b02      	cmp	r3, #2
 800b330:	dd34      	ble.n	800b39c <_dtoa_r+0x984>
 800b332:	9b03      	ldr	r3, [sp, #12]
 800b334:	9302      	str	r3, [sp, #8]
 800b336:	9b02      	ldr	r3, [sp, #8]
 800b338:	b96b      	cbnz	r3, 800b356 <_dtoa_r+0x93e>
 800b33a:	4631      	mov	r1, r6
 800b33c:	2205      	movs	r2, #5
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 fd5e 	bl	800be00 <__multadd>
 800b344:	4601      	mov	r1, r0
 800b346:	4606      	mov	r6, r0
 800b348:	ee18 0a10 	vmov	r0, s16
 800b34c:	f000 ffc2 	bl	800c2d4 <__mcmp>
 800b350:	2800      	cmp	r0, #0
 800b352:	f73f adbb 	bgt.w	800aecc <_dtoa_r+0x4b4>
 800b356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b358:	9d01      	ldr	r5, [sp, #4]
 800b35a:	43db      	mvns	r3, r3
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	f04f 0800 	mov.w	r8, #0
 800b362:	4631      	mov	r1, r6
 800b364:	4620      	mov	r0, r4
 800b366:	f000 fd29 	bl	800bdbc <_Bfree>
 800b36a:	2f00      	cmp	r7, #0
 800b36c:	f43f aea4 	beq.w	800b0b8 <_dtoa_r+0x6a0>
 800b370:	f1b8 0f00 	cmp.w	r8, #0
 800b374:	d005      	beq.n	800b382 <_dtoa_r+0x96a>
 800b376:	45b8      	cmp	r8, r7
 800b378:	d003      	beq.n	800b382 <_dtoa_r+0x96a>
 800b37a:	4641      	mov	r1, r8
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 fd1d 	bl	800bdbc <_Bfree>
 800b382:	4639      	mov	r1, r7
 800b384:	4620      	mov	r0, r4
 800b386:	f000 fd19 	bl	800bdbc <_Bfree>
 800b38a:	e695      	b.n	800b0b8 <_dtoa_r+0x6a0>
 800b38c:	2600      	movs	r6, #0
 800b38e:	4637      	mov	r7, r6
 800b390:	e7e1      	b.n	800b356 <_dtoa_r+0x93e>
 800b392:	9700      	str	r7, [sp, #0]
 800b394:	4637      	mov	r7, r6
 800b396:	e599      	b.n	800aecc <_dtoa_r+0x4b4>
 800b398:	40240000 	.word	0x40240000
 800b39c:	9b08      	ldr	r3, [sp, #32]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 80ca 	beq.w	800b538 <_dtoa_r+0xb20>
 800b3a4:	9b03      	ldr	r3, [sp, #12]
 800b3a6:	9302      	str	r3, [sp, #8]
 800b3a8:	2d00      	cmp	r5, #0
 800b3aa:	dd05      	ble.n	800b3b8 <_dtoa_r+0x9a0>
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	462a      	mov	r2, r5
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f000 ff1f 	bl	800c1f4 <__lshift>
 800b3b6:	4607      	mov	r7, r0
 800b3b8:	f1b8 0f00 	cmp.w	r8, #0
 800b3bc:	d05b      	beq.n	800b476 <_dtoa_r+0xa5e>
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fcbb 	bl	800bd3c <_Balloc>
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	b928      	cbnz	r0, 800b3d6 <_dtoa_r+0x9be>
 800b3ca:	4b87      	ldr	r3, [pc, #540]	; (800b5e8 <_dtoa_r+0xbd0>)
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3d2:	f7ff bb3b 	b.w	800aa4c <_dtoa_r+0x34>
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	3202      	adds	r2, #2
 800b3da:	0092      	lsls	r2, r2, #2
 800b3dc:	f107 010c 	add.w	r1, r7, #12
 800b3e0:	300c      	adds	r0, #12
 800b3e2:	f7fd fb77 	bl	8008ad4 <memcpy>
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 ff02 	bl	800c1f4 <__lshift>
 800b3f0:	9b01      	ldr	r3, [sp, #4]
 800b3f2:	f103 0901 	add.w	r9, r3, #1
 800b3f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	9305      	str	r3, [sp, #20]
 800b3fe:	f00a 0301 	and.w	r3, sl, #1
 800b402:	46b8      	mov	r8, r7
 800b404:	9304      	str	r3, [sp, #16]
 800b406:	4607      	mov	r7, r0
 800b408:	4631      	mov	r1, r6
 800b40a:	ee18 0a10 	vmov	r0, s16
 800b40e:	f7ff fa75 	bl	800a8fc <quorem>
 800b412:	4641      	mov	r1, r8
 800b414:	9002      	str	r0, [sp, #8]
 800b416:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b41a:	ee18 0a10 	vmov	r0, s16
 800b41e:	f000 ff59 	bl	800c2d4 <__mcmp>
 800b422:	463a      	mov	r2, r7
 800b424:	9003      	str	r0, [sp, #12]
 800b426:	4631      	mov	r1, r6
 800b428:	4620      	mov	r0, r4
 800b42a:	f000 ff6f 	bl	800c30c <__mdiff>
 800b42e:	68c2      	ldr	r2, [r0, #12]
 800b430:	f109 3bff 	add.w	fp, r9, #4294967295
 800b434:	4605      	mov	r5, r0
 800b436:	bb02      	cbnz	r2, 800b47a <_dtoa_r+0xa62>
 800b438:	4601      	mov	r1, r0
 800b43a:	ee18 0a10 	vmov	r0, s16
 800b43e:	f000 ff49 	bl	800c2d4 <__mcmp>
 800b442:	4602      	mov	r2, r0
 800b444:	4629      	mov	r1, r5
 800b446:	4620      	mov	r0, r4
 800b448:	9207      	str	r2, [sp, #28]
 800b44a:	f000 fcb7 	bl	800bdbc <_Bfree>
 800b44e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b452:	ea43 0102 	orr.w	r1, r3, r2
 800b456:	9b04      	ldr	r3, [sp, #16]
 800b458:	430b      	orrs	r3, r1
 800b45a:	464d      	mov	r5, r9
 800b45c:	d10f      	bne.n	800b47e <_dtoa_r+0xa66>
 800b45e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b462:	d02a      	beq.n	800b4ba <_dtoa_r+0xaa2>
 800b464:	9b03      	ldr	r3, [sp, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	dd02      	ble.n	800b470 <_dtoa_r+0xa58>
 800b46a:	9b02      	ldr	r3, [sp, #8]
 800b46c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b470:	f88b a000 	strb.w	sl, [fp]
 800b474:	e775      	b.n	800b362 <_dtoa_r+0x94a>
 800b476:	4638      	mov	r0, r7
 800b478:	e7ba      	b.n	800b3f0 <_dtoa_r+0x9d8>
 800b47a:	2201      	movs	r2, #1
 800b47c:	e7e2      	b.n	800b444 <_dtoa_r+0xa2c>
 800b47e:	9b03      	ldr	r3, [sp, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	db04      	blt.n	800b48e <_dtoa_r+0xa76>
 800b484:	9906      	ldr	r1, [sp, #24]
 800b486:	430b      	orrs	r3, r1
 800b488:	9904      	ldr	r1, [sp, #16]
 800b48a:	430b      	orrs	r3, r1
 800b48c:	d122      	bne.n	800b4d4 <_dtoa_r+0xabc>
 800b48e:	2a00      	cmp	r2, #0
 800b490:	ddee      	ble.n	800b470 <_dtoa_r+0xa58>
 800b492:	ee18 1a10 	vmov	r1, s16
 800b496:	2201      	movs	r2, #1
 800b498:	4620      	mov	r0, r4
 800b49a:	f000 feab 	bl	800c1f4 <__lshift>
 800b49e:	4631      	mov	r1, r6
 800b4a0:	ee08 0a10 	vmov	s16, r0
 800b4a4:	f000 ff16 	bl	800c2d4 <__mcmp>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	dc03      	bgt.n	800b4b4 <_dtoa_r+0xa9c>
 800b4ac:	d1e0      	bne.n	800b470 <_dtoa_r+0xa58>
 800b4ae:	f01a 0f01 	tst.w	sl, #1
 800b4b2:	d0dd      	beq.n	800b470 <_dtoa_r+0xa58>
 800b4b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4b8:	d1d7      	bne.n	800b46a <_dtoa_r+0xa52>
 800b4ba:	2339      	movs	r3, #57	; 0x39
 800b4bc:	f88b 3000 	strb.w	r3, [fp]
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	461d      	mov	r5, r3
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4ca:	2a39      	cmp	r2, #57	; 0x39
 800b4cc:	d071      	beq.n	800b5b2 <_dtoa_r+0xb9a>
 800b4ce:	3201      	adds	r2, #1
 800b4d0:	701a      	strb	r2, [r3, #0]
 800b4d2:	e746      	b.n	800b362 <_dtoa_r+0x94a>
 800b4d4:	2a00      	cmp	r2, #0
 800b4d6:	dd07      	ble.n	800b4e8 <_dtoa_r+0xad0>
 800b4d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4dc:	d0ed      	beq.n	800b4ba <_dtoa_r+0xaa2>
 800b4de:	f10a 0301 	add.w	r3, sl, #1
 800b4e2:	f88b 3000 	strb.w	r3, [fp]
 800b4e6:	e73c      	b.n	800b362 <_dtoa_r+0x94a>
 800b4e8:	9b05      	ldr	r3, [sp, #20]
 800b4ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b4ee:	4599      	cmp	r9, r3
 800b4f0:	d047      	beq.n	800b582 <_dtoa_r+0xb6a>
 800b4f2:	ee18 1a10 	vmov	r1, s16
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	220a      	movs	r2, #10
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 fc80 	bl	800be00 <__multadd>
 800b500:	45b8      	cmp	r8, r7
 800b502:	ee08 0a10 	vmov	s16, r0
 800b506:	f04f 0300 	mov.w	r3, #0
 800b50a:	f04f 020a 	mov.w	r2, #10
 800b50e:	4641      	mov	r1, r8
 800b510:	4620      	mov	r0, r4
 800b512:	d106      	bne.n	800b522 <_dtoa_r+0xb0a>
 800b514:	f000 fc74 	bl	800be00 <__multadd>
 800b518:	4680      	mov	r8, r0
 800b51a:	4607      	mov	r7, r0
 800b51c:	f109 0901 	add.w	r9, r9, #1
 800b520:	e772      	b.n	800b408 <_dtoa_r+0x9f0>
 800b522:	f000 fc6d 	bl	800be00 <__multadd>
 800b526:	4639      	mov	r1, r7
 800b528:	4680      	mov	r8, r0
 800b52a:	2300      	movs	r3, #0
 800b52c:	220a      	movs	r2, #10
 800b52e:	4620      	mov	r0, r4
 800b530:	f000 fc66 	bl	800be00 <__multadd>
 800b534:	4607      	mov	r7, r0
 800b536:	e7f1      	b.n	800b51c <_dtoa_r+0xb04>
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	9302      	str	r3, [sp, #8]
 800b53c:	9d01      	ldr	r5, [sp, #4]
 800b53e:	ee18 0a10 	vmov	r0, s16
 800b542:	4631      	mov	r1, r6
 800b544:	f7ff f9da 	bl	800a8fc <quorem>
 800b548:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b54c:	9b01      	ldr	r3, [sp, #4]
 800b54e:	f805 ab01 	strb.w	sl, [r5], #1
 800b552:	1aea      	subs	r2, r5, r3
 800b554:	9b02      	ldr	r3, [sp, #8]
 800b556:	4293      	cmp	r3, r2
 800b558:	dd09      	ble.n	800b56e <_dtoa_r+0xb56>
 800b55a:	ee18 1a10 	vmov	r1, s16
 800b55e:	2300      	movs	r3, #0
 800b560:	220a      	movs	r2, #10
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fc4c 	bl	800be00 <__multadd>
 800b568:	ee08 0a10 	vmov	s16, r0
 800b56c:	e7e7      	b.n	800b53e <_dtoa_r+0xb26>
 800b56e:	9b02      	ldr	r3, [sp, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	bfc8      	it	gt
 800b574:	461d      	movgt	r5, r3
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	bfd8      	it	le
 800b57a:	2501      	movle	r5, #1
 800b57c:	441d      	add	r5, r3
 800b57e:	f04f 0800 	mov.w	r8, #0
 800b582:	ee18 1a10 	vmov	r1, s16
 800b586:	2201      	movs	r2, #1
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 fe33 	bl	800c1f4 <__lshift>
 800b58e:	4631      	mov	r1, r6
 800b590:	ee08 0a10 	vmov	s16, r0
 800b594:	f000 fe9e 	bl	800c2d4 <__mcmp>
 800b598:	2800      	cmp	r0, #0
 800b59a:	dc91      	bgt.n	800b4c0 <_dtoa_r+0xaa8>
 800b59c:	d102      	bne.n	800b5a4 <_dtoa_r+0xb8c>
 800b59e:	f01a 0f01 	tst.w	sl, #1
 800b5a2:	d18d      	bne.n	800b4c0 <_dtoa_r+0xaa8>
 800b5a4:	462b      	mov	r3, r5
 800b5a6:	461d      	mov	r5, r3
 800b5a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5ac:	2a30      	cmp	r2, #48	; 0x30
 800b5ae:	d0fa      	beq.n	800b5a6 <_dtoa_r+0xb8e>
 800b5b0:	e6d7      	b.n	800b362 <_dtoa_r+0x94a>
 800b5b2:	9a01      	ldr	r2, [sp, #4]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d184      	bne.n	800b4c2 <_dtoa_r+0xaaa>
 800b5b8:	9b00      	ldr	r3, [sp, #0]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	2331      	movs	r3, #49	; 0x31
 800b5c0:	7013      	strb	r3, [r2, #0]
 800b5c2:	e6ce      	b.n	800b362 <_dtoa_r+0x94a>
 800b5c4:	4b09      	ldr	r3, [pc, #36]	; (800b5ec <_dtoa_r+0xbd4>)
 800b5c6:	f7ff ba95 	b.w	800aaf4 <_dtoa_r+0xdc>
 800b5ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f47f aa6e 	bne.w	800aaae <_dtoa_r+0x96>
 800b5d2:	4b07      	ldr	r3, [pc, #28]	; (800b5f0 <_dtoa_r+0xbd8>)
 800b5d4:	f7ff ba8e 	b.w	800aaf4 <_dtoa_r+0xdc>
 800b5d8:	9b02      	ldr	r3, [sp, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	dcae      	bgt.n	800b53c <_dtoa_r+0xb24>
 800b5de:	9b06      	ldr	r3, [sp, #24]
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	f73f aea8 	bgt.w	800b336 <_dtoa_r+0x91e>
 800b5e6:	e7a9      	b.n	800b53c <_dtoa_r+0xb24>
 800b5e8:	0800fe40 	.word	0x0800fe40
 800b5ec:	08010039 	.word	0x08010039
 800b5f0:	0800fdc1 	.word	0x0800fdc1

0800b5f4 <rshift>:
 800b5f4:	6903      	ldr	r3, [r0, #16]
 800b5f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b5fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b602:	f100 0414 	add.w	r4, r0, #20
 800b606:	dd45      	ble.n	800b694 <rshift+0xa0>
 800b608:	f011 011f 	ands.w	r1, r1, #31
 800b60c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b610:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b614:	d10c      	bne.n	800b630 <rshift+0x3c>
 800b616:	f100 0710 	add.w	r7, r0, #16
 800b61a:	4629      	mov	r1, r5
 800b61c:	42b1      	cmp	r1, r6
 800b61e:	d334      	bcc.n	800b68a <rshift+0x96>
 800b620:	1a9b      	subs	r3, r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	1eea      	subs	r2, r5, #3
 800b626:	4296      	cmp	r6, r2
 800b628:	bf38      	it	cc
 800b62a:	2300      	movcc	r3, #0
 800b62c:	4423      	add	r3, r4
 800b62e:	e015      	b.n	800b65c <rshift+0x68>
 800b630:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b634:	f1c1 0820 	rsb	r8, r1, #32
 800b638:	40cf      	lsrs	r7, r1
 800b63a:	f105 0e04 	add.w	lr, r5, #4
 800b63e:	46a1      	mov	r9, r4
 800b640:	4576      	cmp	r6, lr
 800b642:	46f4      	mov	ip, lr
 800b644:	d815      	bhi.n	800b672 <rshift+0x7e>
 800b646:	1a9a      	subs	r2, r3, r2
 800b648:	0092      	lsls	r2, r2, #2
 800b64a:	3a04      	subs	r2, #4
 800b64c:	3501      	adds	r5, #1
 800b64e:	42ae      	cmp	r6, r5
 800b650:	bf38      	it	cc
 800b652:	2200      	movcc	r2, #0
 800b654:	18a3      	adds	r3, r4, r2
 800b656:	50a7      	str	r7, [r4, r2]
 800b658:	b107      	cbz	r7, 800b65c <rshift+0x68>
 800b65a:	3304      	adds	r3, #4
 800b65c:	1b1a      	subs	r2, r3, r4
 800b65e:	42a3      	cmp	r3, r4
 800b660:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b664:	bf08      	it	eq
 800b666:	2300      	moveq	r3, #0
 800b668:	6102      	str	r2, [r0, #16]
 800b66a:	bf08      	it	eq
 800b66c:	6143      	streq	r3, [r0, #20]
 800b66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b672:	f8dc c000 	ldr.w	ip, [ip]
 800b676:	fa0c fc08 	lsl.w	ip, ip, r8
 800b67a:	ea4c 0707 	orr.w	r7, ip, r7
 800b67e:	f849 7b04 	str.w	r7, [r9], #4
 800b682:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b686:	40cf      	lsrs	r7, r1
 800b688:	e7da      	b.n	800b640 <rshift+0x4c>
 800b68a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b68e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b692:	e7c3      	b.n	800b61c <rshift+0x28>
 800b694:	4623      	mov	r3, r4
 800b696:	e7e1      	b.n	800b65c <rshift+0x68>

0800b698 <__hexdig_fun>:
 800b698:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b69c:	2b09      	cmp	r3, #9
 800b69e:	d802      	bhi.n	800b6a6 <__hexdig_fun+0xe>
 800b6a0:	3820      	subs	r0, #32
 800b6a2:	b2c0      	uxtb	r0, r0
 800b6a4:	4770      	bx	lr
 800b6a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b6aa:	2b05      	cmp	r3, #5
 800b6ac:	d801      	bhi.n	800b6b2 <__hexdig_fun+0x1a>
 800b6ae:	3847      	subs	r0, #71	; 0x47
 800b6b0:	e7f7      	b.n	800b6a2 <__hexdig_fun+0xa>
 800b6b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b6b6:	2b05      	cmp	r3, #5
 800b6b8:	d801      	bhi.n	800b6be <__hexdig_fun+0x26>
 800b6ba:	3827      	subs	r0, #39	; 0x27
 800b6bc:	e7f1      	b.n	800b6a2 <__hexdig_fun+0xa>
 800b6be:	2000      	movs	r0, #0
 800b6c0:	4770      	bx	lr
	...

0800b6c4 <__gethex>:
 800b6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	ed2d 8b02 	vpush	{d8}
 800b6cc:	b089      	sub	sp, #36	; 0x24
 800b6ce:	ee08 0a10 	vmov	s16, r0
 800b6d2:	9304      	str	r3, [sp, #16]
 800b6d4:	4bb4      	ldr	r3, [pc, #720]	; (800b9a8 <__gethex+0x2e4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	468b      	mov	fp, r1
 800b6de:	4690      	mov	r8, r2
 800b6e0:	f7f4 fd7e 	bl	80001e0 <strlen>
 800b6e4:	9b01      	ldr	r3, [sp, #4]
 800b6e6:	f8db 2000 	ldr.w	r2, [fp]
 800b6ea:	4403      	add	r3, r0
 800b6ec:	4682      	mov	sl, r0
 800b6ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b6f2:	9305      	str	r3, [sp, #20]
 800b6f4:	1c93      	adds	r3, r2, #2
 800b6f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b6fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b6fe:	32fe      	adds	r2, #254	; 0xfe
 800b700:	18d1      	adds	r1, r2, r3
 800b702:	461f      	mov	r7, r3
 800b704:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b708:	9100      	str	r1, [sp, #0]
 800b70a:	2830      	cmp	r0, #48	; 0x30
 800b70c:	d0f8      	beq.n	800b700 <__gethex+0x3c>
 800b70e:	f7ff ffc3 	bl	800b698 <__hexdig_fun>
 800b712:	4604      	mov	r4, r0
 800b714:	2800      	cmp	r0, #0
 800b716:	d13a      	bne.n	800b78e <__gethex+0xca>
 800b718:	9901      	ldr	r1, [sp, #4]
 800b71a:	4652      	mov	r2, sl
 800b71c:	4638      	mov	r0, r7
 800b71e:	f7fe fa0a 	bl	8009b36 <strncmp>
 800b722:	4605      	mov	r5, r0
 800b724:	2800      	cmp	r0, #0
 800b726:	d168      	bne.n	800b7fa <__gethex+0x136>
 800b728:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b72c:	eb07 060a 	add.w	r6, r7, sl
 800b730:	f7ff ffb2 	bl	800b698 <__hexdig_fun>
 800b734:	2800      	cmp	r0, #0
 800b736:	d062      	beq.n	800b7fe <__gethex+0x13a>
 800b738:	4633      	mov	r3, r6
 800b73a:	7818      	ldrb	r0, [r3, #0]
 800b73c:	2830      	cmp	r0, #48	; 0x30
 800b73e:	461f      	mov	r7, r3
 800b740:	f103 0301 	add.w	r3, r3, #1
 800b744:	d0f9      	beq.n	800b73a <__gethex+0x76>
 800b746:	f7ff ffa7 	bl	800b698 <__hexdig_fun>
 800b74a:	2301      	movs	r3, #1
 800b74c:	fab0 f480 	clz	r4, r0
 800b750:	0964      	lsrs	r4, r4, #5
 800b752:	4635      	mov	r5, r6
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	463a      	mov	r2, r7
 800b758:	4616      	mov	r6, r2
 800b75a:	3201      	adds	r2, #1
 800b75c:	7830      	ldrb	r0, [r6, #0]
 800b75e:	f7ff ff9b 	bl	800b698 <__hexdig_fun>
 800b762:	2800      	cmp	r0, #0
 800b764:	d1f8      	bne.n	800b758 <__gethex+0x94>
 800b766:	9901      	ldr	r1, [sp, #4]
 800b768:	4652      	mov	r2, sl
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7fe f9e3 	bl	8009b36 <strncmp>
 800b770:	b980      	cbnz	r0, 800b794 <__gethex+0xd0>
 800b772:	b94d      	cbnz	r5, 800b788 <__gethex+0xc4>
 800b774:	eb06 050a 	add.w	r5, r6, sl
 800b778:	462a      	mov	r2, r5
 800b77a:	4616      	mov	r6, r2
 800b77c:	3201      	adds	r2, #1
 800b77e:	7830      	ldrb	r0, [r6, #0]
 800b780:	f7ff ff8a 	bl	800b698 <__hexdig_fun>
 800b784:	2800      	cmp	r0, #0
 800b786:	d1f8      	bne.n	800b77a <__gethex+0xb6>
 800b788:	1bad      	subs	r5, r5, r6
 800b78a:	00ad      	lsls	r5, r5, #2
 800b78c:	e004      	b.n	800b798 <__gethex+0xd4>
 800b78e:	2400      	movs	r4, #0
 800b790:	4625      	mov	r5, r4
 800b792:	e7e0      	b.n	800b756 <__gethex+0x92>
 800b794:	2d00      	cmp	r5, #0
 800b796:	d1f7      	bne.n	800b788 <__gethex+0xc4>
 800b798:	7833      	ldrb	r3, [r6, #0]
 800b79a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b79e:	2b50      	cmp	r3, #80	; 0x50
 800b7a0:	d13b      	bne.n	800b81a <__gethex+0x156>
 800b7a2:	7873      	ldrb	r3, [r6, #1]
 800b7a4:	2b2b      	cmp	r3, #43	; 0x2b
 800b7a6:	d02c      	beq.n	800b802 <__gethex+0x13e>
 800b7a8:	2b2d      	cmp	r3, #45	; 0x2d
 800b7aa:	d02e      	beq.n	800b80a <__gethex+0x146>
 800b7ac:	1c71      	adds	r1, r6, #1
 800b7ae:	f04f 0900 	mov.w	r9, #0
 800b7b2:	7808      	ldrb	r0, [r1, #0]
 800b7b4:	f7ff ff70 	bl	800b698 <__hexdig_fun>
 800b7b8:	1e43      	subs	r3, r0, #1
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b18      	cmp	r3, #24
 800b7be:	d82c      	bhi.n	800b81a <__gethex+0x156>
 800b7c0:	f1a0 0210 	sub.w	r2, r0, #16
 800b7c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7c8:	f7ff ff66 	bl	800b698 <__hexdig_fun>
 800b7cc:	1e43      	subs	r3, r0, #1
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b18      	cmp	r3, #24
 800b7d2:	d91d      	bls.n	800b810 <__gethex+0x14c>
 800b7d4:	f1b9 0f00 	cmp.w	r9, #0
 800b7d8:	d000      	beq.n	800b7dc <__gethex+0x118>
 800b7da:	4252      	negs	r2, r2
 800b7dc:	4415      	add	r5, r2
 800b7de:	f8cb 1000 	str.w	r1, [fp]
 800b7e2:	b1e4      	cbz	r4, 800b81e <__gethex+0x15a>
 800b7e4:	9b00      	ldr	r3, [sp, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	bf14      	ite	ne
 800b7ea:	2700      	movne	r7, #0
 800b7ec:	2706      	moveq	r7, #6
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	b009      	add	sp, #36	; 0x24
 800b7f2:	ecbd 8b02 	vpop	{d8}
 800b7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fa:	463e      	mov	r6, r7
 800b7fc:	4625      	mov	r5, r4
 800b7fe:	2401      	movs	r4, #1
 800b800:	e7ca      	b.n	800b798 <__gethex+0xd4>
 800b802:	f04f 0900 	mov.w	r9, #0
 800b806:	1cb1      	adds	r1, r6, #2
 800b808:	e7d3      	b.n	800b7b2 <__gethex+0xee>
 800b80a:	f04f 0901 	mov.w	r9, #1
 800b80e:	e7fa      	b.n	800b806 <__gethex+0x142>
 800b810:	230a      	movs	r3, #10
 800b812:	fb03 0202 	mla	r2, r3, r2, r0
 800b816:	3a10      	subs	r2, #16
 800b818:	e7d4      	b.n	800b7c4 <__gethex+0x100>
 800b81a:	4631      	mov	r1, r6
 800b81c:	e7df      	b.n	800b7de <__gethex+0x11a>
 800b81e:	1bf3      	subs	r3, r6, r7
 800b820:	3b01      	subs	r3, #1
 800b822:	4621      	mov	r1, r4
 800b824:	2b07      	cmp	r3, #7
 800b826:	dc0b      	bgt.n	800b840 <__gethex+0x17c>
 800b828:	ee18 0a10 	vmov	r0, s16
 800b82c:	f000 fa86 	bl	800bd3c <_Balloc>
 800b830:	4604      	mov	r4, r0
 800b832:	b940      	cbnz	r0, 800b846 <__gethex+0x182>
 800b834:	4b5d      	ldr	r3, [pc, #372]	; (800b9ac <__gethex+0x2e8>)
 800b836:	4602      	mov	r2, r0
 800b838:	21de      	movs	r1, #222	; 0xde
 800b83a:	485d      	ldr	r0, [pc, #372]	; (800b9b0 <__gethex+0x2ec>)
 800b83c:	f001 fce4 	bl	800d208 <__assert_func>
 800b840:	3101      	adds	r1, #1
 800b842:	105b      	asrs	r3, r3, #1
 800b844:	e7ee      	b.n	800b824 <__gethex+0x160>
 800b846:	f100 0914 	add.w	r9, r0, #20
 800b84a:	f04f 0b00 	mov.w	fp, #0
 800b84e:	f1ca 0301 	rsb	r3, sl, #1
 800b852:	f8cd 9008 	str.w	r9, [sp, #8]
 800b856:	f8cd b000 	str.w	fp, [sp]
 800b85a:	9306      	str	r3, [sp, #24]
 800b85c:	42b7      	cmp	r7, r6
 800b85e:	d340      	bcc.n	800b8e2 <__gethex+0x21e>
 800b860:	9802      	ldr	r0, [sp, #8]
 800b862:	9b00      	ldr	r3, [sp, #0]
 800b864:	f840 3b04 	str.w	r3, [r0], #4
 800b868:	eba0 0009 	sub.w	r0, r0, r9
 800b86c:	1080      	asrs	r0, r0, #2
 800b86e:	0146      	lsls	r6, r0, #5
 800b870:	6120      	str	r0, [r4, #16]
 800b872:	4618      	mov	r0, r3
 800b874:	f000 fb54 	bl	800bf20 <__hi0bits>
 800b878:	1a30      	subs	r0, r6, r0
 800b87a:	f8d8 6000 	ldr.w	r6, [r8]
 800b87e:	42b0      	cmp	r0, r6
 800b880:	dd63      	ble.n	800b94a <__gethex+0x286>
 800b882:	1b87      	subs	r7, r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	4620      	mov	r0, r4
 800b888:	f000 fef8 	bl	800c67c <__any_on>
 800b88c:	4682      	mov	sl, r0
 800b88e:	b1a8      	cbz	r0, 800b8bc <__gethex+0x1f8>
 800b890:	1e7b      	subs	r3, r7, #1
 800b892:	1159      	asrs	r1, r3, #5
 800b894:	f003 021f 	and.w	r2, r3, #31
 800b898:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b89c:	f04f 0a01 	mov.w	sl, #1
 800b8a0:	fa0a f202 	lsl.w	r2, sl, r2
 800b8a4:	420a      	tst	r2, r1
 800b8a6:	d009      	beq.n	800b8bc <__gethex+0x1f8>
 800b8a8:	4553      	cmp	r3, sl
 800b8aa:	dd05      	ble.n	800b8b8 <__gethex+0x1f4>
 800b8ac:	1eb9      	subs	r1, r7, #2
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fee4 	bl	800c67c <__any_on>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d145      	bne.n	800b944 <__gethex+0x280>
 800b8b8:	f04f 0a02 	mov.w	sl, #2
 800b8bc:	4639      	mov	r1, r7
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f7ff fe98 	bl	800b5f4 <rshift>
 800b8c4:	443d      	add	r5, r7
 800b8c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8ca:	42ab      	cmp	r3, r5
 800b8cc:	da4c      	bge.n	800b968 <__gethex+0x2a4>
 800b8ce:	ee18 0a10 	vmov	r0, s16
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	f000 fa72 	bl	800bdbc <_Bfree>
 800b8d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8da:	2300      	movs	r3, #0
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	27a3      	movs	r7, #163	; 0xa3
 800b8e0:	e785      	b.n	800b7ee <__gethex+0x12a>
 800b8e2:	1e73      	subs	r3, r6, #1
 800b8e4:	9a05      	ldr	r2, [sp, #20]
 800b8e6:	9303      	str	r3, [sp, #12]
 800b8e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d019      	beq.n	800b924 <__gethex+0x260>
 800b8f0:	f1bb 0f20 	cmp.w	fp, #32
 800b8f4:	d107      	bne.n	800b906 <__gethex+0x242>
 800b8f6:	9b02      	ldr	r3, [sp, #8]
 800b8f8:	9a00      	ldr	r2, [sp, #0]
 800b8fa:	f843 2b04 	str.w	r2, [r3], #4
 800b8fe:	9302      	str	r3, [sp, #8]
 800b900:	2300      	movs	r3, #0
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	469b      	mov	fp, r3
 800b906:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b90a:	f7ff fec5 	bl	800b698 <__hexdig_fun>
 800b90e:	9b00      	ldr	r3, [sp, #0]
 800b910:	f000 000f 	and.w	r0, r0, #15
 800b914:	fa00 f00b 	lsl.w	r0, r0, fp
 800b918:	4303      	orrs	r3, r0
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	f10b 0b04 	add.w	fp, fp, #4
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	e00d      	b.n	800b940 <__gethex+0x27c>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	9a06      	ldr	r2, [sp, #24]
 800b928:	4413      	add	r3, r2
 800b92a:	42bb      	cmp	r3, r7
 800b92c:	d3e0      	bcc.n	800b8f0 <__gethex+0x22c>
 800b92e:	4618      	mov	r0, r3
 800b930:	9901      	ldr	r1, [sp, #4]
 800b932:	9307      	str	r3, [sp, #28]
 800b934:	4652      	mov	r2, sl
 800b936:	f7fe f8fe 	bl	8009b36 <strncmp>
 800b93a:	9b07      	ldr	r3, [sp, #28]
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d1d7      	bne.n	800b8f0 <__gethex+0x22c>
 800b940:	461e      	mov	r6, r3
 800b942:	e78b      	b.n	800b85c <__gethex+0x198>
 800b944:	f04f 0a03 	mov.w	sl, #3
 800b948:	e7b8      	b.n	800b8bc <__gethex+0x1f8>
 800b94a:	da0a      	bge.n	800b962 <__gethex+0x29e>
 800b94c:	1a37      	subs	r7, r6, r0
 800b94e:	4621      	mov	r1, r4
 800b950:	ee18 0a10 	vmov	r0, s16
 800b954:	463a      	mov	r2, r7
 800b956:	f000 fc4d 	bl	800c1f4 <__lshift>
 800b95a:	1bed      	subs	r5, r5, r7
 800b95c:	4604      	mov	r4, r0
 800b95e:	f100 0914 	add.w	r9, r0, #20
 800b962:	f04f 0a00 	mov.w	sl, #0
 800b966:	e7ae      	b.n	800b8c6 <__gethex+0x202>
 800b968:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b96c:	42a8      	cmp	r0, r5
 800b96e:	dd72      	ble.n	800ba56 <__gethex+0x392>
 800b970:	1b45      	subs	r5, r0, r5
 800b972:	42ae      	cmp	r6, r5
 800b974:	dc36      	bgt.n	800b9e4 <__gethex+0x320>
 800b976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d02a      	beq.n	800b9d4 <__gethex+0x310>
 800b97e:	2b03      	cmp	r3, #3
 800b980:	d02c      	beq.n	800b9dc <__gethex+0x318>
 800b982:	2b01      	cmp	r3, #1
 800b984:	d11c      	bne.n	800b9c0 <__gethex+0x2fc>
 800b986:	42ae      	cmp	r6, r5
 800b988:	d11a      	bne.n	800b9c0 <__gethex+0x2fc>
 800b98a:	2e01      	cmp	r6, #1
 800b98c:	d112      	bne.n	800b9b4 <__gethex+0x2f0>
 800b98e:	9a04      	ldr	r2, [sp, #16]
 800b990:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b994:	6013      	str	r3, [r2, #0]
 800b996:	2301      	movs	r3, #1
 800b998:	6123      	str	r3, [r4, #16]
 800b99a:	f8c9 3000 	str.w	r3, [r9]
 800b99e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9a0:	2762      	movs	r7, #98	; 0x62
 800b9a2:	601c      	str	r4, [r3, #0]
 800b9a4:	e723      	b.n	800b7ee <__gethex+0x12a>
 800b9a6:	bf00      	nop
 800b9a8:	0800feb8 	.word	0x0800feb8
 800b9ac:	0800fe40 	.word	0x0800fe40
 800b9b0:	0800fe51 	.word	0x0800fe51
 800b9b4:	1e71      	subs	r1, r6, #1
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 fe60 	bl	800c67c <__any_on>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d1e6      	bne.n	800b98e <__gethex+0x2ca>
 800b9c0:	ee18 0a10 	vmov	r0, s16
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	f000 f9f9 	bl	800bdbc <_Bfree>
 800b9ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	6013      	str	r3, [r2, #0]
 800b9d0:	2750      	movs	r7, #80	; 0x50
 800b9d2:	e70c      	b.n	800b7ee <__gethex+0x12a>
 800b9d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1f2      	bne.n	800b9c0 <__gethex+0x2fc>
 800b9da:	e7d8      	b.n	800b98e <__gethex+0x2ca>
 800b9dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1d5      	bne.n	800b98e <__gethex+0x2ca>
 800b9e2:	e7ed      	b.n	800b9c0 <__gethex+0x2fc>
 800b9e4:	1e6f      	subs	r7, r5, #1
 800b9e6:	f1ba 0f00 	cmp.w	sl, #0
 800b9ea:	d131      	bne.n	800ba50 <__gethex+0x38c>
 800b9ec:	b127      	cbz	r7, 800b9f8 <__gethex+0x334>
 800b9ee:	4639      	mov	r1, r7
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f000 fe43 	bl	800c67c <__any_on>
 800b9f6:	4682      	mov	sl, r0
 800b9f8:	117b      	asrs	r3, r7, #5
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ba00:	f007 071f 	and.w	r7, r7, #31
 800ba04:	fa01 f707 	lsl.w	r7, r1, r7
 800ba08:	421f      	tst	r7, r3
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	bf18      	it	ne
 800ba10:	f04a 0a02 	orrne.w	sl, sl, #2
 800ba14:	1b76      	subs	r6, r6, r5
 800ba16:	f7ff fded 	bl	800b5f4 <rshift>
 800ba1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba1e:	2702      	movs	r7, #2
 800ba20:	f1ba 0f00 	cmp.w	sl, #0
 800ba24:	d048      	beq.n	800bab8 <__gethex+0x3f4>
 800ba26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d015      	beq.n	800ba5a <__gethex+0x396>
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d017      	beq.n	800ba62 <__gethex+0x39e>
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d109      	bne.n	800ba4a <__gethex+0x386>
 800ba36:	f01a 0f02 	tst.w	sl, #2
 800ba3a:	d006      	beq.n	800ba4a <__gethex+0x386>
 800ba3c:	f8d9 0000 	ldr.w	r0, [r9]
 800ba40:	ea4a 0a00 	orr.w	sl, sl, r0
 800ba44:	f01a 0f01 	tst.w	sl, #1
 800ba48:	d10e      	bne.n	800ba68 <__gethex+0x3a4>
 800ba4a:	f047 0710 	orr.w	r7, r7, #16
 800ba4e:	e033      	b.n	800bab8 <__gethex+0x3f4>
 800ba50:	f04f 0a01 	mov.w	sl, #1
 800ba54:	e7d0      	b.n	800b9f8 <__gethex+0x334>
 800ba56:	2701      	movs	r7, #1
 800ba58:	e7e2      	b.n	800ba20 <__gethex+0x35c>
 800ba5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba5c:	f1c3 0301 	rsb	r3, r3, #1
 800ba60:	9315      	str	r3, [sp, #84]	; 0x54
 800ba62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d0f0      	beq.n	800ba4a <__gethex+0x386>
 800ba68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba6c:	f104 0314 	add.w	r3, r4, #20
 800ba70:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba74:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba78:	f04f 0c00 	mov.w	ip, #0
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba82:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba86:	d01c      	beq.n	800bac2 <__gethex+0x3fe>
 800ba88:	3201      	adds	r2, #1
 800ba8a:	6002      	str	r2, [r0, #0]
 800ba8c:	2f02      	cmp	r7, #2
 800ba8e:	f104 0314 	add.w	r3, r4, #20
 800ba92:	d13f      	bne.n	800bb14 <__gethex+0x450>
 800ba94:	f8d8 2000 	ldr.w	r2, [r8]
 800ba98:	3a01      	subs	r2, #1
 800ba9a:	42b2      	cmp	r2, r6
 800ba9c:	d10a      	bne.n	800bab4 <__gethex+0x3f0>
 800ba9e:	1171      	asrs	r1, r6, #5
 800baa0:	2201      	movs	r2, #1
 800baa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800baa6:	f006 061f 	and.w	r6, r6, #31
 800baaa:	fa02 f606 	lsl.w	r6, r2, r6
 800baae:	421e      	tst	r6, r3
 800bab0:	bf18      	it	ne
 800bab2:	4617      	movne	r7, r2
 800bab4:	f047 0720 	orr.w	r7, r7, #32
 800bab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800baba:	601c      	str	r4, [r3, #0]
 800babc:	9b04      	ldr	r3, [sp, #16]
 800babe:	601d      	str	r5, [r3, #0]
 800bac0:	e695      	b.n	800b7ee <__gethex+0x12a>
 800bac2:	4299      	cmp	r1, r3
 800bac4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bac8:	d8d8      	bhi.n	800ba7c <__gethex+0x3b8>
 800baca:	68a3      	ldr	r3, [r4, #8]
 800bacc:	459b      	cmp	fp, r3
 800bace:	db19      	blt.n	800bb04 <__gethex+0x440>
 800bad0:	6861      	ldr	r1, [r4, #4]
 800bad2:	ee18 0a10 	vmov	r0, s16
 800bad6:	3101      	adds	r1, #1
 800bad8:	f000 f930 	bl	800bd3c <_Balloc>
 800badc:	4681      	mov	r9, r0
 800bade:	b918      	cbnz	r0, 800bae8 <__gethex+0x424>
 800bae0:	4b1a      	ldr	r3, [pc, #104]	; (800bb4c <__gethex+0x488>)
 800bae2:	4602      	mov	r2, r0
 800bae4:	2184      	movs	r1, #132	; 0x84
 800bae6:	e6a8      	b.n	800b83a <__gethex+0x176>
 800bae8:	6922      	ldr	r2, [r4, #16]
 800baea:	3202      	adds	r2, #2
 800baec:	f104 010c 	add.w	r1, r4, #12
 800baf0:	0092      	lsls	r2, r2, #2
 800baf2:	300c      	adds	r0, #12
 800baf4:	f7fc ffee 	bl	8008ad4 <memcpy>
 800baf8:	4621      	mov	r1, r4
 800bafa:	ee18 0a10 	vmov	r0, s16
 800bafe:	f000 f95d 	bl	800bdbc <_Bfree>
 800bb02:	464c      	mov	r4, r9
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb0c:	6122      	str	r2, [r4, #16]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	615a      	str	r2, [r3, #20]
 800bb12:	e7bb      	b.n	800ba8c <__gethex+0x3c8>
 800bb14:	6922      	ldr	r2, [r4, #16]
 800bb16:	455a      	cmp	r2, fp
 800bb18:	dd0b      	ble.n	800bb32 <__gethex+0x46e>
 800bb1a:	2101      	movs	r1, #1
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f7ff fd69 	bl	800b5f4 <rshift>
 800bb22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb26:	3501      	adds	r5, #1
 800bb28:	42ab      	cmp	r3, r5
 800bb2a:	f6ff aed0 	blt.w	800b8ce <__gethex+0x20a>
 800bb2e:	2701      	movs	r7, #1
 800bb30:	e7c0      	b.n	800bab4 <__gethex+0x3f0>
 800bb32:	f016 061f 	ands.w	r6, r6, #31
 800bb36:	d0fa      	beq.n	800bb2e <__gethex+0x46a>
 800bb38:	4453      	add	r3, sl
 800bb3a:	f1c6 0620 	rsb	r6, r6, #32
 800bb3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb42:	f000 f9ed 	bl	800bf20 <__hi0bits>
 800bb46:	42b0      	cmp	r0, r6
 800bb48:	dbe7      	blt.n	800bb1a <__gethex+0x456>
 800bb4a:	e7f0      	b.n	800bb2e <__gethex+0x46a>
 800bb4c:	0800fe40 	.word	0x0800fe40

0800bb50 <L_shift>:
 800bb50:	f1c2 0208 	rsb	r2, r2, #8
 800bb54:	0092      	lsls	r2, r2, #2
 800bb56:	b570      	push	{r4, r5, r6, lr}
 800bb58:	f1c2 0620 	rsb	r6, r2, #32
 800bb5c:	6843      	ldr	r3, [r0, #4]
 800bb5e:	6804      	ldr	r4, [r0, #0]
 800bb60:	fa03 f506 	lsl.w	r5, r3, r6
 800bb64:	432c      	orrs	r4, r5
 800bb66:	40d3      	lsrs	r3, r2
 800bb68:	6004      	str	r4, [r0, #0]
 800bb6a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb6e:	4288      	cmp	r0, r1
 800bb70:	d3f4      	bcc.n	800bb5c <L_shift+0xc>
 800bb72:	bd70      	pop	{r4, r5, r6, pc}

0800bb74 <__match>:
 800bb74:	b530      	push	{r4, r5, lr}
 800bb76:	6803      	ldr	r3, [r0, #0]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb7e:	b914      	cbnz	r4, 800bb86 <__match+0x12>
 800bb80:	6003      	str	r3, [r0, #0]
 800bb82:	2001      	movs	r0, #1
 800bb84:	bd30      	pop	{r4, r5, pc}
 800bb86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb8e:	2d19      	cmp	r5, #25
 800bb90:	bf98      	it	ls
 800bb92:	3220      	addls	r2, #32
 800bb94:	42a2      	cmp	r2, r4
 800bb96:	d0f0      	beq.n	800bb7a <__match+0x6>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e7f3      	b.n	800bb84 <__match+0x10>

0800bb9c <__hexnan>:
 800bb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba0:	680b      	ldr	r3, [r1, #0]
 800bba2:	115e      	asrs	r6, r3, #5
 800bba4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bba8:	f013 031f 	ands.w	r3, r3, #31
 800bbac:	b087      	sub	sp, #28
 800bbae:	bf18      	it	ne
 800bbb0:	3604      	addne	r6, #4
 800bbb2:	2500      	movs	r5, #0
 800bbb4:	1f37      	subs	r7, r6, #4
 800bbb6:	4690      	mov	r8, r2
 800bbb8:	6802      	ldr	r2, [r0, #0]
 800bbba:	9301      	str	r3, [sp, #4]
 800bbbc:	4682      	mov	sl, r0
 800bbbe:	f846 5c04 	str.w	r5, [r6, #-4]
 800bbc2:	46b9      	mov	r9, r7
 800bbc4:	463c      	mov	r4, r7
 800bbc6:	9502      	str	r5, [sp, #8]
 800bbc8:	46ab      	mov	fp, r5
 800bbca:	7851      	ldrb	r1, [r2, #1]
 800bbcc:	1c53      	adds	r3, r2, #1
 800bbce:	9303      	str	r3, [sp, #12]
 800bbd0:	b341      	cbz	r1, 800bc24 <__hexnan+0x88>
 800bbd2:	4608      	mov	r0, r1
 800bbd4:	9205      	str	r2, [sp, #20]
 800bbd6:	9104      	str	r1, [sp, #16]
 800bbd8:	f7ff fd5e 	bl	800b698 <__hexdig_fun>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d14f      	bne.n	800bc80 <__hexnan+0xe4>
 800bbe0:	9904      	ldr	r1, [sp, #16]
 800bbe2:	9a05      	ldr	r2, [sp, #20]
 800bbe4:	2920      	cmp	r1, #32
 800bbe6:	d818      	bhi.n	800bc1a <__hexnan+0x7e>
 800bbe8:	9b02      	ldr	r3, [sp, #8]
 800bbea:	459b      	cmp	fp, r3
 800bbec:	dd13      	ble.n	800bc16 <__hexnan+0x7a>
 800bbee:	454c      	cmp	r4, r9
 800bbf0:	d206      	bcs.n	800bc00 <__hexnan+0x64>
 800bbf2:	2d07      	cmp	r5, #7
 800bbf4:	dc04      	bgt.n	800bc00 <__hexnan+0x64>
 800bbf6:	462a      	mov	r2, r5
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f7ff ffa8 	bl	800bb50 <L_shift>
 800bc00:	4544      	cmp	r4, r8
 800bc02:	d950      	bls.n	800bca6 <__hexnan+0x10a>
 800bc04:	2300      	movs	r3, #0
 800bc06:	f1a4 0904 	sub.w	r9, r4, #4
 800bc0a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc0e:	f8cd b008 	str.w	fp, [sp, #8]
 800bc12:	464c      	mov	r4, r9
 800bc14:	461d      	mov	r5, r3
 800bc16:	9a03      	ldr	r2, [sp, #12]
 800bc18:	e7d7      	b.n	800bbca <__hexnan+0x2e>
 800bc1a:	2929      	cmp	r1, #41	; 0x29
 800bc1c:	d156      	bne.n	800bccc <__hexnan+0x130>
 800bc1e:	3202      	adds	r2, #2
 800bc20:	f8ca 2000 	str.w	r2, [sl]
 800bc24:	f1bb 0f00 	cmp.w	fp, #0
 800bc28:	d050      	beq.n	800bccc <__hexnan+0x130>
 800bc2a:	454c      	cmp	r4, r9
 800bc2c:	d206      	bcs.n	800bc3c <__hexnan+0xa0>
 800bc2e:	2d07      	cmp	r5, #7
 800bc30:	dc04      	bgt.n	800bc3c <__hexnan+0xa0>
 800bc32:	462a      	mov	r2, r5
 800bc34:	4649      	mov	r1, r9
 800bc36:	4620      	mov	r0, r4
 800bc38:	f7ff ff8a 	bl	800bb50 <L_shift>
 800bc3c:	4544      	cmp	r4, r8
 800bc3e:	d934      	bls.n	800bcaa <__hexnan+0x10e>
 800bc40:	f1a8 0204 	sub.w	r2, r8, #4
 800bc44:	4623      	mov	r3, r4
 800bc46:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc4a:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc4e:	429f      	cmp	r7, r3
 800bc50:	d2f9      	bcs.n	800bc46 <__hexnan+0xaa>
 800bc52:	1b3b      	subs	r3, r7, r4
 800bc54:	f023 0303 	bic.w	r3, r3, #3
 800bc58:	3304      	adds	r3, #4
 800bc5a:	3401      	adds	r4, #1
 800bc5c:	3e03      	subs	r6, #3
 800bc5e:	42b4      	cmp	r4, r6
 800bc60:	bf88      	it	hi
 800bc62:	2304      	movhi	r3, #4
 800bc64:	4443      	add	r3, r8
 800bc66:	2200      	movs	r2, #0
 800bc68:	f843 2b04 	str.w	r2, [r3], #4
 800bc6c:	429f      	cmp	r7, r3
 800bc6e:	d2fb      	bcs.n	800bc68 <__hexnan+0xcc>
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	b91b      	cbnz	r3, 800bc7c <__hexnan+0xe0>
 800bc74:	4547      	cmp	r7, r8
 800bc76:	d127      	bne.n	800bcc8 <__hexnan+0x12c>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	2005      	movs	r0, #5
 800bc7e:	e026      	b.n	800bcce <__hexnan+0x132>
 800bc80:	3501      	adds	r5, #1
 800bc82:	2d08      	cmp	r5, #8
 800bc84:	f10b 0b01 	add.w	fp, fp, #1
 800bc88:	dd06      	ble.n	800bc98 <__hexnan+0xfc>
 800bc8a:	4544      	cmp	r4, r8
 800bc8c:	d9c3      	bls.n	800bc16 <__hexnan+0x7a>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc94:	2501      	movs	r5, #1
 800bc96:	3c04      	subs	r4, #4
 800bc98:	6822      	ldr	r2, [r4, #0]
 800bc9a:	f000 000f 	and.w	r0, r0, #15
 800bc9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bca2:	6022      	str	r2, [r4, #0]
 800bca4:	e7b7      	b.n	800bc16 <__hexnan+0x7a>
 800bca6:	2508      	movs	r5, #8
 800bca8:	e7b5      	b.n	800bc16 <__hexnan+0x7a>
 800bcaa:	9b01      	ldr	r3, [sp, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d0df      	beq.n	800bc70 <__hexnan+0xd4>
 800bcb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb4:	f1c3 0320 	rsb	r3, r3, #32
 800bcb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bcc0:	401a      	ands	r2, r3
 800bcc2:	f846 2c04 	str.w	r2, [r6, #-4]
 800bcc6:	e7d3      	b.n	800bc70 <__hexnan+0xd4>
 800bcc8:	3f04      	subs	r7, #4
 800bcca:	e7d1      	b.n	800bc70 <__hexnan+0xd4>
 800bccc:	2004      	movs	r0, #4
 800bcce:	b007      	add	sp, #28
 800bcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcd4 <_localeconv_r>:
 800bcd4:	4800      	ldr	r0, [pc, #0]	; (800bcd8 <_localeconv_r+0x4>)
 800bcd6:	4770      	bx	lr
 800bcd8:	200001d4 	.word	0x200001d4

0800bcdc <_lseek_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4d07      	ldr	r5, [pc, #28]	; (800bcfc <_lseek_r+0x20>)
 800bce0:	4604      	mov	r4, r0
 800bce2:	4608      	mov	r0, r1
 800bce4:	4611      	mov	r1, r2
 800bce6:	2200      	movs	r2, #0
 800bce8:	602a      	str	r2, [r5, #0]
 800bcea:	461a      	mov	r2, r3
 800bcec:	f7f7 ff20 	bl	8003b30 <_lseek>
 800bcf0:	1c43      	adds	r3, r0, #1
 800bcf2:	d102      	bne.n	800bcfa <_lseek_r+0x1e>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	b103      	cbz	r3, 800bcfa <_lseek_r+0x1e>
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}
 800bcfc:	20000b68 	.word	0x20000b68

0800bd00 <__ascii_mbtowc>:
 800bd00:	b082      	sub	sp, #8
 800bd02:	b901      	cbnz	r1, 800bd06 <__ascii_mbtowc+0x6>
 800bd04:	a901      	add	r1, sp, #4
 800bd06:	b142      	cbz	r2, 800bd1a <__ascii_mbtowc+0x1a>
 800bd08:	b14b      	cbz	r3, 800bd1e <__ascii_mbtowc+0x1e>
 800bd0a:	7813      	ldrb	r3, [r2, #0]
 800bd0c:	600b      	str	r3, [r1, #0]
 800bd0e:	7812      	ldrb	r2, [r2, #0]
 800bd10:	1e10      	subs	r0, r2, #0
 800bd12:	bf18      	it	ne
 800bd14:	2001      	movne	r0, #1
 800bd16:	b002      	add	sp, #8
 800bd18:	4770      	bx	lr
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	e7fb      	b.n	800bd16 <__ascii_mbtowc+0x16>
 800bd1e:	f06f 0001 	mvn.w	r0, #1
 800bd22:	e7f8      	b.n	800bd16 <__ascii_mbtowc+0x16>

0800bd24 <__malloc_lock>:
 800bd24:	4801      	ldr	r0, [pc, #4]	; (800bd2c <__malloc_lock+0x8>)
 800bd26:	f001 bc57 	b.w	800d5d8 <__retarget_lock_acquire_recursive>
 800bd2a:	bf00      	nop
 800bd2c:	20000b6c 	.word	0x20000b6c

0800bd30 <__malloc_unlock>:
 800bd30:	4801      	ldr	r0, [pc, #4]	; (800bd38 <__malloc_unlock+0x8>)
 800bd32:	f001 bc52 	b.w	800d5da <__retarget_lock_release_recursive>
 800bd36:	bf00      	nop
 800bd38:	20000b6c 	.word	0x20000b6c

0800bd3c <_Balloc>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd40:	4604      	mov	r4, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	b976      	cbnz	r6, 800bd64 <_Balloc+0x28>
 800bd46:	2010      	movs	r0, #16
 800bd48:	f7fc feb4 	bl	8008ab4 <malloc>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	6260      	str	r0, [r4, #36]	; 0x24
 800bd50:	b920      	cbnz	r0, 800bd5c <_Balloc+0x20>
 800bd52:	4b18      	ldr	r3, [pc, #96]	; (800bdb4 <_Balloc+0x78>)
 800bd54:	4818      	ldr	r0, [pc, #96]	; (800bdb8 <_Balloc+0x7c>)
 800bd56:	2166      	movs	r1, #102	; 0x66
 800bd58:	f001 fa56 	bl	800d208 <__assert_func>
 800bd5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd60:	6006      	str	r6, [r0, #0]
 800bd62:	60c6      	str	r6, [r0, #12]
 800bd64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd66:	68f3      	ldr	r3, [r6, #12]
 800bd68:	b183      	cbz	r3, 800bd8c <_Balloc+0x50>
 800bd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd72:	b9b8      	cbnz	r0, 800bda4 <_Balloc+0x68>
 800bd74:	2101      	movs	r1, #1
 800bd76:	fa01 f605 	lsl.w	r6, r1, r5
 800bd7a:	1d72      	adds	r2, r6, #5
 800bd7c:	0092      	lsls	r2, r2, #2
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 fc9d 	bl	800c6be <_calloc_r>
 800bd84:	b160      	cbz	r0, 800bda0 <_Balloc+0x64>
 800bd86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd8a:	e00e      	b.n	800bdaa <_Balloc+0x6e>
 800bd8c:	2221      	movs	r2, #33	; 0x21
 800bd8e:	2104      	movs	r1, #4
 800bd90:	4620      	mov	r0, r4
 800bd92:	f000 fc94 	bl	800c6be <_calloc_r>
 800bd96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd98:	60f0      	str	r0, [r6, #12]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e4      	bne.n	800bd6a <_Balloc+0x2e>
 800bda0:	2000      	movs	r0, #0
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	6802      	ldr	r2, [r0, #0]
 800bda6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdb0:	e7f7      	b.n	800bda2 <_Balloc+0x66>
 800bdb2:	bf00      	nop
 800bdb4:	0800fdce 	.word	0x0800fdce
 800bdb8:	0800fecc 	.word	0x0800fecc

0800bdbc <_Bfree>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	b976      	cbnz	r6, 800bde4 <_Bfree+0x28>
 800bdc6:	2010      	movs	r0, #16
 800bdc8:	f7fc fe74 	bl	8008ab4 <malloc>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	6268      	str	r0, [r5, #36]	; 0x24
 800bdd0:	b920      	cbnz	r0, 800bddc <_Bfree+0x20>
 800bdd2:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <_Bfree+0x3c>)
 800bdd4:	4809      	ldr	r0, [pc, #36]	; (800bdfc <_Bfree+0x40>)
 800bdd6:	218a      	movs	r1, #138	; 0x8a
 800bdd8:	f001 fa16 	bl	800d208 <__assert_func>
 800bddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bde0:	6006      	str	r6, [r0, #0]
 800bde2:	60c6      	str	r6, [r0, #12]
 800bde4:	b13c      	cbz	r4, 800bdf6 <_Bfree+0x3a>
 800bde6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bde8:	6862      	ldr	r2, [r4, #4]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdf0:	6021      	str	r1, [r4, #0]
 800bdf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	0800fdce 	.word	0x0800fdce
 800bdfc:	0800fecc 	.word	0x0800fecc

0800be00 <__multadd>:
 800be00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be04:	690d      	ldr	r5, [r1, #16]
 800be06:	4607      	mov	r7, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	461e      	mov	r6, r3
 800be0c:	f101 0c14 	add.w	ip, r1, #20
 800be10:	2000      	movs	r0, #0
 800be12:	f8dc 3000 	ldr.w	r3, [ip]
 800be16:	b299      	uxth	r1, r3
 800be18:	fb02 6101 	mla	r1, r2, r1, r6
 800be1c:	0c1e      	lsrs	r6, r3, #16
 800be1e:	0c0b      	lsrs	r3, r1, #16
 800be20:	fb02 3306 	mla	r3, r2, r6, r3
 800be24:	b289      	uxth	r1, r1
 800be26:	3001      	adds	r0, #1
 800be28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be2c:	4285      	cmp	r5, r0
 800be2e:	f84c 1b04 	str.w	r1, [ip], #4
 800be32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be36:	dcec      	bgt.n	800be12 <__multadd+0x12>
 800be38:	b30e      	cbz	r6, 800be7e <__multadd+0x7e>
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	42ab      	cmp	r3, r5
 800be3e:	dc19      	bgt.n	800be74 <__multadd+0x74>
 800be40:	6861      	ldr	r1, [r4, #4]
 800be42:	4638      	mov	r0, r7
 800be44:	3101      	adds	r1, #1
 800be46:	f7ff ff79 	bl	800bd3c <_Balloc>
 800be4a:	4680      	mov	r8, r0
 800be4c:	b928      	cbnz	r0, 800be5a <__multadd+0x5a>
 800be4e:	4602      	mov	r2, r0
 800be50:	4b0c      	ldr	r3, [pc, #48]	; (800be84 <__multadd+0x84>)
 800be52:	480d      	ldr	r0, [pc, #52]	; (800be88 <__multadd+0x88>)
 800be54:	21b5      	movs	r1, #181	; 0xb5
 800be56:	f001 f9d7 	bl	800d208 <__assert_func>
 800be5a:	6922      	ldr	r2, [r4, #16]
 800be5c:	3202      	adds	r2, #2
 800be5e:	f104 010c 	add.w	r1, r4, #12
 800be62:	0092      	lsls	r2, r2, #2
 800be64:	300c      	adds	r0, #12
 800be66:	f7fc fe35 	bl	8008ad4 <memcpy>
 800be6a:	4621      	mov	r1, r4
 800be6c:	4638      	mov	r0, r7
 800be6e:	f7ff ffa5 	bl	800bdbc <_Bfree>
 800be72:	4644      	mov	r4, r8
 800be74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be78:	3501      	adds	r5, #1
 800be7a:	615e      	str	r6, [r3, #20]
 800be7c:	6125      	str	r5, [r4, #16]
 800be7e:	4620      	mov	r0, r4
 800be80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be84:	0800fe40 	.word	0x0800fe40
 800be88:	0800fecc 	.word	0x0800fecc

0800be8c <__s2b>:
 800be8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be90:	460c      	mov	r4, r1
 800be92:	4615      	mov	r5, r2
 800be94:	461f      	mov	r7, r3
 800be96:	2209      	movs	r2, #9
 800be98:	3308      	adds	r3, #8
 800be9a:	4606      	mov	r6, r0
 800be9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bea0:	2100      	movs	r1, #0
 800bea2:	2201      	movs	r2, #1
 800bea4:	429a      	cmp	r2, r3
 800bea6:	db09      	blt.n	800bebc <__s2b+0x30>
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7ff ff47 	bl	800bd3c <_Balloc>
 800beae:	b940      	cbnz	r0, 800bec2 <__s2b+0x36>
 800beb0:	4602      	mov	r2, r0
 800beb2:	4b19      	ldr	r3, [pc, #100]	; (800bf18 <__s2b+0x8c>)
 800beb4:	4819      	ldr	r0, [pc, #100]	; (800bf1c <__s2b+0x90>)
 800beb6:	21ce      	movs	r1, #206	; 0xce
 800beb8:	f001 f9a6 	bl	800d208 <__assert_func>
 800bebc:	0052      	lsls	r2, r2, #1
 800bebe:	3101      	adds	r1, #1
 800bec0:	e7f0      	b.n	800bea4 <__s2b+0x18>
 800bec2:	9b08      	ldr	r3, [sp, #32]
 800bec4:	6143      	str	r3, [r0, #20]
 800bec6:	2d09      	cmp	r5, #9
 800bec8:	f04f 0301 	mov.w	r3, #1
 800becc:	6103      	str	r3, [r0, #16]
 800bece:	dd16      	ble.n	800befe <__s2b+0x72>
 800bed0:	f104 0909 	add.w	r9, r4, #9
 800bed4:	46c8      	mov	r8, r9
 800bed6:	442c      	add	r4, r5
 800bed8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bedc:	4601      	mov	r1, r0
 800bede:	3b30      	subs	r3, #48	; 0x30
 800bee0:	220a      	movs	r2, #10
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7ff ff8c 	bl	800be00 <__multadd>
 800bee8:	45a0      	cmp	r8, r4
 800beea:	d1f5      	bne.n	800bed8 <__s2b+0x4c>
 800beec:	f1a5 0408 	sub.w	r4, r5, #8
 800bef0:	444c      	add	r4, r9
 800bef2:	1b2d      	subs	r5, r5, r4
 800bef4:	1963      	adds	r3, r4, r5
 800bef6:	42bb      	cmp	r3, r7
 800bef8:	db04      	blt.n	800bf04 <__s2b+0x78>
 800befa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800befe:	340a      	adds	r4, #10
 800bf00:	2509      	movs	r5, #9
 800bf02:	e7f6      	b.n	800bef2 <__s2b+0x66>
 800bf04:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf08:	4601      	mov	r1, r0
 800bf0a:	3b30      	subs	r3, #48	; 0x30
 800bf0c:	220a      	movs	r2, #10
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff ff76 	bl	800be00 <__multadd>
 800bf14:	e7ee      	b.n	800bef4 <__s2b+0x68>
 800bf16:	bf00      	nop
 800bf18:	0800fe40 	.word	0x0800fe40
 800bf1c:	0800fecc 	.word	0x0800fecc

0800bf20 <__hi0bits>:
 800bf20:	0c03      	lsrs	r3, r0, #16
 800bf22:	041b      	lsls	r3, r3, #16
 800bf24:	b9d3      	cbnz	r3, 800bf5c <__hi0bits+0x3c>
 800bf26:	0400      	lsls	r0, r0, #16
 800bf28:	2310      	movs	r3, #16
 800bf2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf2e:	bf04      	itt	eq
 800bf30:	0200      	lsleq	r0, r0, #8
 800bf32:	3308      	addeq	r3, #8
 800bf34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf38:	bf04      	itt	eq
 800bf3a:	0100      	lsleq	r0, r0, #4
 800bf3c:	3304      	addeq	r3, #4
 800bf3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf42:	bf04      	itt	eq
 800bf44:	0080      	lsleq	r0, r0, #2
 800bf46:	3302      	addeq	r3, #2
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	db05      	blt.n	800bf58 <__hi0bits+0x38>
 800bf4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf50:	f103 0301 	add.w	r3, r3, #1
 800bf54:	bf08      	it	eq
 800bf56:	2320      	moveq	r3, #32
 800bf58:	4618      	mov	r0, r3
 800bf5a:	4770      	bx	lr
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	e7e4      	b.n	800bf2a <__hi0bits+0xa>

0800bf60 <__lo0bits>:
 800bf60:	6803      	ldr	r3, [r0, #0]
 800bf62:	f013 0207 	ands.w	r2, r3, #7
 800bf66:	4601      	mov	r1, r0
 800bf68:	d00b      	beq.n	800bf82 <__lo0bits+0x22>
 800bf6a:	07da      	lsls	r2, r3, #31
 800bf6c:	d423      	bmi.n	800bfb6 <__lo0bits+0x56>
 800bf6e:	0798      	lsls	r0, r3, #30
 800bf70:	bf49      	itett	mi
 800bf72:	085b      	lsrmi	r3, r3, #1
 800bf74:	089b      	lsrpl	r3, r3, #2
 800bf76:	2001      	movmi	r0, #1
 800bf78:	600b      	strmi	r3, [r1, #0]
 800bf7a:	bf5c      	itt	pl
 800bf7c:	600b      	strpl	r3, [r1, #0]
 800bf7e:	2002      	movpl	r0, #2
 800bf80:	4770      	bx	lr
 800bf82:	b298      	uxth	r0, r3
 800bf84:	b9a8      	cbnz	r0, 800bfb2 <__lo0bits+0x52>
 800bf86:	0c1b      	lsrs	r3, r3, #16
 800bf88:	2010      	movs	r0, #16
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	b90a      	cbnz	r2, 800bf92 <__lo0bits+0x32>
 800bf8e:	3008      	adds	r0, #8
 800bf90:	0a1b      	lsrs	r3, r3, #8
 800bf92:	071a      	lsls	r2, r3, #28
 800bf94:	bf04      	itt	eq
 800bf96:	091b      	lsreq	r3, r3, #4
 800bf98:	3004      	addeq	r0, #4
 800bf9a:	079a      	lsls	r2, r3, #30
 800bf9c:	bf04      	itt	eq
 800bf9e:	089b      	lsreq	r3, r3, #2
 800bfa0:	3002      	addeq	r0, #2
 800bfa2:	07da      	lsls	r2, r3, #31
 800bfa4:	d403      	bmi.n	800bfae <__lo0bits+0x4e>
 800bfa6:	085b      	lsrs	r3, r3, #1
 800bfa8:	f100 0001 	add.w	r0, r0, #1
 800bfac:	d005      	beq.n	800bfba <__lo0bits+0x5a>
 800bfae:	600b      	str	r3, [r1, #0]
 800bfb0:	4770      	bx	lr
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	e7e9      	b.n	800bf8a <__lo0bits+0x2a>
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	4770      	bx	lr
 800bfba:	2020      	movs	r0, #32
 800bfbc:	4770      	bx	lr
	...

0800bfc0 <__i2b>:
 800bfc0:	b510      	push	{r4, lr}
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	f7ff feb9 	bl	800bd3c <_Balloc>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	b928      	cbnz	r0, 800bfda <__i2b+0x1a>
 800bfce:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <__i2b+0x24>)
 800bfd0:	4805      	ldr	r0, [pc, #20]	; (800bfe8 <__i2b+0x28>)
 800bfd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bfd6:	f001 f917 	bl	800d208 <__assert_func>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	6144      	str	r4, [r0, #20]
 800bfde:	6103      	str	r3, [r0, #16]
 800bfe0:	bd10      	pop	{r4, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0800fe40 	.word	0x0800fe40
 800bfe8:	0800fecc 	.word	0x0800fecc

0800bfec <__multiply>:
 800bfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff0:	4691      	mov	r9, r2
 800bff2:	690a      	ldr	r2, [r1, #16]
 800bff4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	bfb8      	it	lt
 800bffc:	460b      	movlt	r3, r1
 800bffe:	460c      	mov	r4, r1
 800c000:	bfbc      	itt	lt
 800c002:	464c      	movlt	r4, r9
 800c004:	4699      	movlt	r9, r3
 800c006:	6927      	ldr	r7, [r4, #16]
 800c008:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c00c:	68a3      	ldr	r3, [r4, #8]
 800c00e:	6861      	ldr	r1, [r4, #4]
 800c010:	eb07 060a 	add.w	r6, r7, sl
 800c014:	42b3      	cmp	r3, r6
 800c016:	b085      	sub	sp, #20
 800c018:	bfb8      	it	lt
 800c01a:	3101      	addlt	r1, #1
 800c01c:	f7ff fe8e 	bl	800bd3c <_Balloc>
 800c020:	b930      	cbnz	r0, 800c030 <__multiply+0x44>
 800c022:	4602      	mov	r2, r0
 800c024:	4b44      	ldr	r3, [pc, #272]	; (800c138 <__multiply+0x14c>)
 800c026:	4845      	ldr	r0, [pc, #276]	; (800c13c <__multiply+0x150>)
 800c028:	f240 115d 	movw	r1, #349	; 0x15d
 800c02c:	f001 f8ec 	bl	800d208 <__assert_func>
 800c030:	f100 0514 	add.w	r5, r0, #20
 800c034:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c038:	462b      	mov	r3, r5
 800c03a:	2200      	movs	r2, #0
 800c03c:	4543      	cmp	r3, r8
 800c03e:	d321      	bcc.n	800c084 <__multiply+0x98>
 800c040:	f104 0314 	add.w	r3, r4, #20
 800c044:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c048:	f109 0314 	add.w	r3, r9, #20
 800c04c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c050:	9202      	str	r2, [sp, #8]
 800c052:	1b3a      	subs	r2, r7, r4
 800c054:	3a15      	subs	r2, #21
 800c056:	f022 0203 	bic.w	r2, r2, #3
 800c05a:	3204      	adds	r2, #4
 800c05c:	f104 0115 	add.w	r1, r4, #21
 800c060:	428f      	cmp	r7, r1
 800c062:	bf38      	it	cc
 800c064:	2204      	movcc	r2, #4
 800c066:	9201      	str	r2, [sp, #4]
 800c068:	9a02      	ldr	r2, [sp, #8]
 800c06a:	9303      	str	r3, [sp, #12]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d80c      	bhi.n	800c08a <__multiply+0x9e>
 800c070:	2e00      	cmp	r6, #0
 800c072:	dd03      	ble.n	800c07c <__multiply+0x90>
 800c074:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d05a      	beq.n	800c132 <__multiply+0x146>
 800c07c:	6106      	str	r6, [r0, #16]
 800c07e:	b005      	add	sp, #20
 800c080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c084:	f843 2b04 	str.w	r2, [r3], #4
 800c088:	e7d8      	b.n	800c03c <__multiply+0x50>
 800c08a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c08e:	f1ba 0f00 	cmp.w	sl, #0
 800c092:	d024      	beq.n	800c0de <__multiply+0xf2>
 800c094:	f104 0e14 	add.w	lr, r4, #20
 800c098:	46a9      	mov	r9, r5
 800c09a:	f04f 0c00 	mov.w	ip, #0
 800c09e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c0a2:	f8d9 1000 	ldr.w	r1, [r9]
 800c0a6:	fa1f fb82 	uxth.w	fp, r2
 800c0aa:	b289      	uxth	r1, r1
 800c0ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800c0b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c0b4:	f8d9 2000 	ldr.w	r2, [r9]
 800c0b8:	4461      	add	r1, ip
 800c0ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0be:	fb0a c20b 	mla	r2, sl, fp, ip
 800c0c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0c6:	b289      	uxth	r1, r1
 800c0c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0cc:	4577      	cmp	r7, lr
 800c0ce:	f849 1b04 	str.w	r1, [r9], #4
 800c0d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0d6:	d8e2      	bhi.n	800c09e <__multiply+0xb2>
 800c0d8:	9a01      	ldr	r2, [sp, #4]
 800c0da:	f845 c002 	str.w	ip, [r5, r2]
 800c0de:	9a03      	ldr	r2, [sp, #12]
 800c0e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0e4:	3304      	adds	r3, #4
 800c0e6:	f1b9 0f00 	cmp.w	r9, #0
 800c0ea:	d020      	beq.n	800c12e <__multiply+0x142>
 800c0ec:	6829      	ldr	r1, [r5, #0]
 800c0ee:	f104 0c14 	add.w	ip, r4, #20
 800c0f2:	46ae      	mov	lr, r5
 800c0f4:	f04f 0a00 	mov.w	sl, #0
 800c0f8:	f8bc b000 	ldrh.w	fp, [ip]
 800c0fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c100:	fb09 220b 	mla	r2, r9, fp, r2
 800c104:	4492      	add	sl, r2
 800c106:	b289      	uxth	r1, r1
 800c108:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c10c:	f84e 1b04 	str.w	r1, [lr], #4
 800c110:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c114:	f8be 1000 	ldrh.w	r1, [lr]
 800c118:	0c12      	lsrs	r2, r2, #16
 800c11a:	fb09 1102 	mla	r1, r9, r2, r1
 800c11e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c122:	4567      	cmp	r7, ip
 800c124:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c128:	d8e6      	bhi.n	800c0f8 <__multiply+0x10c>
 800c12a:	9a01      	ldr	r2, [sp, #4]
 800c12c:	50a9      	str	r1, [r5, r2]
 800c12e:	3504      	adds	r5, #4
 800c130:	e79a      	b.n	800c068 <__multiply+0x7c>
 800c132:	3e01      	subs	r6, #1
 800c134:	e79c      	b.n	800c070 <__multiply+0x84>
 800c136:	bf00      	nop
 800c138:	0800fe40 	.word	0x0800fe40
 800c13c:	0800fecc 	.word	0x0800fecc

0800c140 <__pow5mult>:
 800c140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c144:	4615      	mov	r5, r2
 800c146:	f012 0203 	ands.w	r2, r2, #3
 800c14a:	4606      	mov	r6, r0
 800c14c:	460f      	mov	r7, r1
 800c14e:	d007      	beq.n	800c160 <__pow5mult+0x20>
 800c150:	4c25      	ldr	r4, [pc, #148]	; (800c1e8 <__pow5mult+0xa8>)
 800c152:	3a01      	subs	r2, #1
 800c154:	2300      	movs	r3, #0
 800c156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c15a:	f7ff fe51 	bl	800be00 <__multadd>
 800c15e:	4607      	mov	r7, r0
 800c160:	10ad      	asrs	r5, r5, #2
 800c162:	d03d      	beq.n	800c1e0 <__pow5mult+0xa0>
 800c164:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c166:	b97c      	cbnz	r4, 800c188 <__pow5mult+0x48>
 800c168:	2010      	movs	r0, #16
 800c16a:	f7fc fca3 	bl	8008ab4 <malloc>
 800c16e:	4602      	mov	r2, r0
 800c170:	6270      	str	r0, [r6, #36]	; 0x24
 800c172:	b928      	cbnz	r0, 800c180 <__pow5mult+0x40>
 800c174:	4b1d      	ldr	r3, [pc, #116]	; (800c1ec <__pow5mult+0xac>)
 800c176:	481e      	ldr	r0, [pc, #120]	; (800c1f0 <__pow5mult+0xb0>)
 800c178:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c17c:	f001 f844 	bl	800d208 <__assert_func>
 800c180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c184:	6004      	str	r4, [r0, #0]
 800c186:	60c4      	str	r4, [r0, #12]
 800c188:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c18c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c190:	b94c      	cbnz	r4, 800c1a6 <__pow5mult+0x66>
 800c192:	f240 2171 	movw	r1, #625	; 0x271
 800c196:	4630      	mov	r0, r6
 800c198:	f7ff ff12 	bl	800bfc0 <__i2b>
 800c19c:	2300      	movs	r3, #0
 800c19e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	6003      	str	r3, [r0, #0]
 800c1a6:	f04f 0900 	mov.w	r9, #0
 800c1aa:	07eb      	lsls	r3, r5, #31
 800c1ac:	d50a      	bpl.n	800c1c4 <__pow5mult+0x84>
 800c1ae:	4639      	mov	r1, r7
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7ff ff1a 	bl	800bfec <__multiply>
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	4680      	mov	r8, r0
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7ff fdfd 	bl	800bdbc <_Bfree>
 800c1c2:	4647      	mov	r7, r8
 800c1c4:	106d      	asrs	r5, r5, #1
 800c1c6:	d00b      	beq.n	800c1e0 <__pow5mult+0xa0>
 800c1c8:	6820      	ldr	r0, [r4, #0]
 800c1ca:	b938      	cbnz	r0, 800c1dc <__pow5mult+0x9c>
 800c1cc:	4622      	mov	r2, r4
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	f7ff ff0b 	bl	800bfec <__multiply>
 800c1d6:	6020      	str	r0, [r4, #0]
 800c1d8:	f8c0 9000 	str.w	r9, [r0]
 800c1dc:	4604      	mov	r4, r0
 800c1de:	e7e4      	b.n	800c1aa <__pow5mult+0x6a>
 800c1e0:	4638      	mov	r0, r7
 800c1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1e6:	bf00      	nop
 800c1e8:	08010018 	.word	0x08010018
 800c1ec:	0800fdce 	.word	0x0800fdce
 800c1f0:	0800fecc 	.word	0x0800fecc

0800c1f4 <__lshift>:
 800c1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f8:	460c      	mov	r4, r1
 800c1fa:	6849      	ldr	r1, [r1, #4]
 800c1fc:	6923      	ldr	r3, [r4, #16]
 800c1fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c202:	68a3      	ldr	r3, [r4, #8]
 800c204:	4607      	mov	r7, r0
 800c206:	4691      	mov	r9, r2
 800c208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c20c:	f108 0601 	add.w	r6, r8, #1
 800c210:	42b3      	cmp	r3, r6
 800c212:	db0b      	blt.n	800c22c <__lshift+0x38>
 800c214:	4638      	mov	r0, r7
 800c216:	f7ff fd91 	bl	800bd3c <_Balloc>
 800c21a:	4605      	mov	r5, r0
 800c21c:	b948      	cbnz	r0, 800c232 <__lshift+0x3e>
 800c21e:	4602      	mov	r2, r0
 800c220:	4b2a      	ldr	r3, [pc, #168]	; (800c2cc <__lshift+0xd8>)
 800c222:	482b      	ldr	r0, [pc, #172]	; (800c2d0 <__lshift+0xdc>)
 800c224:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c228:	f000 ffee 	bl	800d208 <__assert_func>
 800c22c:	3101      	adds	r1, #1
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	e7ee      	b.n	800c210 <__lshift+0x1c>
 800c232:	2300      	movs	r3, #0
 800c234:	f100 0114 	add.w	r1, r0, #20
 800c238:	f100 0210 	add.w	r2, r0, #16
 800c23c:	4618      	mov	r0, r3
 800c23e:	4553      	cmp	r3, sl
 800c240:	db37      	blt.n	800c2b2 <__lshift+0xbe>
 800c242:	6920      	ldr	r0, [r4, #16]
 800c244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c248:	f104 0314 	add.w	r3, r4, #20
 800c24c:	f019 091f 	ands.w	r9, r9, #31
 800c250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c254:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c258:	d02f      	beq.n	800c2ba <__lshift+0xc6>
 800c25a:	f1c9 0e20 	rsb	lr, r9, #32
 800c25e:	468a      	mov	sl, r1
 800c260:	f04f 0c00 	mov.w	ip, #0
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	fa02 f209 	lsl.w	r2, r2, r9
 800c26a:	ea42 020c 	orr.w	r2, r2, ip
 800c26e:	f84a 2b04 	str.w	r2, [sl], #4
 800c272:	f853 2b04 	ldr.w	r2, [r3], #4
 800c276:	4298      	cmp	r0, r3
 800c278:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c27c:	d8f2      	bhi.n	800c264 <__lshift+0x70>
 800c27e:	1b03      	subs	r3, r0, r4
 800c280:	3b15      	subs	r3, #21
 800c282:	f023 0303 	bic.w	r3, r3, #3
 800c286:	3304      	adds	r3, #4
 800c288:	f104 0215 	add.w	r2, r4, #21
 800c28c:	4290      	cmp	r0, r2
 800c28e:	bf38      	it	cc
 800c290:	2304      	movcc	r3, #4
 800c292:	f841 c003 	str.w	ip, [r1, r3]
 800c296:	f1bc 0f00 	cmp.w	ip, #0
 800c29a:	d001      	beq.n	800c2a0 <__lshift+0xac>
 800c29c:	f108 0602 	add.w	r6, r8, #2
 800c2a0:	3e01      	subs	r6, #1
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	612e      	str	r6, [r5, #16]
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	f7ff fd88 	bl	800bdbc <_Bfree>
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	e7c1      	b.n	800c23e <__lshift+0x4a>
 800c2ba:	3904      	subs	r1, #4
 800c2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2c4:	4298      	cmp	r0, r3
 800c2c6:	d8f9      	bhi.n	800c2bc <__lshift+0xc8>
 800c2c8:	e7ea      	b.n	800c2a0 <__lshift+0xac>
 800c2ca:	bf00      	nop
 800c2cc:	0800fe40 	.word	0x0800fe40
 800c2d0:	0800fecc 	.word	0x0800fecc

0800c2d4 <__mcmp>:
 800c2d4:	b530      	push	{r4, r5, lr}
 800c2d6:	6902      	ldr	r2, [r0, #16]
 800c2d8:	690c      	ldr	r4, [r1, #16]
 800c2da:	1b12      	subs	r2, r2, r4
 800c2dc:	d10e      	bne.n	800c2fc <__mcmp+0x28>
 800c2de:	f100 0314 	add.w	r3, r0, #20
 800c2e2:	3114      	adds	r1, #20
 800c2e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c2e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c2ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c2f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c2f4:	42a5      	cmp	r5, r4
 800c2f6:	d003      	beq.n	800c300 <__mcmp+0x2c>
 800c2f8:	d305      	bcc.n	800c306 <__mcmp+0x32>
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	bd30      	pop	{r4, r5, pc}
 800c300:	4283      	cmp	r3, r0
 800c302:	d3f3      	bcc.n	800c2ec <__mcmp+0x18>
 800c304:	e7fa      	b.n	800c2fc <__mcmp+0x28>
 800c306:	f04f 32ff 	mov.w	r2, #4294967295
 800c30a:	e7f7      	b.n	800c2fc <__mcmp+0x28>

0800c30c <__mdiff>:
 800c30c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	460c      	mov	r4, r1
 800c312:	4606      	mov	r6, r0
 800c314:	4611      	mov	r1, r2
 800c316:	4620      	mov	r0, r4
 800c318:	4690      	mov	r8, r2
 800c31a:	f7ff ffdb 	bl	800c2d4 <__mcmp>
 800c31e:	1e05      	subs	r5, r0, #0
 800c320:	d110      	bne.n	800c344 <__mdiff+0x38>
 800c322:	4629      	mov	r1, r5
 800c324:	4630      	mov	r0, r6
 800c326:	f7ff fd09 	bl	800bd3c <_Balloc>
 800c32a:	b930      	cbnz	r0, 800c33a <__mdiff+0x2e>
 800c32c:	4b3a      	ldr	r3, [pc, #232]	; (800c418 <__mdiff+0x10c>)
 800c32e:	4602      	mov	r2, r0
 800c330:	f240 2132 	movw	r1, #562	; 0x232
 800c334:	4839      	ldr	r0, [pc, #228]	; (800c41c <__mdiff+0x110>)
 800c336:	f000 ff67 	bl	800d208 <__assert_func>
 800c33a:	2301      	movs	r3, #1
 800c33c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c344:	bfa4      	itt	ge
 800c346:	4643      	movge	r3, r8
 800c348:	46a0      	movge	r8, r4
 800c34a:	4630      	mov	r0, r6
 800c34c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c350:	bfa6      	itte	ge
 800c352:	461c      	movge	r4, r3
 800c354:	2500      	movge	r5, #0
 800c356:	2501      	movlt	r5, #1
 800c358:	f7ff fcf0 	bl	800bd3c <_Balloc>
 800c35c:	b920      	cbnz	r0, 800c368 <__mdiff+0x5c>
 800c35e:	4b2e      	ldr	r3, [pc, #184]	; (800c418 <__mdiff+0x10c>)
 800c360:	4602      	mov	r2, r0
 800c362:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c366:	e7e5      	b.n	800c334 <__mdiff+0x28>
 800c368:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c36c:	6926      	ldr	r6, [r4, #16]
 800c36e:	60c5      	str	r5, [r0, #12]
 800c370:	f104 0914 	add.w	r9, r4, #20
 800c374:	f108 0514 	add.w	r5, r8, #20
 800c378:	f100 0e14 	add.w	lr, r0, #20
 800c37c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c380:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c384:	f108 0210 	add.w	r2, r8, #16
 800c388:	46f2      	mov	sl, lr
 800c38a:	2100      	movs	r1, #0
 800c38c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c394:	fa1f f883 	uxth.w	r8, r3
 800c398:	fa11 f18b 	uxtah	r1, r1, fp
 800c39c:	0c1b      	lsrs	r3, r3, #16
 800c39e:	eba1 0808 	sub.w	r8, r1, r8
 800c3a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3aa:	fa1f f888 	uxth.w	r8, r8
 800c3ae:	1419      	asrs	r1, r3, #16
 800c3b0:	454e      	cmp	r6, r9
 800c3b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c3b6:	f84a 3b04 	str.w	r3, [sl], #4
 800c3ba:	d8e7      	bhi.n	800c38c <__mdiff+0x80>
 800c3bc:	1b33      	subs	r3, r6, r4
 800c3be:	3b15      	subs	r3, #21
 800c3c0:	f023 0303 	bic.w	r3, r3, #3
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	3415      	adds	r4, #21
 800c3c8:	42a6      	cmp	r6, r4
 800c3ca:	bf38      	it	cc
 800c3cc:	2304      	movcc	r3, #4
 800c3ce:	441d      	add	r5, r3
 800c3d0:	4473      	add	r3, lr
 800c3d2:	469e      	mov	lr, r3
 800c3d4:	462e      	mov	r6, r5
 800c3d6:	4566      	cmp	r6, ip
 800c3d8:	d30e      	bcc.n	800c3f8 <__mdiff+0xec>
 800c3da:	f10c 0203 	add.w	r2, ip, #3
 800c3de:	1b52      	subs	r2, r2, r5
 800c3e0:	f022 0203 	bic.w	r2, r2, #3
 800c3e4:	3d03      	subs	r5, #3
 800c3e6:	45ac      	cmp	ip, r5
 800c3e8:	bf38      	it	cc
 800c3ea:	2200      	movcc	r2, #0
 800c3ec:	441a      	add	r2, r3
 800c3ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c3f2:	b17b      	cbz	r3, 800c414 <__mdiff+0x108>
 800c3f4:	6107      	str	r7, [r0, #16]
 800c3f6:	e7a3      	b.n	800c340 <__mdiff+0x34>
 800c3f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800c3fc:	fa11 f288 	uxtah	r2, r1, r8
 800c400:	1414      	asrs	r4, r2, #16
 800c402:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c406:	b292      	uxth	r2, r2
 800c408:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c40c:	f84e 2b04 	str.w	r2, [lr], #4
 800c410:	1421      	asrs	r1, r4, #16
 800c412:	e7e0      	b.n	800c3d6 <__mdiff+0xca>
 800c414:	3f01      	subs	r7, #1
 800c416:	e7ea      	b.n	800c3ee <__mdiff+0xe2>
 800c418:	0800fe40 	.word	0x0800fe40
 800c41c:	0800fecc 	.word	0x0800fecc

0800c420 <__ulp>:
 800c420:	b082      	sub	sp, #8
 800c422:	ed8d 0b00 	vstr	d0, [sp]
 800c426:	9b01      	ldr	r3, [sp, #4]
 800c428:	4912      	ldr	r1, [pc, #72]	; (800c474 <__ulp+0x54>)
 800c42a:	4019      	ands	r1, r3
 800c42c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c430:	2900      	cmp	r1, #0
 800c432:	dd05      	ble.n	800c440 <__ulp+0x20>
 800c434:	2200      	movs	r2, #0
 800c436:	460b      	mov	r3, r1
 800c438:	ec43 2b10 	vmov	d0, r2, r3
 800c43c:	b002      	add	sp, #8
 800c43e:	4770      	bx	lr
 800c440:	4249      	negs	r1, r1
 800c442:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c446:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c44a:	f04f 0200 	mov.w	r2, #0
 800c44e:	f04f 0300 	mov.w	r3, #0
 800c452:	da04      	bge.n	800c45e <__ulp+0x3e>
 800c454:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c458:	fa41 f300 	asr.w	r3, r1, r0
 800c45c:	e7ec      	b.n	800c438 <__ulp+0x18>
 800c45e:	f1a0 0114 	sub.w	r1, r0, #20
 800c462:	291e      	cmp	r1, #30
 800c464:	bfda      	itte	le
 800c466:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c46a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c46e:	2101      	movgt	r1, #1
 800c470:	460a      	mov	r2, r1
 800c472:	e7e1      	b.n	800c438 <__ulp+0x18>
 800c474:	7ff00000 	.word	0x7ff00000

0800c478 <__b2d>:
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	6905      	ldr	r5, [r0, #16]
 800c47c:	f100 0714 	add.w	r7, r0, #20
 800c480:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c484:	1f2e      	subs	r6, r5, #4
 800c486:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c48a:	4620      	mov	r0, r4
 800c48c:	f7ff fd48 	bl	800bf20 <__hi0bits>
 800c490:	f1c0 0320 	rsb	r3, r0, #32
 800c494:	280a      	cmp	r0, #10
 800c496:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c514 <__b2d+0x9c>
 800c49a:	600b      	str	r3, [r1, #0]
 800c49c:	dc14      	bgt.n	800c4c8 <__b2d+0x50>
 800c49e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c4a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800c4a6:	42b7      	cmp	r7, r6
 800c4a8:	ea41 030c 	orr.w	r3, r1, ip
 800c4ac:	bf34      	ite	cc
 800c4ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c4b2:	2100      	movcs	r1, #0
 800c4b4:	3015      	adds	r0, #21
 800c4b6:	fa04 f000 	lsl.w	r0, r4, r0
 800c4ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800c4be:	ea40 0201 	orr.w	r2, r0, r1
 800c4c2:	ec43 2b10 	vmov	d0, r2, r3
 800c4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4c8:	42b7      	cmp	r7, r6
 800c4ca:	bf3a      	itte	cc
 800c4cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c4d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c4d4:	2100      	movcs	r1, #0
 800c4d6:	380b      	subs	r0, #11
 800c4d8:	d017      	beq.n	800c50a <__b2d+0x92>
 800c4da:	f1c0 0c20 	rsb	ip, r0, #32
 800c4de:	fa04 f500 	lsl.w	r5, r4, r0
 800c4e2:	42be      	cmp	r6, r7
 800c4e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800c4e8:	ea45 0504 	orr.w	r5, r5, r4
 800c4ec:	bf8c      	ite	hi
 800c4ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c4f2:	2400      	movls	r4, #0
 800c4f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c4f8:	fa01 f000 	lsl.w	r0, r1, r0
 800c4fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800c500:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c504:	ea40 0204 	orr.w	r2, r0, r4
 800c508:	e7db      	b.n	800c4c2 <__b2d+0x4a>
 800c50a:	ea44 030c 	orr.w	r3, r4, ip
 800c50e:	460a      	mov	r2, r1
 800c510:	e7d7      	b.n	800c4c2 <__b2d+0x4a>
 800c512:	bf00      	nop
 800c514:	3ff00000 	.word	0x3ff00000

0800c518 <__d2b>:
 800c518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c51c:	4689      	mov	r9, r1
 800c51e:	2101      	movs	r1, #1
 800c520:	ec57 6b10 	vmov	r6, r7, d0
 800c524:	4690      	mov	r8, r2
 800c526:	f7ff fc09 	bl	800bd3c <_Balloc>
 800c52a:	4604      	mov	r4, r0
 800c52c:	b930      	cbnz	r0, 800c53c <__d2b+0x24>
 800c52e:	4602      	mov	r2, r0
 800c530:	4b25      	ldr	r3, [pc, #148]	; (800c5c8 <__d2b+0xb0>)
 800c532:	4826      	ldr	r0, [pc, #152]	; (800c5cc <__d2b+0xb4>)
 800c534:	f240 310a 	movw	r1, #778	; 0x30a
 800c538:	f000 fe66 	bl	800d208 <__assert_func>
 800c53c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c544:	bb35      	cbnz	r5, 800c594 <__d2b+0x7c>
 800c546:	2e00      	cmp	r6, #0
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	d028      	beq.n	800c59e <__d2b+0x86>
 800c54c:	4668      	mov	r0, sp
 800c54e:	9600      	str	r6, [sp, #0]
 800c550:	f7ff fd06 	bl	800bf60 <__lo0bits>
 800c554:	9900      	ldr	r1, [sp, #0]
 800c556:	b300      	cbz	r0, 800c59a <__d2b+0x82>
 800c558:	9a01      	ldr	r2, [sp, #4]
 800c55a:	f1c0 0320 	rsb	r3, r0, #32
 800c55e:	fa02 f303 	lsl.w	r3, r2, r3
 800c562:	430b      	orrs	r3, r1
 800c564:	40c2      	lsrs	r2, r0
 800c566:	6163      	str	r3, [r4, #20]
 800c568:	9201      	str	r2, [sp, #4]
 800c56a:	9b01      	ldr	r3, [sp, #4]
 800c56c:	61a3      	str	r3, [r4, #24]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bf14      	ite	ne
 800c572:	2202      	movne	r2, #2
 800c574:	2201      	moveq	r2, #1
 800c576:	6122      	str	r2, [r4, #16]
 800c578:	b1d5      	cbz	r5, 800c5b0 <__d2b+0x98>
 800c57a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c57e:	4405      	add	r5, r0
 800c580:	f8c9 5000 	str.w	r5, [r9]
 800c584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c588:	f8c8 0000 	str.w	r0, [r8]
 800c58c:	4620      	mov	r0, r4
 800c58e:	b003      	add	sp, #12
 800c590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c598:	e7d5      	b.n	800c546 <__d2b+0x2e>
 800c59a:	6161      	str	r1, [r4, #20]
 800c59c:	e7e5      	b.n	800c56a <__d2b+0x52>
 800c59e:	a801      	add	r0, sp, #4
 800c5a0:	f7ff fcde 	bl	800bf60 <__lo0bits>
 800c5a4:	9b01      	ldr	r3, [sp, #4]
 800c5a6:	6163      	str	r3, [r4, #20]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	6122      	str	r2, [r4, #16]
 800c5ac:	3020      	adds	r0, #32
 800c5ae:	e7e3      	b.n	800c578 <__d2b+0x60>
 800c5b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5b8:	f8c9 0000 	str.w	r0, [r9]
 800c5bc:	6918      	ldr	r0, [r3, #16]
 800c5be:	f7ff fcaf 	bl	800bf20 <__hi0bits>
 800c5c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5c6:	e7df      	b.n	800c588 <__d2b+0x70>
 800c5c8:	0800fe40 	.word	0x0800fe40
 800c5cc:	0800fecc 	.word	0x0800fecc

0800c5d0 <__ratio>:
 800c5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	4688      	mov	r8, r1
 800c5d6:	4669      	mov	r1, sp
 800c5d8:	4681      	mov	r9, r0
 800c5da:	f7ff ff4d 	bl	800c478 <__b2d>
 800c5de:	a901      	add	r1, sp, #4
 800c5e0:	4640      	mov	r0, r8
 800c5e2:	ec55 4b10 	vmov	r4, r5, d0
 800c5e6:	f7ff ff47 	bl	800c478 <__b2d>
 800c5ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c5f2:	eba3 0c02 	sub.w	ip, r3, r2
 800c5f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5fa:	1a9b      	subs	r3, r3, r2
 800c5fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c600:	ec51 0b10 	vmov	r0, r1, d0
 800c604:	2b00      	cmp	r3, #0
 800c606:	bfd6      	itet	le
 800c608:	460a      	movle	r2, r1
 800c60a:	462a      	movgt	r2, r5
 800c60c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c610:	468b      	mov	fp, r1
 800c612:	462f      	mov	r7, r5
 800c614:	bfd4      	ite	le
 800c616:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c61a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c61e:	4620      	mov	r0, r4
 800c620:	ee10 2a10 	vmov	r2, s0
 800c624:	465b      	mov	r3, fp
 800c626:	4639      	mov	r1, r7
 800c628:	f7f4 f918 	bl	800085c <__aeabi_ddiv>
 800c62c:	ec41 0b10 	vmov	d0, r0, r1
 800c630:	b003      	add	sp, #12
 800c632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c636 <__copybits>:
 800c636:	3901      	subs	r1, #1
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	1149      	asrs	r1, r1, #5
 800c63c:	6914      	ldr	r4, [r2, #16]
 800c63e:	3101      	adds	r1, #1
 800c640:	f102 0314 	add.w	r3, r2, #20
 800c644:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c648:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c64c:	1f05      	subs	r5, r0, #4
 800c64e:	42a3      	cmp	r3, r4
 800c650:	d30c      	bcc.n	800c66c <__copybits+0x36>
 800c652:	1aa3      	subs	r3, r4, r2
 800c654:	3b11      	subs	r3, #17
 800c656:	f023 0303 	bic.w	r3, r3, #3
 800c65a:	3211      	adds	r2, #17
 800c65c:	42a2      	cmp	r2, r4
 800c65e:	bf88      	it	hi
 800c660:	2300      	movhi	r3, #0
 800c662:	4418      	add	r0, r3
 800c664:	2300      	movs	r3, #0
 800c666:	4288      	cmp	r0, r1
 800c668:	d305      	bcc.n	800c676 <__copybits+0x40>
 800c66a:	bd70      	pop	{r4, r5, r6, pc}
 800c66c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c670:	f845 6f04 	str.w	r6, [r5, #4]!
 800c674:	e7eb      	b.n	800c64e <__copybits+0x18>
 800c676:	f840 3b04 	str.w	r3, [r0], #4
 800c67a:	e7f4      	b.n	800c666 <__copybits+0x30>

0800c67c <__any_on>:
 800c67c:	f100 0214 	add.w	r2, r0, #20
 800c680:	6900      	ldr	r0, [r0, #16]
 800c682:	114b      	asrs	r3, r1, #5
 800c684:	4298      	cmp	r0, r3
 800c686:	b510      	push	{r4, lr}
 800c688:	db11      	blt.n	800c6ae <__any_on+0x32>
 800c68a:	dd0a      	ble.n	800c6a2 <__any_on+0x26>
 800c68c:	f011 011f 	ands.w	r1, r1, #31
 800c690:	d007      	beq.n	800c6a2 <__any_on+0x26>
 800c692:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c696:	fa24 f001 	lsr.w	r0, r4, r1
 800c69a:	fa00 f101 	lsl.w	r1, r0, r1
 800c69e:	428c      	cmp	r4, r1
 800c6a0:	d10b      	bne.n	800c6ba <__any_on+0x3e>
 800c6a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d803      	bhi.n	800c6b2 <__any_on+0x36>
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	bd10      	pop	{r4, pc}
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	e7f7      	b.n	800c6a2 <__any_on+0x26>
 800c6b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6b6:	2900      	cmp	r1, #0
 800c6b8:	d0f5      	beq.n	800c6a6 <__any_on+0x2a>
 800c6ba:	2001      	movs	r0, #1
 800c6bc:	e7f6      	b.n	800c6ac <__any_on+0x30>

0800c6be <_calloc_r>:
 800c6be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6c0:	fba1 2402 	umull	r2, r4, r1, r2
 800c6c4:	b94c      	cbnz	r4, 800c6da <_calloc_r+0x1c>
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	9201      	str	r2, [sp, #4]
 800c6ca:	f7fc fa9f 	bl	8008c0c <_malloc_r>
 800c6ce:	9a01      	ldr	r2, [sp, #4]
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	b930      	cbnz	r0, 800c6e2 <_calloc_r+0x24>
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	b003      	add	sp, #12
 800c6d8:	bd30      	pop	{r4, r5, pc}
 800c6da:	220c      	movs	r2, #12
 800c6dc:	6002      	str	r2, [r0, #0]
 800c6de:	2500      	movs	r5, #0
 800c6e0:	e7f8      	b.n	800c6d4 <_calloc_r+0x16>
 800c6e2:	4621      	mov	r1, r4
 800c6e4:	f7fc fa1e 	bl	8008b24 <memset>
 800c6e8:	e7f4      	b.n	800c6d4 <_calloc_r+0x16>

0800c6ea <__ssputs_r>:
 800c6ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ee:	688e      	ldr	r6, [r1, #8]
 800c6f0:	429e      	cmp	r6, r3
 800c6f2:	4682      	mov	sl, r0
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	4690      	mov	r8, r2
 800c6f8:	461f      	mov	r7, r3
 800c6fa:	d838      	bhi.n	800c76e <__ssputs_r+0x84>
 800c6fc:	898a      	ldrh	r2, [r1, #12]
 800c6fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c702:	d032      	beq.n	800c76a <__ssputs_r+0x80>
 800c704:	6825      	ldr	r5, [r4, #0]
 800c706:	6909      	ldr	r1, [r1, #16]
 800c708:	eba5 0901 	sub.w	r9, r5, r1
 800c70c:	6965      	ldr	r5, [r4, #20]
 800c70e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c712:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c716:	3301      	adds	r3, #1
 800c718:	444b      	add	r3, r9
 800c71a:	106d      	asrs	r5, r5, #1
 800c71c:	429d      	cmp	r5, r3
 800c71e:	bf38      	it	cc
 800c720:	461d      	movcc	r5, r3
 800c722:	0553      	lsls	r3, r2, #21
 800c724:	d531      	bpl.n	800c78a <__ssputs_r+0xa0>
 800c726:	4629      	mov	r1, r5
 800c728:	f7fc fa70 	bl	8008c0c <_malloc_r>
 800c72c:	4606      	mov	r6, r0
 800c72e:	b950      	cbnz	r0, 800c746 <__ssputs_r+0x5c>
 800c730:	230c      	movs	r3, #12
 800c732:	f8ca 3000 	str.w	r3, [sl]
 800c736:	89a3      	ldrh	r3, [r4, #12]
 800c738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c73c:	81a3      	strh	r3, [r4, #12]
 800c73e:	f04f 30ff 	mov.w	r0, #4294967295
 800c742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c746:	6921      	ldr	r1, [r4, #16]
 800c748:	464a      	mov	r2, r9
 800c74a:	f7fc f9c3 	bl	8008ad4 <memcpy>
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	6126      	str	r6, [r4, #16]
 800c75c:	6165      	str	r5, [r4, #20]
 800c75e:	444e      	add	r6, r9
 800c760:	eba5 0509 	sub.w	r5, r5, r9
 800c764:	6026      	str	r6, [r4, #0]
 800c766:	60a5      	str	r5, [r4, #8]
 800c768:	463e      	mov	r6, r7
 800c76a:	42be      	cmp	r6, r7
 800c76c:	d900      	bls.n	800c770 <__ssputs_r+0x86>
 800c76e:	463e      	mov	r6, r7
 800c770:	6820      	ldr	r0, [r4, #0]
 800c772:	4632      	mov	r2, r6
 800c774:	4641      	mov	r1, r8
 800c776:	f7fc f9bb 	bl	8008af0 <memmove>
 800c77a:	68a3      	ldr	r3, [r4, #8]
 800c77c:	1b9b      	subs	r3, r3, r6
 800c77e:	60a3      	str	r3, [r4, #8]
 800c780:	6823      	ldr	r3, [r4, #0]
 800c782:	4433      	add	r3, r6
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	2000      	movs	r0, #0
 800c788:	e7db      	b.n	800c742 <__ssputs_r+0x58>
 800c78a:	462a      	mov	r2, r5
 800c78c:	f000 ff26 	bl	800d5dc <_realloc_r>
 800c790:	4606      	mov	r6, r0
 800c792:	2800      	cmp	r0, #0
 800c794:	d1e1      	bne.n	800c75a <__ssputs_r+0x70>
 800c796:	6921      	ldr	r1, [r4, #16]
 800c798:	4650      	mov	r0, sl
 800c79a:	f7fc f9cb 	bl	8008b34 <_free_r>
 800c79e:	e7c7      	b.n	800c730 <__ssputs_r+0x46>

0800c7a0 <_svfiprintf_r>:
 800c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	4698      	mov	r8, r3
 800c7a6:	898b      	ldrh	r3, [r1, #12]
 800c7a8:	061b      	lsls	r3, r3, #24
 800c7aa:	b09d      	sub	sp, #116	; 0x74
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	460d      	mov	r5, r1
 800c7b0:	4614      	mov	r4, r2
 800c7b2:	d50e      	bpl.n	800c7d2 <_svfiprintf_r+0x32>
 800c7b4:	690b      	ldr	r3, [r1, #16]
 800c7b6:	b963      	cbnz	r3, 800c7d2 <_svfiprintf_r+0x32>
 800c7b8:	2140      	movs	r1, #64	; 0x40
 800c7ba:	f7fc fa27 	bl	8008c0c <_malloc_r>
 800c7be:	6028      	str	r0, [r5, #0]
 800c7c0:	6128      	str	r0, [r5, #16]
 800c7c2:	b920      	cbnz	r0, 800c7ce <_svfiprintf_r+0x2e>
 800c7c4:	230c      	movs	r3, #12
 800c7c6:	603b      	str	r3, [r7, #0]
 800c7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7cc:	e0d1      	b.n	800c972 <_svfiprintf_r+0x1d2>
 800c7ce:	2340      	movs	r3, #64	; 0x40
 800c7d0:	616b      	str	r3, [r5, #20]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d6:	2320      	movs	r3, #32
 800c7d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7e0:	2330      	movs	r3, #48	; 0x30
 800c7e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c98c <_svfiprintf_r+0x1ec>
 800c7e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7ea:	f04f 0901 	mov.w	r9, #1
 800c7ee:	4623      	mov	r3, r4
 800c7f0:	469a      	mov	sl, r3
 800c7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7f6:	b10a      	cbz	r2, 800c7fc <_svfiprintf_r+0x5c>
 800c7f8:	2a25      	cmp	r2, #37	; 0x25
 800c7fa:	d1f9      	bne.n	800c7f0 <_svfiprintf_r+0x50>
 800c7fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c800:	d00b      	beq.n	800c81a <_svfiprintf_r+0x7a>
 800c802:	465b      	mov	r3, fp
 800c804:	4622      	mov	r2, r4
 800c806:	4629      	mov	r1, r5
 800c808:	4638      	mov	r0, r7
 800c80a:	f7ff ff6e 	bl	800c6ea <__ssputs_r>
 800c80e:	3001      	adds	r0, #1
 800c810:	f000 80aa 	beq.w	800c968 <_svfiprintf_r+0x1c8>
 800c814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c816:	445a      	add	r2, fp
 800c818:	9209      	str	r2, [sp, #36]	; 0x24
 800c81a:	f89a 3000 	ldrb.w	r3, [sl]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f000 80a2 	beq.w	800c968 <_svfiprintf_r+0x1c8>
 800c824:	2300      	movs	r3, #0
 800c826:	f04f 32ff 	mov.w	r2, #4294967295
 800c82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c82e:	f10a 0a01 	add.w	sl, sl, #1
 800c832:	9304      	str	r3, [sp, #16]
 800c834:	9307      	str	r3, [sp, #28]
 800c836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c83a:	931a      	str	r3, [sp, #104]	; 0x68
 800c83c:	4654      	mov	r4, sl
 800c83e:	2205      	movs	r2, #5
 800c840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c844:	4851      	ldr	r0, [pc, #324]	; (800c98c <_svfiprintf_r+0x1ec>)
 800c846:	f7f3 fcd3 	bl	80001f0 <memchr>
 800c84a:	9a04      	ldr	r2, [sp, #16]
 800c84c:	b9d8      	cbnz	r0, 800c886 <_svfiprintf_r+0xe6>
 800c84e:	06d0      	lsls	r0, r2, #27
 800c850:	bf44      	itt	mi
 800c852:	2320      	movmi	r3, #32
 800c854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c858:	0711      	lsls	r1, r2, #28
 800c85a:	bf44      	itt	mi
 800c85c:	232b      	movmi	r3, #43	; 0x2b
 800c85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c862:	f89a 3000 	ldrb.w	r3, [sl]
 800c866:	2b2a      	cmp	r3, #42	; 0x2a
 800c868:	d015      	beq.n	800c896 <_svfiprintf_r+0xf6>
 800c86a:	9a07      	ldr	r2, [sp, #28]
 800c86c:	4654      	mov	r4, sl
 800c86e:	2000      	movs	r0, #0
 800c870:	f04f 0c0a 	mov.w	ip, #10
 800c874:	4621      	mov	r1, r4
 800c876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c87a:	3b30      	subs	r3, #48	; 0x30
 800c87c:	2b09      	cmp	r3, #9
 800c87e:	d94e      	bls.n	800c91e <_svfiprintf_r+0x17e>
 800c880:	b1b0      	cbz	r0, 800c8b0 <_svfiprintf_r+0x110>
 800c882:	9207      	str	r2, [sp, #28]
 800c884:	e014      	b.n	800c8b0 <_svfiprintf_r+0x110>
 800c886:	eba0 0308 	sub.w	r3, r0, r8
 800c88a:	fa09 f303 	lsl.w	r3, r9, r3
 800c88e:	4313      	orrs	r3, r2
 800c890:	9304      	str	r3, [sp, #16]
 800c892:	46a2      	mov	sl, r4
 800c894:	e7d2      	b.n	800c83c <_svfiprintf_r+0x9c>
 800c896:	9b03      	ldr	r3, [sp, #12]
 800c898:	1d19      	adds	r1, r3, #4
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	9103      	str	r1, [sp, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	bfbb      	ittet	lt
 800c8a2:	425b      	neglt	r3, r3
 800c8a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8a8:	9307      	strge	r3, [sp, #28]
 800c8aa:	9307      	strlt	r3, [sp, #28]
 800c8ac:	bfb8      	it	lt
 800c8ae:	9204      	strlt	r2, [sp, #16]
 800c8b0:	7823      	ldrb	r3, [r4, #0]
 800c8b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8b4:	d10c      	bne.n	800c8d0 <_svfiprintf_r+0x130>
 800c8b6:	7863      	ldrb	r3, [r4, #1]
 800c8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ba:	d135      	bne.n	800c928 <_svfiprintf_r+0x188>
 800c8bc:	9b03      	ldr	r3, [sp, #12]
 800c8be:	1d1a      	adds	r2, r3, #4
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	9203      	str	r2, [sp, #12]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	bfb8      	it	lt
 800c8c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8cc:	3402      	adds	r4, #2
 800c8ce:	9305      	str	r3, [sp, #20]
 800c8d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c99c <_svfiprintf_r+0x1fc>
 800c8d4:	7821      	ldrb	r1, [r4, #0]
 800c8d6:	2203      	movs	r2, #3
 800c8d8:	4650      	mov	r0, sl
 800c8da:	f7f3 fc89 	bl	80001f0 <memchr>
 800c8de:	b140      	cbz	r0, 800c8f2 <_svfiprintf_r+0x152>
 800c8e0:	2340      	movs	r3, #64	; 0x40
 800c8e2:	eba0 000a 	sub.w	r0, r0, sl
 800c8e6:	fa03 f000 	lsl.w	r0, r3, r0
 800c8ea:	9b04      	ldr	r3, [sp, #16]
 800c8ec:	4303      	orrs	r3, r0
 800c8ee:	3401      	adds	r4, #1
 800c8f0:	9304      	str	r3, [sp, #16]
 800c8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f6:	4826      	ldr	r0, [pc, #152]	; (800c990 <_svfiprintf_r+0x1f0>)
 800c8f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8fc:	2206      	movs	r2, #6
 800c8fe:	f7f3 fc77 	bl	80001f0 <memchr>
 800c902:	2800      	cmp	r0, #0
 800c904:	d038      	beq.n	800c978 <_svfiprintf_r+0x1d8>
 800c906:	4b23      	ldr	r3, [pc, #140]	; (800c994 <_svfiprintf_r+0x1f4>)
 800c908:	bb1b      	cbnz	r3, 800c952 <_svfiprintf_r+0x1b2>
 800c90a:	9b03      	ldr	r3, [sp, #12]
 800c90c:	3307      	adds	r3, #7
 800c90e:	f023 0307 	bic.w	r3, r3, #7
 800c912:	3308      	adds	r3, #8
 800c914:	9303      	str	r3, [sp, #12]
 800c916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c918:	4433      	add	r3, r6
 800c91a:	9309      	str	r3, [sp, #36]	; 0x24
 800c91c:	e767      	b.n	800c7ee <_svfiprintf_r+0x4e>
 800c91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c922:	460c      	mov	r4, r1
 800c924:	2001      	movs	r0, #1
 800c926:	e7a5      	b.n	800c874 <_svfiprintf_r+0xd4>
 800c928:	2300      	movs	r3, #0
 800c92a:	3401      	adds	r4, #1
 800c92c:	9305      	str	r3, [sp, #20]
 800c92e:	4619      	mov	r1, r3
 800c930:	f04f 0c0a 	mov.w	ip, #10
 800c934:	4620      	mov	r0, r4
 800c936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c93a:	3a30      	subs	r2, #48	; 0x30
 800c93c:	2a09      	cmp	r2, #9
 800c93e:	d903      	bls.n	800c948 <_svfiprintf_r+0x1a8>
 800c940:	2b00      	cmp	r3, #0
 800c942:	d0c5      	beq.n	800c8d0 <_svfiprintf_r+0x130>
 800c944:	9105      	str	r1, [sp, #20]
 800c946:	e7c3      	b.n	800c8d0 <_svfiprintf_r+0x130>
 800c948:	fb0c 2101 	mla	r1, ip, r1, r2
 800c94c:	4604      	mov	r4, r0
 800c94e:	2301      	movs	r3, #1
 800c950:	e7f0      	b.n	800c934 <_svfiprintf_r+0x194>
 800c952:	ab03      	add	r3, sp, #12
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	462a      	mov	r2, r5
 800c958:	4b0f      	ldr	r3, [pc, #60]	; (800c998 <_svfiprintf_r+0x1f8>)
 800c95a:	a904      	add	r1, sp, #16
 800c95c:	4638      	mov	r0, r7
 800c95e:	f7fc fa69 	bl	8008e34 <_printf_float>
 800c962:	1c42      	adds	r2, r0, #1
 800c964:	4606      	mov	r6, r0
 800c966:	d1d6      	bne.n	800c916 <_svfiprintf_r+0x176>
 800c968:	89ab      	ldrh	r3, [r5, #12]
 800c96a:	065b      	lsls	r3, r3, #25
 800c96c:	f53f af2c 	bmi.w	800c7c8 <_svfiprintf_r+0x28>
 800c970:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c972:	b01d      	add	sp, #116	; 0x74
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c978:	ab03      	add	r3, sp, #12
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	462a      	mov	r2, r5
 800c97e:	4b06      	ldr	r3, [pc, #24]	; (800c998 <_svfiprintf_r+0x1f8>)
 800c980:	a904      	add	r1, sp, #16
 800c982:	4638      	mov	r0, r7
 800c984:	f7fc fcfa 	bl	800937c <_printf_i>
 800c988:	e7eb      	b.n	800c962 <_svfiprintf_r+0x1c2>
 800c98a:	bf00      	nop
 800c98c:	08010024 	.word	0x08010024
 800c990:	0801002e 	.word	0x0801002e
 800c994:	08008e35 	.word	0x08008e35
 800c998:	0800c6eb 	.word	0x0800c6eb
 800c99c:	0801002a 	.word	0x0801002a

0800c9a0 <_sungetc_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	1c4b      	adds	r3, r1, #1
 800c9a4:	4614      	mov	r4, r2
 800c9a6:	d103      	bne.n	800c9b0 <_sungetc_r+0x10>
 800c9a8:	f04f 35ff 	mov.w	r5, #4294967295
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	8993      	ldrh	r3, [r2, #12]
 800c9b2:	f023 0320 	bic.w	r3, r3, #32
 800c9b6:	8193      	strh	r3, [r2, #12]
 800c9b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9ba:	6852      	ldr	r2, [r2, #4]
 800c9bc:	b2cd      	uxtb	r5, r1
 800c9be:	b18b      	cbz	r3, 800c9e4 <_sungetc_r+0x44>
 800c9c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	dd08      	ble.n	800c9d8 <_sungetc_r+0x38>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	1e5a      	subs	r2, r3, #1
 800c9ca:	6022      	str	r2, [r4, #0]
 800c9cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c9d0:	6863      	ldr	r3, [r4, #4]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	6063      	str	r3, [r4, #4]
 800c9d6:	e7e9      	b.n	800c9ac <_sungetc_r+0xc>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	f000 fbcd 	bl	800d178 <__submore>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d0f1      	beq.n	800c9c6 <_sungetc_r+0x26>
 800c9e2:	e7e1      	b.n	800c9a8 <_sungetc_r+0x8>
 800c9e4:	6921      	ldr	r1, [r4, #16]
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	b151      	cbz	r1, 800ca00 <_sungetc_r+0x60>
 800c9ea:	4299      	cmp	r1, r3
 800c9ec:	d208      	bcs.n	800ca00 <_sungetc_r+0x60>
 800c9ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c9f2:	42a9      	cmp	r1, r5
 800c9f4:	d104      	bne.n	800ca00 <_sungetc_r+0x60>
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	3201      	adds	r2, #1
 800c9fa:	6023      	str	r3, [r4, #0]
 800c9fc:	6062      	str	r2, [r4, #4]
 800c9fe:	e7d5      	b.n	800c9ac <_sungetc_r+0xc>
 800ca00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ca04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca08:	6363      	str	r3, [r4, #52]	; 0x34
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca0e:	4623      	mov	r3, r4
 800ca10:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	2301      	movs	r3, #1
 800ca18:	e7dc      	b.n	800c9d4 <_sungetc_r+0x34>

0800ca1a <__ssrefill_r>:
 800ca1a:	b510      	push	{r4, lr}
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ca20:	b169      	cbz	r1, 800ca3e <__ssrefill_r+0x24>
 800ca22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca26:	4299      	cmp	r1, r3
 800ca28:	d001      	beq.n	800ca2e <__ssrefill_r+0x14>
 800ca2a:	f7fc f883 	bl	8008b34 <_free_r>
 800ca2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca30:	6063      	str	r3, [r4, #4]
 800ca32:	2000      	movs	r0, #0
 800ca34:	6360      	str	r0, [r4, #52]	; 0x34
 800ca36:	b113      	cbz	r3, 800ca3e <__ssrefill_r+0x24>
 800ca38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ca3a:	6023      	str	r3, [r4, #0]
 800ca3c:	bd10      	pop	{r4, pc}
 800ca3e:	6923      	ldr	r3, [r4, #16]
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	2300      	movs	r3, #0
 800ca44:	6063      	str	r3, [r4, #4]
 800ca46:	89a3      	ldrh	r3, [r4, #12]
 800ca48:	f043 0320 	orr.w	r3, r3, #32
 800ca4c:	81a3      	strh	r3, [r4, #12]
 800ca4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca52:	e7f3      	b.n	800ca3c <__ssrefill_r+0x22>

0800ca54 <__ssvfiscanf_r>:
 800ca54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca58:	460c      	mov	r4, r1
 800ca5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ca5e:	2100      	movs	r1, #0
 800ca60:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ca64:	49a6      	ldr	r1, [pc, #664]	; (800cd00 <__ssvfiscanf_r+0x2ac>)
 800ca66:	91a0      	str	r1, [sp, #640]	; 0x280
 800ca68:	f10d 0804 	add.w	r8, sp, #4
 800ca6c:	49a5      	ldr	r1, [pc, #660]	; (800cd04 <__ssvfiscanf_r+0x2b0>)
 800ca6e:	4fa6      	ldr	r7, [pc, #664]	; (800cd08 <__ssvfiscanf_r+0x2b4>)
 800ca70:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cd0c <__ssvfiscanf_r+0x2b8>
 800ca74:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ca78:	4606      	mov	r6, r0
 800ca7a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	7813      	ldrb	r3, [r2, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 815a 	beq.w	800cd3a <__ssvfiscanf_r+0x2e6>
 800ca86:	5dd9      	ldrb	r1, [r3, r7]
 800ca88:	f011 0108 	ands.w	r1, r1, #8
 800ca8c:	f102 0501 	add.w	r5, r2, #1
 800ca90:	d019      	beq.n	800cac6 <__ssvfiscanf_r+0x72>
 800ca92:	6863      	ldr	r3, [r4, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	dd0f      	ble.n	800cab8 <__ssvfiscanf_r+0x64>
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	781a      	ldrb	r2, [r3, #0]
 800ca9c:	5cba      	ldrb	r2, [r7, r2]
 800ca9e:	0712      	lsls	r2, r2, #28
 800caa0:	d401      	bmi.n	800caa6 <__ssvfiscanf_r+0x52>
 800caa2:	462a      	mov	r2, r5
 800caa4:	e7eb      	b.n	800ca7e <__ssvfiscanf_r+0x2a>
 800caa6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800caa8:	3201      	adds	r2, #1
 800caaa:	9245      	str	r2, [sp, #276]	; 0x114
 800caac:	6862      	ldr	r2, [r4, #4]
 800caae:	3301      	adds	r3, #1
 800cab0:	3a01      	subs	r2, #1
 800cab2:	6062      	str	r2, [r4, #4]
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	e7ec      	b.n	800ca92 <__ssvfiscanf_r+0x3e>
 800cab8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800caba:	4621      	mov	r1, r4
 800cabc:	4630      	mov	r0, r6
 800cabe:	4798      	blx	r3
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d0e9      	beq.n	800ca98 <__ssvfiscanf_r+0x44>
 800cac4:	e7ed      	b.n	800caa2 <__ssvfiscanf_r+0x4e>
 800cac6:	2b25      	cmp	r3, #37	; 0x25
 800cac8:	d012      	beq.n	800caf0 <__ssvfiscanf_r+0x9c>
 800caca:	469a      	mov	sl, r3
 800cacc:	6863      	ldr	r3, [r4, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f340 8091 	ble.w	800cbf6 <__ssvfiscanf_r+0x1a2>
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	7813      	ldrb	r3, [r2, #0]
 800cad8:	4553      	cmp	r3, sl
 800cada:	f040 812e 	bne.w	800cd3a <__ssvfiscanf_r+0x2e6>
 800cade:	6863      	ldr	r3, [r4, #4]
 800cae0:	3b01      	subs	r3, #1
 800cae2:	6063      	str	r3, [r4, #4]
 800cae4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cae6:	3201      	adds	r2, #1
 800cae8:	3301      	adds	r3, #1
 800caea:	6022      	str	r2, [r4, #0]
 800caec:	9345      	str	r3, [sp, #276]	; 0x114
 800caee:	e7d8      	b.n	800caa2 <__ssvfiscanf_r+0x4e>
 800caf0:	9141      	str	r1, [sp, #260]	; 0x104
 800caf2:	9143      	str	r1, [sp, #268]	; 0x10c
 800caf4:	7853      	ldrb	r3, [r2, #1]
 800caf6:	2b2a      	cmp	r3, #42	; 0x2a
 800caf8:	bf02      	ittt	eq
 800cafa:	2310      	moveq	r3, #16
 800cafc:	1c95      	addeq	r5, r2, #2
 800cafe:	9341      	streq	r3, [sp, #260]	; 0x104
 800cb00:	220a      	movs	r2, #10
 800cb02:	46aa      	mov	sl, r5
 800cb04:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cb08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cb0c:	2b09      	cmp	r3, #9
 800cb0e:	d91d      	bls.n	800cb4c <__ssvfiscanf_r+0xf8>
 800cb10:	487e      	ldr	r0, [pc, #504]	; (800cd0c <__ssvfiscanf_r+0x2b8>)
 800cb12:	2203      	movs	r2, #3
 800cb14:	f7f3 fb6c 	bl	80001f0 <memchr>
 800cb18:	b140      	cbz	r0, 800cb2c <__ssvfiscanf_r+0xd8>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	eba0 0009 	sub.w	r0, r0, r9
 800cb20:	fa03 f000 	lsl.w	r0, r3, r0
 800cb24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb26:	4318      	orrs	r0, r3
 800cb28:	9041      	str	r0, [sp, #260]	; 0x104
 800cb2a:	4655      	mov	r5, sl
 800cb2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb30:	2b78      	cmp	r3, #120	; 0x78
 800cb32:	d806      	bhi.n	800cb42 <__ssvfiscanf_r+0xee>
 800cb34:	2b57      	cmp	r3, #87	; 0x57
 800cb36:	d810      	bhi.n	800cb5a <__ssvfiscanf_r+0x106>
 800cb38:	2b25      	cmp	r3, #37	; 0x25
 800cb3a:	d0c6      	beq.n	800caca <__ssvfiscanf_r+0x76>
 800cb3c:	d856      	bhi.n	800cbec <__ssvfiscanf_r+0x198>
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d064      	beq.n	800cc0c <__ssvfiscanf_r+0x1b8>
 800cb42:	2303      	movs	r3, #3
 800cb44:	9347      	str	r3, [sp, #284]	; 0x11c
 800cb46:	230a      	movs	r3, #10
 800cb48:	9342      	str	r3, [sp, #264]	; 0x108
 800cb4a:	e071      	b.n	800cc30 <__ssvfiscanf_r+0x1dc>
 800cb4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cb4e:	fb02 1103 	mla	r1, r2, r3, r1
 800cb52:	3930      	subs	r1, #48	; 0x30
 800cb54:	9143      	str	r1, [sp, #268]	; 0x10c
 800cb56:	4655      	mov	r5, sl
 800cb58:	e7d3      	b.n	800cb02 <__ssvfiscanf_r+0xae>
 800cb5a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cb5e:	2a20      	cmp	r2, #32
 800cb60:	d8ef      	bhi.n	800cb42 <__ssvfiscanf_r+0xee>
 800cb62:	a101      	add	r1, pc, #4	; (adr r1, 800cb68 <__ssvfiscanf_r+0x114>)
 800cb64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb68:	0800cc1b 	.word	0x0800cc1b
 800cb6c:	0800cb43 	.word	0x0800cb43
 800cb70:	0800cb43 	.word	0x0800cb43
 800cb74:	0800cc79 	.word	0x0800cc79
 800cb78:	0800cb43 	.word	0x0800cb43
 800cb7c:	0800cb43 	.word	0x0800cb43
 800cb80:	0800cb43 	.word	0x0800cb43
 800cb84:	0800cb43 	.word	0x0800cb43
 800cb88:	0800cb43 	.word	0x0800cb43
 800cb8c:	0800cb43 	.word	0x0800cb43
 800cb90:	0800cb43 	.word	0x0800cb43
 800cb94:	0800cc8f 	.word	0x0800cc8f
 800cb98:	0800cc65 	.word	0x0800cc65
 800cb9c:	0800cbf3 	.word	0x0800cbf3
 800cba0:	0800cbf3 	.word	0x0800cbf3
 800cba4:	0800cbf3 	.word	0x0800cbf3
 800cba8:	0800cb43 	.word	0x0800cb43
 800cbac:	0800cc69 	.word	0x0800cc69
 800cbb0:	0800cb43 	.word	0x0800cb43
 800cbb4:	0800cb43 	.word	0x0800cb43
 800cbb8:	0800cb43 	.word	0x0800cb43
 800cbbc:	0800cb43 	.word	0x0800cb43
 800cbc0:	0800cc9f 	.word	0x0800cc9f
 800cbc4:	0800cc71 	.word	0x0800cc71
 800cbc8:	0800cc13 	.word	0x0800cc13
 800cbcc:	0800cb43 	.word	0x0800cb43
 800cbd0:	0800cb43 	.word	0x0800cb43
 800cbd4:	0800cc9b 	.word	0x0800cc9b
 800cbd8:	0800cb43 	.word	0x0800cb43
 800cbdc:	0800cc65 	.word	0x0800cc65
 800cbe0:	0800cb43 	.word	0x0800cb43
 800cbe4:	0800cb43 	.word	0x0800cb43
 800cbe8:	0800cc1b 	.word	0x0800cc1b
 800cbec:	3b45      	subs	r3, #69	; 0x45
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d8a7      	bhi.n	800cb42 <__ssvfiscanf_r+0xee>
 800cbf2:	2305      	movs	r3, #5
 800cbf4:	e01b      	b.n	800cc2e <__ssvfiscanf_r+0x1da>
 800cbf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cbf8:	4621      	mov	r1, r4
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	4798      	blx	r3
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	f43f af68 	beq.w	800cad4 <__ssvfiscanf_r+0x80>
 800cc04:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cc06:	2800      	cmp	r0, #0
 800cc08:	f040 808d 	bne.w	800cd26 <__ssvfiscanf_r+0x2d2>
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc10:	e08f      	b.n	800cd32 <__ssvfiscanf_r+0x2de>
 800cc12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cc14:	f042 0220 	orr.w	r2, r2, #32
 800cc18:	9241      	str	r2, [sp, #260]	; 0x104
 800cc1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cc1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc20:	9241      	str	r2, [sp, #260]	; 0x104
 800cc22:	2210      	movs	r2, #16
 800cc24:	2b6f      	cmp	r3, #111	; 0x6f
 800cc26:	9242      	str	r2, [sp, #264]	; 0x108
 800cc28:	bf34      	ite	cc
 800cc2a:	2303      	movcc	r3, #3
 800cc2c:	2304      	movcs	r3, #4
 800cc2e:	9347      	str	r3, [sp, #284]	; 0x11c
 800cc30:	6863      	ldr	r3, [r4, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	dd42      	ble.n	800ccbc <__ssvfiscanf_r+0x268>
 800cc36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cc38:	0659      	lsls	r1, r3, #25
 800cc3a:	d404      	bmi.n	800cc46 <__ssvfiscanf_r+0x1f2>
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	781a      	ldrb	r2, [r3, #0]
 800cc40:	5cba      	ldrb	r2, [r7, r2]
 800cc42:	0712      	lsls	r2, r2, #28
 800cc44:	d441      	bmi.n	800ccca <__ssvfiscanf_r+0x276>
 800cc46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	dc50      	bgt.n	800ccee <__ssvfiscanf_r+0x29a>
 800cc4c:	466b      	mov	r3, sp
 800cc4e:	4622      	mov	r2, r4
 800cc50:	a941      	add	r1, sp, #260	; 0x104
 800cc52:	4630      	mov	r0, r6
 800cc54:	f000 f876 	bl	800cd44 <_scanf_chars>
 800cc58:	2801      	cmp	r0, #1
 800cc5a:	d06e      	beq.n	800cd3a <__ssvfiscanf_r+0x2e6>
 800cc5c:	2802      	cmp	r0, #2
 800cc5e:	f47f af20 	bne.w	800caa2 <__ssvfiscanf_r+0x4e>
 800cc62:	e7cf      	b.n	800cc04 <__ssvfiscanf_r+0x1b0>
 800cc64:	220a      	movs	r2, #10
 800cc66:	e7dd      	b.n	800cc24 <__ssvfiscanf_r+0x1d0>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	9342      	str	r3, [sp, #264]	; 0x108
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e7de      	b.n	800cc2e <__ssvfiscanf_r+0x1da>
 800cc70:	2308      	movs	r3, #8
 800cc72:	9342      	str	r3, [sp, #264]	; 0x108
 800cc74:	2304      	movs	r3, #4
 800cc76:	e7da      	b.n	800cc2e <__ssvfiscanf_r+0x1da>
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	f000 f9d0 	bl	800d020 <__sccl>
 800cc80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cc82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc86:	9341      	str	r3, [sp, #260]	; 0x104
 800cc88:	4605      	mov	r5, r0
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e7cf      	b.n	800cc2e <__ssvfiscanf_r+0x1da>
 800cc8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cc90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc94:	9341      	str	r3, [sp, #260]	; 0x104
 800cc96:	2300      	movs	r3, #0
 800cc98:	e7c9      	b.n	800cc2e <__ssvfiscanf_r+0x1da>
 800cc9a:	2302      	movs	r3, #2
 800cc9c:	e7c7      	b.n	800cc2e <__ssvfiscanf_r+0x1da>
 800cc9e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cca0:	06c3      	lsls	r3, r0, #27
 800cca2:	f53f aefe 	bmi.w	800caa2 <__ssvfiscanf_r+0x4e>
 800cca6:	9b00      	ldr	r3, [sp, #0]
 800cca8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ccaa:	1d19      	adds	r1, r3, #4
 800ccac:	9100      	str	r1, [sp, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f010 0f01 	tst.w	r0, #1
 800ccb4:	bf14      	ite	ne
 800ccb6:	801a      	strhne	r2, [r3, #0]
 800ccb8:	601a      	streq	r2, [r3, #0]
 800ccba:	e6f2      	b.n	800caa2 <__ssvfiscanf_r+0x4e>
 800ccbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	4798      	blx	r3
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d0b6      	beq.n	800cc36 <__ssvfiscanf_r+0x1e2>
 800ccc8:	e79c      	b.n	800cc04 <__ssvfiscanf_r+0x1b0>
 800ccca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cccc:	3201      	adds	r2, #1
 800ccce:	9245      	str	r2, [sp, #276]	; 0x114
 800ccd0:	6862      	ldr	r2, [r4, #4]
 800ccd2:	3a01      	subs	r2, #1
 800ccd4:	2a00      	cmp	r2, #0
 800ccd6:	6062      	str	r2, [r4, #4]
 800ccd8:	dd02      	ble.n	800cce0 <__ssvfiscanf_r+0x28c>
 800ccda:	3301      	adds	r3, #1
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	e7ad      	b.n	800cc3c <__ssvfiscanf_r+0x1e8>
 800cce0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cce2:	4621      	mov	r1, r4
 800cce4:	4630      	mov	r0, r6
 800cce6:	4798      	blx	r3
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d0a7      	beq.n	800cc3c <__ssvfiscanf_r+0x1e8>
 800ccec:	e78a      	b.n	800cc04 <__ssvfiscanf_r+0x1b0>
 800ccee:	2b04      	cmp	r3, #4
 800ccf0:	dc0e      	bgt.n	800cd10 <__ssvfiscanf_r+0x2bc>
 800ccf2:	466b      	mov	r3, sp
 800ccf4:	4622      	mov	r2, r4
 800ccf6:	a941      	add	r1, sp, #260	; 0x104
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f000 f87d 	bl	800cdf8 <_scanf_i>
 800ccfe:	e7ab      	b.n	800cc58 <__ssvfiscanf_r+0x204>
 800cd00:	0800c9a1 	.word	0x0800c9a1
 800cd04:	0800ca1b 	.word	0x0800ca1b
 800cd08:	0800fcc1 	.word	0x0800fcc1
 800cd0c:	0801002a 	.word	0x0801002a
 800cd10:	4b0b      	ldr	r3, [pc, #44]	; (800cd40 <__ssvfiscanf_r+0x2ec>)
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f43f aec5 	beq.w	800caa2 <__ssvfiscanf_r+0x4e>
 800cd18:	466b      	mov	r3, sp
 800cd1a:	4622      	mov	r2, r4
 800cd1c:	a941      	add	r1, sp, #260	; 0x104
 800cd1e:	4630      	mov	r0, r6
 800cd20:	f7fc fc52 	bl	80095c8 <_scanf_float>
 800cd24:	e798      	b.n	800cc58 <__ssvfiscanf_r+0x204>
 800cd26:	89a3      	ldrh	r3, [r4, #12]
 800cd28:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cd2c:	bf18      	it	ne
 800cd2e:	f04f 30ff 	movne.w	r0, #4294967295
 800cd32:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd3a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cd3c:	e7f9      	b.n	800cd32 <__ssvfiscanf_r+0x2de>
 800cd3e:	bf00      	nop
 800cd40:	080095c9 	.word	0x080095c9

0800cd44 <_scanf_chars>:
 800cd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd48:	4615      	mov	r5, r2
 800cd4a:	688a      	ldr	r2, [r1, #8]
 800cd4c:	4680      	mov	r8, r0
 800cd4e:	460c      	mov	r4, r1
 800cd50:	b932      	cbnz	r2, 800cd60 <_scanf_chars+0x1c>
 800cd52:	698a      	ldr	r2, [r1, #24]
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	bf0c      	ite	eq
 800cd58:	2201      	moveq	r2, #1
 800cd5a:	f04f 32ff 	movne.w	r2, #4294967295
 800cd5e:	608a      	str	r2, [r1, #8]
 800cd60:	6822      	ldr	r2, [r4, #0]
 800cd62:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cdf4 <_scanf_chars+0xb0>
 800cd66:	06d1      	lsls	r1, r2, #27
 800cd68:	bf5f      	itttt	pl
 800cd6a:	681a      	ldrpl	r2, [r3, #0]
 800cd6c:	1d11      	addpl	r1, r2, #4
 800cd6e:	6019      	strpl	r1, [r3, #0]
 800cd70:	6816      	ldrpl	r6, [r2, #0]
 800cd72:	2700      	movs	r7, #0
 800cd74:	69a0      	ldr	r0, [r4, #24]
 800cd76:	b188      	cbz	r0, 800cd9c <_scanf_chars+0x58>
 800cd78:	2801      	cmp	r0, #1
 800cd7a:	d107      	bne.n	800cd8c <_scanf_chars+0x48>
 800cd7c:	682a      	ldr	r2, [r5, #0]
 800cd7e:	7811      	ldrb	r1, [r2, #0]
 800cd80:	6962      	ldr	r2, [r4, #20]
 800cd82:	5c52      	ldrb	r2, [r2, r1]
 800cd84:	b952      	cbnz	r2, 800cd9c <_scanf_chars+0x58>
 800cd86:	2f00      	cmp	r7, #0
 800cd88:	d031      	beq.n	800cdee <_scanf_chars+0xaa>
 800cd8a:	e022      	b.n	800cdd2 <_scanf_chars+0x8e>
 800cd8c:	2802      	cmp	r0, #2
 800cd8e:	d120      	bne.n	800cdd2 <_scanf_chars+0x8e>
 800cd90:	682b      	ldr	r3, [r5, #0]
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cd98:	071b      	lsls	r3, r3, #28
 800cd9a:	d41a      	bmi.n	800cdd2 <_scanf_chars+0x8e>
 800cd9c:	6823      	ldr	r3, [r4, #0]
 800cd9e:	06da      	lsls	r2, r3, #27
 800cda0:	bf5e      	ittt	pl
 800cda2:	682b      	ldrpl	r3, [r5, #0]
 800cda4:	781b      	ldrbpl	r3, [r3, #0]
 800cda6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cdaa:	682a      	ldr	r2, [r5, #0]
 800cdac:	686b      	ldr	r3, [r5, #4]
 800cdae:	3201      	adds	r2, #1
 800cdb0:	602a      	str	r2, [r5, #0]
 800cdb2:	68a2      	ldr	r2, [r4, #8]
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	3a01      	subs	r2, #1
 800cdb8:	606b      	str	r3, [r5, #4]
 800cdba:	3701      	adds	r7, #1
 800cdbc:	60a2      	str	r2, [r4, #8]
 800cdbe:	b142      	cbz	r2, 800cdd2 <_scanf_chars+0x8e>
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	dcd7      	bgt.n	800cd74 <_scanf_chars+0x30>
 800cdc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4640      	mov	r0, r8
 800cdcc:	4798      	blx	r3
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d0d0      	beq.n	800cd74 <_scanf_chars+0x30>
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	f013 0310 	ands.w	r3, r3, #16
 800cdd8:	d105      	bne.n	800cde6 <_scanf_chars+0xa2>
 800cdda:	68e2      	ldr	r2, [r4, #12]
 800cddc:	3201      	adds	r2, #1
 800cdde:	60e2      	str	r2, [r4, #12]
 800cde0:	69a2      	ldr	r2, [r4, #24]
 800cde2:	b102      	cbz	r2, 800cde6 <_scanf_chars+0xa2>
 800cde4:	7033      	strb	r3, [r6, #0]
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	443b      	add	r3, r7
 800cdea:	6123      	str	r3, [r4, #16]
 800cdec:	2000      	movs	r0, #0
 800cdee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdf2:	bf00      	nop
 800cdf4:	0800fcc1 	.word	0x0800fcc1

0800cdf8 <_scanf_i>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	4698      	mov	r8, r3
 800cdfe:	4b76      	ldr	r3, [pc, #472]	; (800cfd8 <_scanf_i+0x1e0>)
 800ce00:	460c      	mov	r4, r1
 800ce02:	4682      	mov	sl, r0
 800ce04:	4616      	mov	r6, r2
 800ce06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	ab03      	add	r3, sp, #12
 800ce0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ce12:	4b72      	ldr	r3, [pc, #456]	; (800cfdc <_scanf_i+0x1e4>)
 800ce14:	69a1      	ldr	r1, [r4, #24]
 800ce16:	4a72      	ldr	r2, [pc, #456]	; (800cfe0 <_scanf_i+0x1e8>)
 800ce18:	2903      	cmp	r1, #3
 800ce1a:	bf18      	it	ne
 800ce1c:	461a      	movne	r2, r3
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	9201      	str	r2, [sp, #4]
 800ce22:	1e5a      	subs	r2, r3, #1
 800ce24:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ce28:	bf88      	it	hi
 800ce2a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ce2e:	4627      	mov	r7, r4
 800ce30:	bf82      	ittt	hi
 800ce32:	eb03 0905 	addhi.w	r9, r3, r5
 800ce36:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ce3a:	60a3      	strhi	r3, [r4, #8]
 800ce3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ce40:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ce44:	bf98      	it	ls
 800ce46:	f04f 0900 	movls.w	r9, #0
 800ce4a:	6023      	str	r3, [r4, #0]
 800ce4c:	463d      	mov	r5, r7
 800ce4e:	f04f 0b00 	mov.w	fp, #0
 800ce52:	6831      	ldr	r1, [r6, #0]
 800ce54:	ab03      	add	r3, sp, #12
 800ce56:	7809      	ldrb	r1, [r1, #0]
 800ce58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ce5c:	2202      	movs	r2, #2
 800ce5e:	f7f3 f9c7 	bl	80001f0 <memchr>
 800ce62:	b328      	cbz	r0, 800ceb0 <_scanf_i+0xb8>
 800ce64:	f1bb 0f01 	cmp.w	fp, #1
 800ce68:	d159      	bne.n	800cf1e <_scanf_i+0x126>
 800ce6a:	6862      	ldr	r2, [r4, #4]
 800ce6c:	b92a      	cbnz	r2, 800ce7a <_scanf_i+0x82>
 800ce6e:	6822      	ldr	r2, [r4, #0]
 800ce70:	2308      	movs	r3, #8
 800ce72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce76:	6063      	str	r3, [r4, #4]
 800ce78:	6022      	str	r2, [r4, #0]
 800ce7a:	6822      	ldr	r2, [r4, #0]
 800ce7c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ce80:	6022      	str	r2, [r4, #0]
 800ce82:	68a2      	ldr	r2, [r4, #8]
 800ce84:	1e51      	subs	r1, r2, #1
 800ce86:	60a1      	str	r1, [r4, #8]
 800ce88:	b192      	cbz	r2, 800ceb0 <_scanf_i+0xb8>
 800ce8a:	6832      	ldr	r2, [r6, #0]
 800ce8c:	1c51      	adds	r1, r2, #1
 800ce8e:	6031      	str	r1, [r6, #0]
 800ce90:	7812      	ldrb	r2, [r2, #0]
 800ce92:	f805 2b01 	strb.w	r2, [r5], #1
 800ce96:	6872      	ldr	r2, [r6, #4]
 800ce98:	3a01      	subs	r2, #1
 800ce9a:	2a00      	cmp	r2, #0
 800ce9c:	6072      	str	r2, [r6, #4]
 800ce9e:	dc07      	bgt.n	800ceb0 <_scanf_i+0xb8>
 800cea0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cea4:	4631      	mov	r1, r6
 800cea6:	4650      	mov	r0, sl
 800cea8:	4790      	blx	r2
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	f040 8085 	bne.w	800cfba <_scanf_i+0x1c2>
 800ceb0:	f10b 0b01 	add.w	fp, fp, #1
 800ceb4:	f1bb 0f03 	cmp.w	fp, #3
 800ceb8:	d1cb      	bne.n	800ce52 <_scanf_i+0x5a>
 800ceba:	6863      	ldr	r3, [r4, #4]
 800cebc:	b90b      	cbnz	r3, 800cec2 <_scanf_i+0xca>
 800cebe:	230a      	movs	r3, #10
 800cec0:	6063      	str	r3, [r4, #4]
 800cec2:	6863      	ldr	r3, [r4, #4]
 800cec4:	4947      	ldr	r1, [pc, #284]	; (800cfe4 <_scanf_i+0x1ec>)
 800cec6:	6960      	ldr	r0, [r4, #20]
 800cec8:	1ac9      	subs	r1, r1, r3
 800ceca:	f000 f8a9 	bl	800d020 <__sccl>
 800cece:	f04f 0b00 	mov.w	fp, #0
 800ced2:	68a3      	ldr	r3, [r4, #8]
 800ced4:	6822      	ldr	r2, [r4, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d03d      	beq.n	800cf56 <_scanf_i+0x15e>
 800ceda:	6831      	ldr	r1, [r6, #0]
 800cedc:	6960      	ldr	r0, [r4, #20]
 800cede:	f891 c000 	ldrb.w	ip, [r1]
 800cee2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d035      	beq.n	800cf56 <_scanf_i+0x15e>
 800ceea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ceee:	d124      	bne.n	800cf3a <_scanf_i+0x142>
 800cef0:	0510      	lsls	r0, r2, #20
 800cef2:	d522      	bpl.n	800cf3a <_scanf_i+0x142>
 800cef4:	f10b 0b01 	add.w	fp, fp, #1
 800cef8:	f1b9 0f00 	cmp.w	r9, #0
 800cefc:	d003      	beq.n	800cf06 <_scanf_i+0x10e>
 800cefe:	3301      	adds	r3, #1
 800cf00:	f109 39ff 	add.w	r9, r9, #4294967295
 800cf04:	60a3      	str	r3, [r4, #8]
 800cf06:	6873      	ldr	r3, [r6, #4]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	6073      	str	r3, [r6, #4]
 800cf0e:	dd1b      	ble.n	800cf48 <_scanf_i+0x150>
 800cf10:	6833      	ldr	r3, [r6, #0]
 800cf12:	3301      	adds	r3, #1
 800cf14:	6033      	str	r3, [r6, #0]
 800cf16:	68a3      	ldr	r3, [r4, #8]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	60a3      	str	r3, [r4, #8]
 800cf1c:	e7d9      	b.n	800ced2 <_scanf_i+0xda>
 800cf1e:	f1bb 0f02 	cmp.w	fp, #2
 800cf22:	d1ae      	bne.n	800ce82 <_scanf_i+0x8a>
 800cf24:	6822      	ldr	r2, [r4, #0]
 800cf26:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cf2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cf2e:	d1bf      	bne.n	800ceb0 <_scanf_i+0xb8>
 800cf30:	2310      	movs	r3, #16
 800cf32:	6063      	str	r3, [r4, #4]
 800cf34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf38:	e7a2      	b.n	800ce80 <_scanf_i+0x88>
 800cf3a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cf3e:	6022      	str	r2, [r4, #0]
 800cf40:	780b      	ldrb	r3, [r1, #0]
 800cf42:	f805 3b01 	strb.w	r3, [r5], #1
 800cf46:	e7de      	b.n	800cf06 <_scanf_i+0x10e>
 800cf48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	4650      	mov	r0, sl
 800cf50:	4798      	blx	r3
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d0df      	beq.n	800cf16 <_scanf_i+0x11e>
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	05db      	lsls	r3, r3, #23
 800cf5a:	d50d      	bpl.n	800cf78 <_scanf_i+0x180>
 800cf5c:	42bd      	cmp	r5, r7
 800cf5e:	d909      	bls.n	800cf74 <_scanf_i+0x17c>
 800cf60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cf64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf68:	4632      	mov	r2, r6
 800cf6a:	4650      	mov	r0, sl
 800cf6c:	4798      	blx	r3
 800cf6e:	f105 39ff 	add.w	r9, r5, #4294967295
 800cf72:	464d      	mov	r5, r9
 800cf74:	42bd      	cmp	r5, r7
 800cf76:	d02d      	beq.n	800cfd4 <_scanf_i+0x1dc>
 800cf78:	6822      	ldr	r2, [r4, #0]
 800cf7a:	f012 0210 	ands.w	r2, r2, #16
 800cf7e:	d113      	bne.n	800cfa8 <_scanf_i+0x1b0>
 800cf80:	702a      	strb	r2, [r5, #0]
 800cf82:	6863      	ldr	r3, [r4, #4]
 800cf84:	9e01      	ldr	r6, [sp, #4]
 800cf86:	4639      	mov	r1, r7
 800cf88:	4650      	mov	r0, sl
 800cf8a:	47b0      	blx	r6
 800cf8c:	6821      	ldr	r1, [r4, #0]
 800cf8e:	f8d8 3000 	ldr.w	r3, [r8]
 800cf92:	f011 0f20 	tst.w	r1, #32
 800cf96:	d013      	beq.n	800cfc0 <_scanf_i+0x1c8>
 800cf98:	1d1a      	adds	r2, r3, #4
 800cf9a:	f8c8 2000 	str.w	r2, [r8]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6018      	str	r0, [r3, #0]
 800cfa2:	68e3      	ldr	r3, [r4, #12]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	60e3      	str	r3, [r4, #12]
 800cfa8:	1bed      	subs	r5, r5, r7
 800cfaa:	44ab      	add	fp, r5
 800cfac:	6925      	ldr	r5, [r4, #16]
 800cfae:	445d      	add	r5, fp
 800cfb0:	6125      	str	r5, [r4, #16]
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	b007      	add	sp, #28
 800cfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfba:	f04f 0b00 	mov.w	fp, #0
 800cfbe:	e7ca      	b.n	800cf56 <_scanf_i+0x15e>
 800cfc0:	1d1a      	adds	r2, r3, #4
 800cfc2:	f8c8 2000 	str.w	r2, [r8]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f011 0f01 	tst.w	r1, #1
 800cfcc:	bf14      	ite	ne
 800cfce:	8018      	strhne	r0, [r3, #0]
 800cfd0:	6018      	streq	r0, [r3, #0]
 800cfd2:	e7e6      	b.n	800cfa2 <_scanf_i+0x1aa>
 800cfd4:	2001      	movs	r0, #1
 800cfd6:	e7ed      	b.n	800cfb4 <_scanf_i+0x1bc>
 800cfd8:	0800ec0c 	.word	0x0800ec0c
 800cfdc:	0800d175 	.word	0x0800d175
 800cfe0:	0800a8b5 	.word	0x0800a8b5
 800cfe4:	0801004e 	.word	0x0801004e

0800cfe8 <_read_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4d07      	ldr	r5, [pc, #28]	; (800d008 <_read_r+0x20>)
 800cfec:	4604      	mov	r4, r0
 800cfee:	4608      	mov	r0, r1
 800cff0:	4611      	mov	r1, r2
 800cff2:	2200      	movs	r2, #0
 800cff4:	602a      	str	r2, [r5, #0]
 800cff6:	461a      	mov	r2, r3
 800cff8:	f7f6 fd3a 	bl	8003a70 <_read>
 800cffc:	1c43      	adds	r3, r0, #1
 800cffe:	d102      	bne.n	800d006 <_read_r+0x1e>
 800d000:	682b      	ldr	r3, [r5, #0]
 800d002:	b103      	cbz	r3, 800d006 <_read_r+0x1e>
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	bd38      	pop	{r3, r4, r5, pc}
 800d008:	20000b68 	.word	0x20000b68
 800d00c:	00000000 	.word	0x00000000

0800d010 <nan>:
 800d010:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d018 <nan+0x8>
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	00000000 	.word	0x00000000
 800d01c:	7ff80000 	.word	0x7ff80000

0800d020 <__sccl>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	780b      	ldrb	r3, [r1, #0]
 800d024:	4604      	mov	r4, r0
 800d026:	2b5e      	cmp	r3, #94	; 0x5e
 800d028:	bf0b      	itete	eq
 800d02a:	784b      	ldrbeq	r3, [r1, #1]
 800d02c:	1c48      	addne	r0, r1, #1
 800d02e:	1c88      	addeq	r0, r1, #2
 800d030:	2200      	movne	r2, #0
 800d032:	bf08      	it	eq
 800d034:	2201      	moveq	r2, #1
 800d036:	1e61      	subs	r1, r4, #1
 800d038:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d03c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d040:	42a9      	cmp	r1, r5
 800d042:	d1fb      	bne.n	800d03c <__sccl+0x1c>
 800d044:	b90b      	cbnz	r3, 800d04a <__sccl+0x2a>
 800d046:	3801      	subs	r0, #1
 800d048:	bd70      	pop	{r4, r5, r6, pc}
 800d04a:	f082 0201 	eor.w	r2, r2, #1
 800d04e:	54e2      	strb	r2, [r4, r3]
 800d050:	4605      	mov	r5, r0
 800d052:	4628      	mov	r0, r5
 800d054:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d058:	292d      	cmp	r1, #45	; 0x2d
 800d05a:	d006      	beq.n	800d06a <__sccl+0x4a>
 800d05c:	295d      	cmp	r1, #93	; 0x5d
 800d05e:	d0f3      	beq.n	800d048 <__sccl+0x28>
 800d060:	b909      	cbnz	r1, 800d066 <__sccl+0x46>
 800d062:	4628      	mov	r0, r5
 800d064:	e7f0      	b.n	800d048 <__sccl+0x28>
 800d066:	460b      	mov	r3, r1
 800d068:	e7f1      	b.n	800d04e <__sccl+0x2e>
 800d06a:	786e      	ldrb	r6, [r5, #1]
 800d06c:	2e5d      	cmp	r6, #93	; 0x5d
 800d06e:	d0fa      	beq.n	800d066 <__sccl+0x46>
 800d070:	42b3      	cmp	r3, r6
 800d072:	dcf8      	bgt.n	800d066 <__sccl+0x46>
 800d074:	3502      	adds	r5, #2
 800d076:	4619      	mov	r1, r3
 800d078:	3101      	adds	r1, #1
 800d07a:	428e      	cmp	r6, r1
 800d07c:	5462      	strb	r2, [r4, r1]
 800d07e:	dcfb      	bgt.n	800d078 <__sccl+0x58>
 800d080:	1af1      	subs	r1, r6, r3
 800d082:	3901      	subs	r1, #1
 800d084:	1c58      	adds	r0, r3, #1
 800d086:	42b3      	cmp	r3, r6
 800d088:	bfa8      	it	ge
 800d08a:	2100      	movge	r1, #0
 800d08c:	1843      	adds	r3, r0, r1
 800d08e:	e7e0      	b.n	800d052 <__sccl+0x32>

0800d090 <_strtoul_l.constprop.0>:
 800d090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d094:	4f36      	ldr	r7, [pc, #216]	; (800d170 <_strtoul_l.constprop.0+0xe0>)
 800d096:	4686      	mov	lr, r0
 800d098:	460d      	mov	r5, r1
 800d09a:	4628      	mov	r0, r5
 800d09c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0a0:	5de6      	ldrb	r6, [r4, r7]
 800d0a2:	f016 0608 	ands.w	r6, r6, #8
 800d0a6:	d1f8      	bne.n	800d09a <_strtoul_l.constprop.0+0xa>
 800d0a8:	2c2d      	cmp	r4, #45	; 0x2d
 800d0aa:	d12f      	bne.n	800d10c <_strtoul_l.constprop.0+0x7c>
 800d0ac:	782c      	ldrb	r4, [r5, #0]
 800d0ae:	2601      	movs	r6, #1
 800d0b0:	1c85      	adds	r5, r0, #2
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d057      	beq.n	800d166 <_strtoul_l.constprop.0+0xd6>
 800d0b6:	2b10      	cmp	r3, #16
 800d0b8:	d109      	bne.n	800d0ce <_strtoul_l.constprop.0+0x3e>
 800d0ba:	2c30      	cmp	r4, #48	; 0x30
 800d0bc:	d107      	bne.n	800d0ce <_strtoul_l.constprop.0+0x3e>
 800d0be:	7828      	ldrb	r0, [r5, #0]
 800d0c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d0c4:	2858      	cmp	r0, #88	; 0x58
 800d0c6:	d149      	bne.n	800d15c <_strtoul_l.constprop.0+0xcc>
 800d0c8:	786c      	ldrb	r4, [r5, #1]
 800d0ca:	2310      	movs	r3, #16
 800d0cc:	3502      	adds	r5, #2
 800d0ce:	f04f 38ff 	mov.w	r8, #4294967295
 800d0d2:	2700      	movs	r7, #0
 800d0d4:	fbb8 f8f3 	udiv	r8, r8, r3
 800d0d8:	fb03 f908 	mul.w	r9, r3, r8
 800d0dc:	ea6f 0909 	mvn.w	r9, r9
 800d0e0:	4638      	mov	r0, r7
 800d0e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d0e6:	f1bc 0f09 	cmp.w	ip, #9
 800d0ea:	d814      	bhi.n	800d116 <_strtoul_l.constprop.0+0x86>
 800d0ec:	4664      	mov	r4, ip
 800d0ee:	42a3      	cmp	r3, r4
 800d0f0:	dd22      	ble.n	800d138 <_strtoul_l.constprop.0+0xa8>
 800d0f2:	2f00      	cmp	r7, #0
 800d0f4:	db1d      	blt.n	800d132 <_strtoul_l.constprop.0+0xa2>
 800d0f6:	4580      	cmp	r8, r0
 800d0f8:	d31b      	bcc.n	800d132 <_strtoul_l.constprop.0+0xa2>
 800d0fa:	d101      	bne.n	800d100 <_strtoul_l.constprop.0+0x70>
 800d0fc:	45a1      	cmp	r9, r4
 800d0fe:	db18      	blt.n	800d132 <_strtoul_l.constprop.0+0xa2>
 800d100:	fb00 4003 	mla	r0, r0, r3, r4
 800d104:	2701      	movs	r7, #1
 800d106:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d10a:	e7ea      	b.n	800d0e2 <_strtoul_l.constprop.0+0x52>
 800d10c:	2c2b      	cmp	r4, #43	; 0x2b
 800d10e:	bf04      	itt	eq
 800d110:	782c      	ldrbeq	r4, [r5, #0]
 800d112:	1c85      	addeq	r5, r0, #2
 800d114:	e7cd      	b.n	800d0b2 <_strtoul_l.constprop.0+0x22>
 800d116:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d11a:	f1bc 0f19 	cmp.w	ip, #25
 800d11e:	d801      	bhi.n	800d124 <_strtoul_l.constprop.0+0x94>
 800d120:	3c37      	subs	r4, #55	; 0x37
 800d122:	e7e4      	b.n	800d0ee <_strtoul_l.constprop.0+0x5e>
 800d124:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d128:	f1bc 0f19 	cmp.w	ip, #25
 800d12c:	d804      	bhi.n	800d138 <_strtoul_l.constprop.0+0xa8>
 800d12e:	3c57      	subs	r4, #87	; 0x57
 800d130:	e7dd      	b.n	800d0ee <_strtoul_l.constprop.0+0x5e>
 800d132:	f04f 37ff 	mov.w	r7, #4294967295
 800d136:	e7e6      	b.n	800d106 <_strtoul_l.constprop.0+0x76>
 800d138:	2f00      	cmp	r7, #0
 800d13a:	da07      	bge.n	800d14c <_strtoul_l.constprop.0+0xbc>
 800d13c:	2322      	movs	r3, #34	; 0x22
 800d13e:	f8ce 3000 	str.w	r3, [lr]
 800d142:	f04f 30ff 	mov.w	r0, #4294967295
 800d146:	b932      	cbnz	r2, 800d156 <_strtoul_l.constprop.0+0xc6>
 800d148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d14c:	b106      	cbz	r6, 800d150 <_strtoul_l.constprop.0+0xc0>
 800d14e:	4240      	negs	r0, r0
 800d150:	2a00      	cmp	r2, #0
 800d152:	d0f9      	beq.n	800d148 <_strtoul_l.constprop.0+0xb8>
 800d154:	b107      	cbz	r7, 800d158 <_strtoul_l.constprop.0+0xc8>
 800d156:	1e69      	subs	r1, r5, #1
 800d158:	6011      	str	r1, [r2, #0]
 800d15a:	e7f5      	b.n	800d148 <_strtoul_l.constprop.0+0xb8>
 800d15c:	2430      	movs	r4, #48	; 0x30
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1b5      	bne.n	800d0ce <_strtoul_l.constprop.0+0x3e>
 800d162:	2308      	movs	r3, #8
 800d164:	e7b3      	b.n	800d0ce <_strtoul_l.constprop.0+0x3e>
 800d166:	2c30      	cmp	r4, #48	; 0x30
 800d168:	d0a9      	beq.n	800d0be <_strtoul_l.constprop.0+0x2e>
 800d16a:	230a      	movs	r3, #10
 800d16c:	e7af      	b.n	800d0ce <_strtoul_l.constprop.0+0x3e>
 800d16e:	bf00      	nop
 800d170:	0800fcc1 	.word	0x0800fcc1

0800d174 <_strtoul_r>:
 800d174:	f7ff bf8c 	b.w	800d090 <_strtoul_l.constprop.0>

0800d178 <__submore>:
 800d178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d17c:	460c      	mov	r4, r1
 800d17e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d184:	4299      	cmp	r1, r3
 800d186:	d11d      	bne.n	800d1c4 <__submore+0x4c>
 800d188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d18c:	f7fb fd3e 	bl	8008c0c <_malloc_r>
 800d190:	b918      	cbnz	r0, 800d19a <__submore+0x22>
 800d192:	f04f 30ff 	mov.w	r0, #4294967295
 800d196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d19a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d19e:	63a3      	str	r3, [r4, #56]	; 0x38
 800d1a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d1a4:	6360      	str	r0, [r4, #52]	; 0x34
 800d1a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d1aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d1ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d1b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d1b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d1ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d1be:	6020      	str	r0, [r4, #0]
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	e7e8      	b.n	800d196 <__submore+0x1e>
 800d1c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d1c6:	0077      	lsls	r7, r6, #1
 800d1c8:	463a      	mov	r2, r7
 800d1ca:	f000 fa07 	bl	800d5dc <_realloc_r>
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d0de      	beq.n	800d192 <__submore+0x1a>
 800d1d4:	eb00 0806 	add.w	r8, r0, r6
 800d1d8:	4601      	mov	r1, r0
 800d1da:	4632      	mov	r2, r6
 800d1dc:	4640      	mov	r0, r8
 800d1de:	f7fb fc79 	bl	8008ad4 <memcpy>
 800d1e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d1e6:	f8c4 8000 	str.w	r8, [r4]
 800d1ea:	e7e9      	b.n	800d1c0 <__submore+0x48>

0800d1ec <__ascii_wctomb>:
 800d1ec:	b149      	cbz	r1, 800d202 <__ascii_wctomb+0x16>
 800d1ee:	2aff      	cmp	r2, #255	; 0xff
 800d1f0:	bf85      	ittet	hi
 800d1f2:	238a      	movhi	r3, #138	; 0x8a
 800d1f4:	6003      	strhi	r3, [r0, #0]
 800d1f6:	700a      	strbls	r2, [r1, #0]
 800d1f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d1fc:	bf98      	it	ls
 800d1fe:	2001      	movls	r0, #1
 800d200:	4770      	bx	lr
 800d202:	4608      	mov	r0, r1
 800d204:	4770      	bx	lr
	...

0800d208 <__assert_func>:
 800d208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d20a:	4614      	mov	r4, r2
 800d20c:	461a      	mov	r2, r3
 800d20e:	4b09      	ldr	r3, [pc, #36]	; (800d234 <__assert_func+0x2c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4605      	mov	r5, r0
 800d214:	68d8      	ldr	r0, [r3, #12]
 800d216:	b14c      	cbz	r4, 800d22c <__assert_func+0x24>
 800d218:	4b07      	ldr	r3, [pc, #28]	; (800d238 <__assert_func+0x30>)
 800d21a:	9100      	str	r1, [sp, #0]
 800d21c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d220:	4906      	ldr	r1, [pc, #24]	; (800d23c <__assert_func+0x34>)
 800d222:	462b      	mov	r3, r5
 800d224:	f000 f9a6 	bl	800d574 <fiprintf>
 800d228:	f000 fc20 	bl	800da6c <abort>
 800d22c:	4b04      	ldr	r3, [pc, #16]	; (800d240 <__assert_func+0x38>)
 800d22e:	461c      	mov	r4, r3
 800d230:	e7f3      	b.n	800d21a <__assert_func+0x12>
 800d232:	bf00      	nop
 800d234:	2000007c 	.word	0x2000007c
 800d238:	08010050 	.word	0x08010050
 800d23c:	0801005d 	.word	0x0801005d
 800d240:	0801008b 	.word	0x0801008b

0800d244 <__sflush_r>:
 800d244:	898a      	ldrh	r2, [r1, #12]
 800d246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24a:	4605      	mov	r5, r0
 800d24c:	0710      	lsls	r0, r2, #28
 800d24e:	460c      	mov	r4, r1
 800d250:	d458      	bmi.n	800d304 <__sflush_r+0xc0>
 800d252:	684b      	ldr	r3, [r1, #4]
 800d254:	2b00      	cmp	r3, #0
 800d256:	dc05      	bgt.n	800d264 <__sflush_r+0x20>
 800d258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	dc02      	bgt.n	800d264 <__sflush_r+0x20>
 800d25e:	2000      	movs	r0, #0
 800d260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d266:	2e00      	cmp	r6, #0
 800d268:	d0f9      	beq.n	800d25e <__sflush_r+0x1a>
 800d26a:	2300      	movs	r3, #0
 800d26c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d270:	682f      	ldr	r7, [r5, #0]
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	d032      	beq.n	800d2dc <__sflush_r+0x98>
 800d276:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d278:	89a3      	ldrh	r3, [r4, #12]
 800d27a:	075a      	lsls	r2, r3, #29
 800d27c:	d505      	bpl.n	800d28a <__sflush_r+0x46>
 800d27e:	6863      	ldr	r3, [r4, #4]
 800d280:	1ac0      	subs	r0, r0, r3
 800d282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d284:	b10b      	cbz	r3, 800d28a <__sflush_r+0x46>
 800d286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d288:	1ac0      	subs	r0, r0, r3
 800d28a:	2300      	movs	r3, #0
 800d28c:	4602      	mov	r2, r0
 800d28e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d290:	6a21      	ldr	r1, [r4, #32]
 800d292:	4628      	mov	r0, r5
 800d294:	47b0      	blx	r6
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	d106      	bne.n	800d2aa <__sflush_r+0x66>
 800d29c:	6829      	ldr	r1, [r5, #0]
 800d29e:	291d      	cmp	r1, #29
 800d2a0:	d82c      	bhi.n	800d2fc <__sflush_r+0xb8>
 800d2a2:	4a2a      	ldr	r2, [pc, #168]	; (800d34c <__sflush_r+0x108>)
 800d2a4:	40ca      	lsrs	r2, r1
 800d2a6:	07d6      	lsls	r6, r2, #31
 800d2a8:	d528      	bpl.n	800d2fc <__sflush_r+0xb8>
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	6062      	str	r2, [r4, #4]
 800d2ae:	04d9      	lsls	r1, r3, #19
 800d2b0:	6922      	ldr	r2, [r4, #16]
 800d2b2:	6022      	str	r2, [r4, #0]
 800d2b4:	d504      	bpl.n	800d2c0 <__sflush_r+0x7c>
 800d2b6:	1c42      	adds	r2, r0, #1
 800d2b8:	d101      	bne.n	800d2be <__sflush_r+0x7a>
 800d2ba:	682b      	ldr	r3, [r5, #0]
 800d2bc:	b903      	cbnz	r3, 800d2c0 <__sflush_r+0x7c>
 800d2be:	6560      	str	r0, [r4, #84]	; 0x54
 800d2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2c2:	602f      	str	r7, [r5, #0]
 800d2c4:	2900      	cmp	r1, #0
 800d2c6:	d0ca      	beq.n	800d25e <__sflush_r+0x1a>
 800d2c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2cc:	4299      	cmp	r1, r3
 800d2ce:	d002      	beq.n	800d2d6 <__sflush_r+0x92>
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	f7fb fc2f 	bl	8008b34 <_free_r>
 800d2d6:	2000      	movs	r0, #0
 800d2d8:	6360      	str	r0, [r4, #52]	; 0x34
 800d2da:	e7c1      	b.n	800d260 <__sflush_r+0x1c>
 800d2dc:	6a21      	ldr	r1, [r4, #32]
 800d2de:	2301      	movs	r3, #1
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	47b0      	blx	r6
 800d2e4:	1c41      	adds	r1, r0, #1
 800d2e6:	d1c7      	bne.n	800d278 <__sflush_r+0x34>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d0c4      	beq.n	800d278 <__sflush_r+0x34>
 800d2ee:	2b1d      	cmp	r3, #29
 800d2f0:	d001      	beq.n	800d2f6 <__sflush_r+0xb2>
 800d2f2:	2b16      	cmp	r3, #22
 800d2f4:	d101      	bne.n	800d2fa <__sflush_r+0xb6>
 800d2f6:	602f      	str	r7, [r5, #0]
 800d2f8:	e7b1      	b.n	800d25e <__sflush_r+0x1a>
 800d2fa:	89a3      	ldrh	r3, [r4, #12]
 800d2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d300:	81a3      	strh	r3, [r4, #12]
 800d302:	e7ad      	b.n	800d260 <__sflush_r+0x1c>
 800d304:	690f      	ldr	r7, [r1, #16]
 800d306:	2f00      	cmp	r7, #0
 800d308:	d0a9      	beq.n	800d25e <__sflush_r+0x1a>
 800d30a:	0793      	lsls	r3, r2, #30
 800d30c:	680e      	ldr	r6, [r1, #0]
 800d30e:	bf08      	it	eq
 800d310:	694b      	ldreq	r3, [r1, #20]
 800d312:	600f      	str	r7, [r1, #0]
 800d314:	bf18      	it	ne
 800d316:	2300      	movne	r3, #0
 800d318:	eba6 0807 	sub.w	r8, r6, r7
 800d31c:	608b      	str	r3, [r1, #8]
 800d31e:	f1b8 0f00 	cmp.w	r8, #0
 800d322:	dd9c      	ble.n	800d25e <__sflush_r+0x1a>
 800d324:	6a21      	ldr	r1, [r4, #32]
 800d326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d328:	4643      	mov	r3, r8
 800d32a:	463a      	mov	r2, r7
 800d32c:	4628      	mov	r0, r5
 800d32e:	47b0      	blx	r6
 800d330:	2800      	cmp	r0, #0
 800d332:	dc06      	bgt.n	800d342 <__sflush_r+0xfe>
 800d334:	89a3      	ldrh	r3, [r4, #12]
 800d336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d33a:	81a3      	strh	r3, [r4, #12]
 800d33c:	f04f 30ff 	mov.w	r0, #4294967295
 800d340:	e78e      	b.n	800d260 <__sflush_r+0x1c>
 800d342:	4407      	add	r7, r0
 800d344:	eba8 0800 	sub.w	r8, r8, r0
 800d348:	e7e9      	b.n	800d31e <__sflush_r+0xda>
 800d34a:	bf00      	nop
 800d34c:	20400001 	.word	0x20400001

0800d350 <_fflush_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	690b      	ldr	r3, [r1, #16]
 800d354:	4605      	mov	r5, r0
 800d356:	460c      	mov	r4, r1
 800d358:	b913      	cbnz	r3, 800d360 <_fflush_r+0x10>
 800d35a:	2500      	movs	r5, #0
 800d35c:	4628      	mov	r0, r5
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	b118      	cbz	r0, 800d36a <_fflush_r+0x1a>
 800d362:	6983      	ldr	r3, [r0, #24]
 800d364:	b90b      	cbnz	r3, 800d36a <_fflush_r+0x1a>
 800d366:	f000 f887 	bl	800d478 <__sinit>
 800d36a:	4b14      	ldr	r3, [pc, #80]	; (800d3bc <_fflush_r+0x6c>)
 800d36c:	429c      	cmp	r4, r3
 800d36e:	d11b      	bne.n	800d3a8 <_fflush_r+0x58>
 800d370:	686c      	ldr	r4, [r5, #4]
 800d372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d0ef      	beq.n	800d35a <_fflush_r+0xa>
 800d37a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d37c:	07d0      	lsls	r0, r2, #31
 800d37e:	d404      	bmi.n	800d38a <_fflush_r+0x3a>
 800d380:	0599      	lsls	r1, r3, #22
 800d382:	d402      	bmi.n	800d38a <_fflush_r+0x3a>
 800d384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d386:	f000 f927 	bl	800d5d8 <__retarget_lock_acquire_recursive>
 800d38a:	4628      	mov	r0, r5
 800d38c:	4621      	mov	r1, r4
 800d38e:	f7ff ff59 	bl	800d244 <__sflush_r>
 800d392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d394:	07da      	lsls	r2, r3, #31
 800d396:	4605      	mov	r5, r0
 800d398:	d4e0      	bmi.n	800d35c <_fflush_r+0xc>
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	059b      	lsls	r3, r3, #22
 800d39e:	d4dd      	bmi.n	800d35c <_fflush_r+0xc>
 800d3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3a2:	f000 f91a 	bl	800d5da <__retarget_lock_release_recursive>
 800d3a6:	e7d9      	b.n	800d35c <_fflush_r+0xc>
 800d3a8:	4b05      	ldr	r3, [pc, #20]	; (800d3c0 <_fflush_r+0x70>)
 800d3aa:	429c      	cmp	r4, r3
 800d3ac:	d101      	bne.n	800d3b2 <_fflush_r+0x62>
 800d3ae:	68ac      	ldr	r4, [r5, #8]
 800d3b0:	e7df      	b.n	800d372 <_fflush_r+0x22>
 800d3b2:	4b04      	ldr	r3, [pc, #16]	; (800d3c4 <_fflush_r+0x74>)
 800d3b4:	429c      	cmp	r4, r3
 800d3b6:	bf08      	it	eq
 800d3b8:	68ec      	ldreq	r4, [r5, #12]
 800d3ba:	e7da      	b.n	800d372 <_fflush_r+0x22>
 800d3bc:	080100ac 	.word	0x080100ac
 800d3c0:	080100cc 	.word	0x080100cc
 800d3c4:	0801008c 	.word	0x0801008c

0800d3c8 <std>:
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d3d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3d6:	6083      	str	r3, [r0, #8]
 800d3d8:	8181      	strh	r1, [r0, #12]
 800d3da:	6643      	str	r3, [r0, #100]	; 0x64
 800d3dc:	81c2      	strh	r2, [r0, #14]
 800d3de:	6183      	str	r3, [r0, #24]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	2208      	movs	r2, #8
 800d3e4:	305c      	adds	r0, #92	; 0x5c
 800d3e6:	f7fb fb9d 	bl	8008b24 <memset>
 800d3ea:	4b05      	ldr	r3, [pc, #20]	; (800d400 <std+0x38>)
 800d3ec:	6263      	str	r3, [r4, #36]	; 0x24
 800d3ee:	4b05      	ldr	r3, [pc, #20]	; (800d404 <std+0x3c>)
 800d3f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3f2:	4b05      	ldr	r3, [pc, #20]	; (800d408 <std+0x40>)
 800d3f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3f6:	4b05      	ldr	r3, [pc, #20]	; (800d40c <std+0x44>)
 800d3f8:	6224      	str	r4, [r4, #32]
 800d3fa:	6323      	str	r3, [r4, #48]	; 0x30
 800d3fc:	bd10      	pop	{r4, pc}
 800d3fe:	bf00      	nop
 800d400:	08009aad 	.word	0x08009aad
 800d404:	08009ad3 	.word	0x08009ad3
 800d408:	08009b0b 	.word	0x08009b0b
 800d40c:	08009b2f 	.word	0x08009b2f

0800d410 <_cleanup_r>:
 800d410:	4901      	ldr	r1, [pc, #4]	; (800d418 <_cleanup_r+0x8>)
 800d412:	f000 b8c1 	b.w	800d598 <_fwalk_reent>
 800d416:	bf00      	nop
 800d418:	0800d351 	.word	0x0800d351

0800d41c <__sfmoreglue>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	2268      	movs	r2, #104	; 0x68
 800d420:	1e4d      	subs	r5, r1, #1
 800d422:	4355      	muls	r5, r2
 800d424:	460e      	mov	r6, r1
 800d426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d42a:	f7fb fbef 	bl	8008c0c <_malloc_r>
 800d42e:	4604      	mov	r4, r0
 800d430:	b140      	cbz	r0, 800d444 <__sfmoreglue+0x28>
 800d432:	2100      	movs	r1, #0
 800d434:	e9c0 1600 	strd	r1, r6, [r0]
 800d438:	300c      	adds	r0, #12
 800d43a:	60a0      	str	r0, [r4, #8]
 800d43c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d440:	f7fb fb70 	bl	8008b24 <memset>
 800d444:	4620      	mov	r0, r4
 800d446:	bd70      	pop	{r4, r5, r6, pc}

0800d448 <__sfp_lock_acquire>:
 800d448:	4801      	ldr	r0, [pc, #4]	; (800d450 <__sfp_lock_acquire+0x8>)
 800d44a:	f000 b8c5 	b.w	800d5d8 <__retarget_lock_acquire_recursive>
 800d44e:	bf00      	nop
 800d450:	20000b6d 	.word	0x20000b6d

0800d454 <__sfp_lock_release>:
 800d454:	4801      	ldr	r0, [pc, #4]	; (800d45c <__sfp_lock_release+0x8>)
 800d456:	f000 b8c0 	b.w	800d5da <__retarget_lock_release_recursive>
 800d45a:	bf00      	nop
 800d45c:	20000b6d 	.word	0x20000b6d

0800d460 <__sinit_lock_acquire>:
 800d460:	4801      	ldr	r0, [pc, #4]	; (800d468 <__sinit_lock_acquire+0x8>)
 800d462:	f000 b8b9 	b.w	800d5d8 <__retarget_lock_acquire_recursive>
 800d466:	bf00      	nop
 800d468:	20000b6e 	.word	0x20000b6e

0800d46c <__sinit_lock_release>:
 800d46c:	4801      	ldr	r0, [pc, #4]	; (800d474 <__sinit_lock_release+0x8>)
 800d46e:	f000 b8b4 	b.w	800d5da <__retarget_lock_release_recursive>
 800d472:	bf00      	nop
 800d474:	20000b6e 	.word	0x20000b6e

0800d478 <__sinit>:
 800d478:	b510      	push	{r4, lr}
 800d47a:	4604      	mov	r4, r0
 800d47c:	f7ff fff0 	bl	800d460 <__sinit_lock_acquire>
 800d480:	69a3      	ldr	r3, [r4, #24]
 800d482:	b11b      	cbz	r3, 800d48c <__sinit+0x14>
 800d484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d488:	f7ff bff0 	b.w	800d46c <__sinit_lock_release>
 800d48c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d490:	6523      	str	r3, [r4, #80]	; 0x50
 800d492:	4b13      	ldr	r3, [pc, #76]	; (800d4e0 <__sinit+0x68>)
 800d494:	4a13      	ldr	r2, [pc, #76]	; (800d4e4 <__sinit+0x6c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	62a2      	str	r2, [r4, #40]	; 0x28
 800d49a:	42a3      	cmp	r3, r4
 800d49c:	bf04      	itt	eq
 800d49e:	2301      	moveq	r3, #1
 800d4a0:	61a3      	streq	r3, [r4, #24]
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 f820 	bl	800d4e8 <__sfp>
 800d4a8:	6060      	str	r0, [r4, #4]
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 f81c 	bl	800d4e8 <__sfp>
 800d4b0:	60a0      	str	r0, [r4, #8]
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f000 f818 	bl	800d4e8 <__sfp>
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	60e0      	str	r0, [r4, #12]
 800d4bc:	2104      	movs	r1, #4
 800d4be:	6860      	ldr	r0, [r4, #4]
 800d4c0:	f7ff ff82 	bl	800d3c8 <std>
 800d4c4:	68a0      	ldr	r0, [r4, #8]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	2109      	movs	r1, #9
 800d4ca:	f7ff ff7d 	bl	800d3c8 <std>
 800d4ce:	68e0      	ldr	r0, [r4, #12]
 800d4d0:	2202      	movs	r2, #2
 800d4d2:	2112      	movs	r1, #18
 800d4d4:	f7ff ff78 	bl	800d3c8 <std>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	61a3      	str	r3, [r4, #24]
 800d4dc:	e7d2      	b.n	800d484 <__sinit+0xc>
 800d4de:	bf00      	nop
 800d4e0:	0800fc30 	.word	0x0800fc30
 800d4e4:	0800d411 	.word	0x0800d411

0800d4e8 <__sfp>:
 800d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ea:	4607      	mov	r7, r0
 800d4ec:	f7ff ffac 	bl	800d448 <__sfp_lock_acquire>
 800d4f0:	4b1e      	ldr	r3, [pc, #120]	; (800d56c <__sfp+0x84>)
 800d4f2:	681e      	ldr	r6, [r3, #0]
 800d4f4:	69b3      	ldr	r3, [r6, #24]
 800d4f6:	b913      	cbnz	r3, 800d4fe <__sfp+0x16>
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f7ff ffbd 	bl	800d478 <__sinit>
 800d4fe:	3648      	adds	r6, #72	; 0x48
 800d500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d504:	3b01      	subs	r3, #1
 800d506:	d503      	bpl.n	800d510 <__sfp+0x28>
 800d508:	6833      	ldr	r3, [r6, #0]
 800d50a:	b30b      	cbz	r3, 800d550 <__sfp+0x68>
 800d50c:	6836      	ldr	r6, [r6, #0]
 800d50e:	e7f7      	b.n	800d500 <__sfp+0x18>
 800d510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d514:	b9d5      	cbnz	r5, 800d54c <__sfp+0x64>
 800d516:	4b16      	ldr	r3, [pc, #88]	; (800d570 <__sfp+0x88>)
 800d518:	60e3      	str	r3, [r4, #12]
 800d51a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d51e:	6665      	str	r5, [r4, #100]	; 0x64
 800d520:	f000 f859 	bl	800d5d6 <__retarget_lock_init_recursive>
 800d524:	f7ff ff96 	bl	800d454 <__sfp_lock_release>
 800d528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d52c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d530:	6025      	str	r5, [r4, #0]
 800d532:	61a5      	str	r5, [r4, #24]
 800d534:	2208      	movs	r2, #8
 800d536:	4629      	mov	r1, r5
 800d538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d53c:	f7fb faf2 	bl	8008b24 <memset>
 800d540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d548:	4620      	mov	r0, r4
 800d54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d54c:	3468      	adds	r4, #104	; 0x68
 800d54e:	e7d9      	b.n	800d504 <__sfp+0x1c>
 800d550:	2104      	movs	r1, #4
 800d552:	4638      	mov	r0, r7
 800d554:	f7ff ff62 	bl	800d41c <__sfmoreglue>
 800d558:	4604      	mov	r4, r0
 800d55a:	6030      	str	r0, [r6, #0]
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d1d5      	bne.n	800d50c <__sfp+0x24>
 800d560:	f7ff ff78 	bl	800d454 <__sfp_lock_release>
 800d564:	230c      	movs	r3, #12
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	e7ee      	b.n	800d548 <__sfp+0x60>
 800d56a:	bf00      	nop
 800d56c:	0800fc30 	.word	0x0800fc30
 800d570:	ffff0001 	.word	0xffff0001

0800d574 <fiprintf>:
 800d574:	b40e      	push	{r1, r2, r3}
 800d576:	b503      	push	{r0, r1, lr}
 800d578:	4601      	mov	r1, r0
 800d57a:	ab03      	add	r3, sp, #12
 800d57c:	4805      	ldr	r0, [pc, #20]	; (800d594 <fiprintf+0x20>)
 800d57e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d582:	6800      	ldr	r0, [r0, #0]
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	f000 f881 	bl	800d68c <_vfiprintf_r>
 800d58a:	b002      	add	sp, #8
 800d58c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d590:	b003      	add	sp, #12
 800d592:	4770      	bx	lr
 800d594:	2000007c 	.word	0x2000007c

0800d598 <_fwalk_reent>:
 800d598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d59c:	4606      	mov	r6, r0
 800d59e:	4688      	mov	r8, r1
 800d5a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5a4:	2700      	movs	r7, #0
 800d5a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5aa:	f1b9 0901 	subs.w	r9, r9, #1
 800d5ae:	d505      	bpl.n	800d5bc <_fwalk_reent+0x24>
 800d5b0:	6824      	ldr	r4, [r4, #0]
 800d5b2:	2c00      	cmp	r4, #0
 800d5b4:	d1f7      	bne.n	800d5a6 <_fwalk_reent+0xe>
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5bc:	89ab      	ldrh	r3, [r5, #12]
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d907      	bls.n	800d5d2 <_fwalk_reent+0x3a>
 800d5c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	d003      	beq.n	800d5d2 <_fwalk_reent+0x3a>
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	47c0      	blx	r8
 800d5d0:	4307      	orrs	r7, r0
 800d5d2:	3568      	adds	r5, #104	; 0x68
 800d5d4:	e7e9      	b.n	800d5aa <_fwalk_reent+0x12>

0800d5d6 <__retarget_lock_init_recursive>:
 800d5d6:	4770      	bx	lr

0800d5d8 <__retarget_lock_acquire_recursive>:
 800d5d8:	4770      	bx	lr

0800d5da <__retarget_lock_release_recursive>:
 800d5da:	4770      	bx	lr

0800d5dc <_realloc_r>:
 800d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e0:	4680      	mov	r8, r0
 800d5e2:	4614      	mov	r4, r2
 800d5e4:	460e      	mov	r6, r1
 800d5e6:	b921      	cbnz	r1, 800d5f2 <_realloc_r+0x16>
 800d5e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ec:	4611      	mov	r1, r2
 800d5ee:	f7fb bb0d 	b.w	8008c0c <_malloc_r>
 800d5f2:	b92a      	cbnz	r2, 800d600 <_realloc_r+0x24>
 800d5f4:	f7fb fa9e 	bl	8008b34 <_free_r>
 800d5f8:	4625      	mov	r5, r4
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d600:	f000 faa0 	bl	800db44 <_malloc_usable_size_r>
 800d604:	4284      	cmp	r4, r0
 800d606:	4607      	mov	r7, r0
 800d608:	d802      	bhi.n	800d610 <_realloc_r+0x34>
 800d60a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d60e:	d812      	bhi.n	800d636 <_realloc_r+0x5a>
 800d610:	4621      	mov	r1, r4
 800d612:	4640      	mov	r0, r8
 800d614:	f7fb fafa 	bl	8008c0c <_malloc_r>
 800d618:	4605      	mov	r5, r0
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d0ed      	beq.n	800d5fa <_realloc_r+0x1e>
 800d61e:	42bc      	cmp	r4, r7
 800d620:	4622      	mov	r2, r4
 800d622:	4631      	mov	r1, r6
 800d624:	bf28      	it	cs
 800d626:	463a      	movcs	r2, r7
 800d628:	f7fb fa54 	bl	8008ad4 <memcpy>
 800d62c:	4631      	mov	r1, r6
 800d62e:	4640      	mov	r0, r8
 800d630:	f7fb fa80 	bl	8008b34 <_free_r>
 800d634:	e7e1      	b.n	800d5fa <_realloc_r+0x1e>
 800d636:	4635      	mov	r5, r6
 800d638:	e7df      	b.n	800d5fa <_realloc_r+0x1e>

0800d63a <__sfputc_r>:
 800d63a:	6893      	ldr	r3, [r2, #8]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	2b00      	cmp	r3, #0
 800d640:	b410      	push	{r4}
 800d642:	6093      	str	r3, [r2, #8]
 800d644:	da08      	bge.n	800d658 <__sfputc_r+0x1e>
 800d646:	6994      	ldr	r4, [r2, #24]
 800d648:	42a3      	cmp	r3, r4
 800d64a:	db01      	blt.n	800d650 <__sfputc_r+0x16>
 800d64c:	290a      	cmp	r1, #10
 800d64e:	d103      	bne.n	800d658 <__sfputc_r+0x1e>
 800d650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d654:	f000 b94a 	b.w	800d8ec <__swbuf_r>
 800d658:	6813      	ldr	r3, [r2, #0]
 800d65a:	1c58      	adds	r0, r3, #1
 800d65c:	6010      	str	r0, [r2, #0]
 800d65e:	7019      	strb	r1, [r3, #0]
 800d660:	4608      	mov	r0, r1
 800d662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <__sfputs_r>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	4606      	mov	r6, r0
 800d66c:	460f      	mov	r7, r1
 800d66e:	4614      	mov	r4, r2
 800d670:	18d5      	adds	r5, r2, r3
 800d672:	42ac      	cmp	r4, r5
 800d674:	d101      	bne.n	800d67a <__sfputs_r+0x12>
 800d676:	2000      	movs	r0, #0
 800d678:	e007      	b.n	800d68a <__sfputs_r+0x22>
 800d67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67e:	463a      	mov	r2, r7
 800d680:	4630      	mov	r0, r6
 800d682:	f7ff ffda 	bl	800d63a <__sfputc_r>
 800d686:	1c43      	adds	r3, r0, #1
 800d688:	d1f3      	bne.n	800d672 <__sfputs_r+0xa>
 800d68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d68c <_vfiprintf_r>:
 800d68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d690:	460d      	mov	r5, r1
 800d692:	b09d      	sub	sp, #116	; 0x74
 800d694:	4614      	mov	r4, r2
 800d696:	4698      	mov	r8, r3
 800d698:	4606      	mov	r6, r0
 800d69a:	b118      	cbz	r0, 800d6a4 <_vfiprintf_r+0x18>
 800d69c:	6983      	ldr	r3, [r0, #24]
 800d69e:	b90b      	cbnz	r3, 800d6a4 <_vfiprintf_r+0x18>
 800d6a0:	f7ff feea 	bl	800d478 <__sinit>
 800d6a4:	4b89      	ldr	r3, [pc, #548]	; (800d8cc <_vfiprintf_r+0x240>)
 800d6a6:	429d      	cmp	r5, r3
 800d6a8:	d11b      	bne.n	800d6e2 <_vfiprintf_r+0x56>
 800d6aa:	6875      	ldr	r5, [r6, #4]
 800d6ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6ae:	07d9      	lsls	r1, r3, #31
 800d6b0:	d405      	bmi.n	800d6be <_vfiprintf_r+0x32>
 800d6b2:	89ab      	ldrh	r3, [r5, #12]
 800d6b4:	059a      	lsls	r2, r3, #22
 800d6b6:	d402      	bmi.n	800d6be <_vfiprintf_r+0x32>
 800d6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ba:	f7ff ff8d 	bl	800d5d8 <__retarget_lock_acquire_recursive>
 800d6be:	89ab      	ldrh	r3, [r5, #12]
 800d6c0:	071b      	lsls	r3, r3, #28
 800d6c2:	d501      	bpl.n	800d6c8 <_vfiprintf_r+0x3c>
 800d6c4:	692b      	ldr	r3, [r5, #16]
 800d6c6:	b9eb      	cbnz	r3, 800d704 <_vfiprintf_r+0x78>
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f000 f960 	bl	800d990 <__swsetup_r>
 800d6d0:	b1c0      	cbz	r0, 800d704 <_vfiprintf_r+0x78>
 800d6d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6d4:	07dc      	lsls	r4, r3, #31
 800d6d6:	d50e      	bpl.n	800d6f6 <_vfiprintf_r+0x6a>
 800d6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6dc:	b01d      	add	sp, #116	; 0x74
 800d6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e2:	4b7b      	ldr	r3, [pc, #492]	; (800d8d0 <_vfiprintf_r+0x244>)
 800d6e4:	429d      	cmp	r5, r3
 800d6e6:	d101      	bne.n	800d6ec <_vfiprintf_r+0x60>
 800d6e8:	68b5      	ldr	r5, [r6, #8]
 800d6ea:	e7df      	b.n	800d6ac <_vfiprintf_r+0x20>
 800d6ec:	4b79      	ldr	r3, [pc, #484]	; (800d8d4 <_vfiprintf_r+0x248>)
 800d6ee:	429d      	cmp	r5, r3
 800d6f0:	bf08      	it	eq
 800d6f2:	68f5      	ldreq	r5, [r6, #12]
 800d6f4:	e7da      	b.n	800d6ac <_vfiprintf_r+0x20>
 800d6f6:	89ab      	ldrh	r3, [r5, #12]
 800d6f8:	0598      	lsls	r0, r3, #22
 800d6fa:	d4ed      	bmi.n	800d6d8 <_vfiprintf_r+0x4c>
 800d6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6fe:	f7ff ff6c 	bl	800d5da <__retarget_lock_release_recursive>
 800d702:	e7e9      	b.n	800d6d8 <_vfiprintf_r+0x4c>
 800d704:	2300      	movs	r3, #0
 800d706:	9309      	str	r3, [sp, #36]	; 0x24
 800d708:	2320      	movs	r3, #32
 800d70a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d70e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d712:	2330      	movs	r3, #48	; 0x30
 800d714:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d8d8 <_vfiprintf_r+0x24c>
 800d718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d71c:	f04f 0901 	mov.w	r9, #1
 800d720:	4623      	mov	r3, r4
 800d722:	469a      	mov	sl, r3
 800d724:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d728:	b10a      	cbz	r2, 800d72e <_vfiprintf_r+0xa2>
 800d72a:	2a25      	cmp	r2, #37	; 0x25
 800d72c:	d1f9      	bne.n	800d722 <_vfiprintf_r+0x96>
 800d72e:	ebba 0b04 	subs.w	fp, sl, r4
 800d732:	d00b      	beq.n	800d74c <_vfiprintf_r+0xc0>
 800d734:	465b      	mov	r3, fp
 800d736:	4622      	mov	r2, r4
 800d738:	4629      	mov	r1, r5
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7ff ff94 	bl	800d668 <__sfputs_r>
 800d740:	3001      	adds	r0, #1
 800d742:	f000 80aa 	beq.w	800d89a <_vfiprintf_r+0x20e>
 800d746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d748:	445a      	add	r2, fp
 800d74a:	9209      	str	r2, [sp, #36]	; 0x24
 800d74c:	f89a 3000 	ldrb.w	r3, [sl]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 80a2 	beq.w	800d89a <_vfiprintf_r+0x20e>
 800d756:	2300      	movs	r3, #0
 800d758:	f04f 32ff 	mov.w	r2, #4294967295
 800d75c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d760:	f10a 0a01 	add.w	sl, sl, #1
 800d764:	9304      	str	r3, [sp, #16]
 800d766:	9307      	str	r3, [sp, #28]
 800d768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d76c:	931a      	str	r3, [sp, #104]	; 0x68
 800d76e:	4654      	mov	r4, sl
 800d770:	2205      	movs	r2, #5
 800d772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d776:	4858      	ldr	r0, [pc, #352]	; (800d8d8 <_vfiprintf_r+0x24c>)
 800d778:	f7f2 fd3a 	bl	80001f0 <memchr>
 800d77c:	9a04      	ldr	r2, [sp, #16]
 800d77e:	b9d8      	cbnz	r0, 800d7b8 <_vfiprintf_r+0x12c>
 800d780:	06d1      	lsls	r1, r2, #27
 800d782:	bf44      	itt	mi
 800d784:	2320      	movmi	r3, #32
 800d786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d78a:	0713      	lsls	r3, r2, #28
 800d78c:	bf44      	itt	mi
 800d78e:	232b      	movmi	r3, #43	; 0x2b
 800d790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d794:	f89a 3000 	ldrb.w	r3, [sl]
 800d798:	2b2a      	cmp	r3, #42	; 0x2a
 800d79a:	d015      	beq.n	800d7c8 <_vfiprintf_r+0x13c>
 800d79c:	9a07      	ldr	r2, [sp, #28]
 800d79e:	4654      	mov	r4, sl
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	f04f 0c0a 	mov.w	ip, #10
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7ac:	3b30      	subs	r3, #48	; 0x30
 800d7ae:	2b09      	cmp	r3, #9
 800d7b0:	d94e      	bls.n	800d850 <_vfiprintf_r+0x1c4>
 800d7b2:	b1b0      	cbz	r0, 800d7e2 <_vfiprintf_r+0x156>
 800d7b4:	9207      	str	r2, [sp, #28]
 800d7b6:	e014      	b.n	800d7e2 <_vfiprintf_r+0x156>
 800d7b8:	eba0 0308 	sub.w	r3, r0, r8
 800d7bc:	fa09 f303 	lsl.w	r3, r9, r3
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	9304      	str	r3, [sp, #16]
 800d7c4:	46a2      	mov	sl, r4
 800d7c6:	e7d2      	b.n	800d76e <_vfiprintf_r+0xe2>
 800d7c8:	9b03      	ldr	r3, [sp, #12]
 800d7ca:	1d19      	adds	r1, r3, #4
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	9103      	str	r1, [sp, #12]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	bfbb      	ittet	lt
 800d7d4:	425b      	neglt	r3, r3
 800d7d6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7da:	9307      	strge	r3, [sp, #28]
 800d7dc:	9307      	strlt	r3, [sp, #28]
 800d7de:	bfb8      	it	lt
 800d7e0:	9204      	strlt	r2, [sp, #16]
 800d7e2:	7823      	ldrb	r3, [r4, #0]
 800d7e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d7e6:	d10c      	bne.n	800d802 <_vfiprintf_r+0x176>
 800d7e8:	7863      	ldrb	r3, [r4, #1]
 800d7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ec:	d135      	bne.n	800d85a <_vfiprintf_r+0x1ce>
 800d7ee:	9b03      	ldr	r3, [sp, #12]
 800d7f0:	1d1a      	adds	r2, r3, #4
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	9203      	str	r2, [sp, #12]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	bfb8      	it	lt
 800d7fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7fe:	3402      	adds	r4, #2
 800d800:	9305      	str	r3, [sp, #20]
 800d802:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8e8 <_vfiprintf_r+0x25c>
 800d806:	7821      	ldrb	r1, [r4, #0]
 800d808:	2203      	movs	r2, #3
 800d80a:	4650      	mov	r0, sl
 800d80c:	f7f2 fcf0 	bl	80001f0 <memchr>
 800d810:	b140      	cbz	r0, 800d824 <_vfiprintf_r+0x198>
 800d812:	2340      	movs	r3, #64	; 0x40
 800d814:	eba0 000a 	sub.w	r0, r0, sl
 800d818:	fa03 f000 	lsl.w	r0, r3, r0
 800d81c:	9b04      	ldr	r3, [sp, #16]
 800d81e:	4303      	orrs	r3, r0
 800d820:	3401      	adds	r4, #1
 800d822:	9304      	str	r3, [sp, #16]
 800d824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d828:	482c      	ldr	r0, [pc, #176]	; (800d8dc <_vfiprintf_r+0x250>)
 800d82a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d82e:	2206      	movs	r2, #6
 800d830:	f7f2 fcde 	bl	80001f0 <memchr>
 800d834:	2800      	cmp	r0, #0
 800d836:	d03f      	beq.n	800d8b8 <_vfiprintf_r+0x22c>
 800d838:	4b29      	ldr	r3, [pc, #164]	; (800d8e0 <_vfiprintf_r+0x254>)
 800d83a:	bb1b      	cbnz	r3, 800d884 <_vfiprintf_r+0x1f8>
 800d83c:	9b03      	ldr	r3, [sp, #12]
 800d83e:	3307      	adds	r3, #7
 800d840:	f023 0307 	bic.w	r3, r3, #7
 800d844:	3308      	adds	r3, #8
 800d846:	9303      	str	r3, [sp, #12]
 800d848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d84a:	443b      	add	r3, r7
 800d84c:	9309      	str	r3, [sp, #36]	; 0x24
 800d84e:	e767      	b.n	800d720 <_vfiprintf_r+0x94>
 800d850:	fb0c 3202 	mla	r2, ip, r2, r3
 800d854:	460c      	mov	r4, r1
 800d856:	2001      	movs	r0, #1
 800d858:	e7a5      	b.n	800d7a6 <_vfiprintf_r+0x11a>
 800d85a:	2300      	movs	r3, #0
 800d85c:	3401      	adds	r4, #1
 800d85e:	9305      	str	r3, [sp, #20]
 800d860:	4619      	mov	r1, r3
 800d862:	f04f 0c0a 	mov.w	ip, #10
 800d866:	4620      	mov	r0, r4
 800d868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d86c:	3a30      	subs	r2, #48	; 0x30
 800d86e:	2a09      	cmp	r2, #9
 800d870:	d903      	bls.n	800d87a <_vfiprintf_r+0x1ee>
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0c5      	beq.n	800d802 <_vfiprintf_r+0x176>
 800d876:	9105      	str	r1, [sp, #20]
 800d878:	e7c3      	b.n	800d802 <_vfiprintf_r+0x176>
 800d87a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d87e:	4604      	mov	r4, r0
 800d880:	2301      	movs	r3, #1
 800d882:	e7f0      	b.n	800d866 <_vfiprintf_r+0x1da>
 800d884:	ab03      	add	r3, sp, #12
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	462a      	mov	r2, r5
 800d88a:	4b16      	ldr	r3, [pc, #88]	; (800d8e4 <_vfiprintf_r+0x258>)
 800d88c:	a904      	add	r1, sp, #16
 800d88e:	4630      	mov	r0, r6
 800d890:	f7fb fad0 	bl	8008e34 <_printf_float>
 800d894:	4607      	mov	r7, r0
 800d896:	1c78      	adds	r0, r7, #1
 800d898:	d1d6      	bne.n	800d848 <_vfiprintf_r+0x1bc>
 800d89a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d89c:	07d9      	lsls	r1, r3, #31
 800d89e:	d405      	bmi.n	800d8ac <_vfiprintf_r+0x220>
 800d8a0:	89ab      	ldrh	r3, [r5, #12]
 800d8a2:	059a      	lsls	r2, r3, #22
 800d8a4:	d402      	bmi.n	800d8ac <_vfiprintf_r+0x220>
 800d8a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8a8:	f7ff fe97 	bl	800d5da <__retarget_lock_release_recursive>
 800d8ac:	89ab      	ldrh	r3, [r5, #12]
 800d8ae:	065b      	lsls	r3, r3, #25
 800d8b0:	f53f af12 	bmi.w	800d6d8 <_vfiprintf_r+0x4c>
 800d8b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8b6:	e711      	b.n	800d6dc <_vfiprintf_r+0x50>
 800d8b8:	ab03      	add	r3, sp, #12
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	462a      	mov	r2, r5
 800d8be:	4b09      	ldr	r3, [pc, #36]	; (800d8e4 <_vfiprintf_r+0x258>)
 800d8c0:	a904      	add	r1, sp, #16
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f7fb fd5a 	bl	800937c <_printf_i>
 800d8c8:	e7e4      	b.n	800d894 <_vfiprintf_r+0x208>
 800d8ca:	bf00      	nop
 800d8cc:	080100ac 	.word	0x080100ac
 800d8d0:	080100cc 	.word	0x080100cc
 800d8d4:	0801008c 	.word	0x0801008c
 800d8d8:	08010024 	.word	0x08010024
 800d8dc:	0801002e 	.word	0x0801002e
 800d8e0:	08008e35 	.word	0x08008e35
 800d8e4:	0800d669 	.word	0x0800d669
 800d8e8:	0801002a 	.word	0x0801002a

0800d8ec <__swbuf_r>:
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ee:	460e      	mov	r6, r1
 800d8f0:	4614      	mov	r4, r2
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	b118      	cbz	r0, 800d8fe <__swbuf_r+0x12>
 800d8f6:	6983      	ldr	r3, [r0, #24]
 800d8f8:	b90b      	cbnz	r3, 800d8fe <__swbuf_r+0x12>
 800d8fa:	f7ff fdbd 	bl	800d478 <__sinit>
 800d8fe:	4b21      	ldr	r3, [pc, #132]	; (800d984 <__swbuf_r+0x98>)
 800d900:	429c      	cmp	r4, r3
 800d902:	d12b      	bne.n	800d95c <__swbuf_r+0x70>
 800d904:	686c      	ldr	r4, [r5, #4]
 800d906:	69a3      	ldr	r3, [r4, #24]
 800d908:	60a3      	str	r3, [r4, #8]
 800d90a:	89a3      	ldrh	r3, [r4, #12]
 800d90c:	071a      	lsls	r2, r3, #28
 800d90e:	d52f      	bpl.n	800d970 <__swbuf_r+0x84>
 800d910:	6923      	ldr	r3, [r4, #16]
 800d912:	b36b      	cbz	r3, 800d970 <__swbuf_r+0x84>
 800d914:	6923      	ldr	r3, [r4, #16]
 800d916:	6820      	ldr	r0, [r4, #0]
 800d918:	1ac0      	subs	r0, r0, r3
 800d91a:	6963      	ldr	r3, [r4, #20]
 800d91c:	b2f6      	uxtb	r6, r6
 800d91e:	4283      	cmp	r3, r0
 800d920:	4637      	mov	r7, r6
 800d922:	dc04      	bgt.n	800d92e <__swbuf_r+0x42>
 800d924:	4621      	mov	r1, r4
 800d926:	4628      	mov	r0, r5
 800d928:	f7ff fd12 	bl	800d350 <_fflush_r>
 800d92c:	bb30      	cbnz	r0, 800d97c <__swbuf_r+0x90>
 800d92e:	68a3      	ldr	r3, [r4, #8]
 800d930:	3b01      	subs	r3, #1
 800d932:	60a3      	str	r3, [r4, #8]
 800d934:	6823      	ldr	r3, [r4, #0]
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	6022      	str	r2, [r4, #0]
 800d93a:	701e      	strb	r6, [r3, #0]
 800d93c:	6963      	ldr	r3, [r4, #20]
 800d93e:	3001      	adds	r0, #1
 800d940:	4283      	cmp	r3, r0
 800d942:	d004      	beq.n	800d94e <__swbuf_r+0x62>
 800d944:	89a3      	ldrh	r3, [r4, #12]
 800d946:	07db      	lsls	r3, r3, #31
 800d948:	d506      	bpl.n	800d958 <__swbuf_r+0x6c>
 800d94a:	2e0a      	cmp	r6, #10
 800d94c:	d104      	bne.n	800d958 <__swbuf_r+0x6c>
 800d94e:	4621      	mov	r1, r4
 800d950:	4628      	mov	r0, r5
 800d952:	f7ff fcfd 	bl	800d350 <_fflush_r>
 800d956:	b988      	cbnz	r0, 800d97c <__swbuf_r+0x90>
 800d958:	4638      	mov	r0, r7
 800d95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d95c:	4b0a      	ldr	r3, [pc, #40]	; (800d988 <__swbuf_r+0x9c>)
 800d95e:	429c      	cmp	r4, r3
 800d960:	d101      	bne.n	800d966 <__swbuf_r+0x7a>
 800d962:	68ac      	ldr	r4, [r5, #8]
 800d964:	e7cf      	b.n	800d906 <__swbuf_r+0x1a>
 800d966:	4b09      	ldr	r3, [pc, #36]	; (800d98c <__swbuf_r+0xa0>)
 800d968:	429c      	cmp	r4, r3
 800d96a:	bf08      	it	eq
 800d96c:	68ec      	ldreq	r4, [r5, #12]
 800d96e:	e7ca      	b.n	800d906 <__swbuf_r+0x1a>
 800d970:	4621      	mov	r1, r4
 800d972:	4628      	mov	r0, r5
 800d974:	f000 f80c 	bl	800d990 <__swsetup_r>
 800d978:	2800      	cmp	r0, #0
 800d97a:	d0cb      	beq.n	800d914 <__swbuf_r+0x28>
 800d97c:	f04f 37ff 	mov.w	r7, #4294967295
 800d980:	e7ea      	b.n	800d958 <__swbuf_r+0x6c>
 800d982:	bf00      	nop
 800d984:	080100ac 	.word	0x080100ac
 800d988:	080100cc 	.word	0x080100cc
 800d98c:	0801008c 	.word	0x0801008c

0800d990 <__swsetup_r>:
 800d990:	4b32      	ldr	r3, [pc, #200]	; (800da5c <__swsetup_r+0xcc>)
 800d992:	b570      	push	{r4, r5, r6, lr}
 800d994:	681d      	ldr	r5, [r3, #0]
 800d996:	4606      	mov	r6, r0
 800d998:	460c      	mov	r4, r1
 800d99a:	b125      	cbz	r5, 800d9a6 <__swsetup_r+0x16>
 800d99c:	69ab      	ldr	r3, [r5, #24]
 800d99e:	b913      	cbnz	r3, 800d9a6 <__swsetup_r+0x16>
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	f7ff fd69 	bl	800d478 <__sinit>
 800d9a6:	4b2e      	ldr	r3, [pc, #184]	; (800da60 <__swsetup_r+0xd0>)
 800d9a8:	429c      	cmp	r4, r3
 800d9aa:	d10f      	bne.n	800d9cc <__swsetup_r+0x3c>
 800d9ac:	686c      	ldr	r4, [r5, #4]
 800d9ae:	89a3      	ldrh	r3, [r4, #12]
 800d9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9b4:	0719      	lsls	r1, r3, #28
 800d9b6:	d42c      	bmi.n	800da12 <__swsetup_r+0x82>
 800d9b8:	06dd      	lsls	r5, r3, #27
 800d9ba:	d411      	bmi.n	800d9e0 <__swsetup_r+0x50>
 800d9bc:	2309      	movs	r3, #9
 800d9be:	6033      	str	r3, [r6, #0]
 800d9c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9c4:	81a3      	strh	r3, [r4, #12]
 800d9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ca:	e03e      	b.n	800da4a <__swsetup_r+0xba>
 800d9cc:	4b25      	ldr	r3, [pc, #148]	; (800da64 <__swsetup_r+0xd4>)
 800d9ce:	429c      	cmp	r4, r3
 800d9d0:	d101      	bne.n	800d9d6 <__swsetup_r+0x46>
 800d9d2:	68ac      	ldr	r4, [r5, #8]
 800d9d4:	e7eb      	b.n	800d9ae <__swsetup_r+0x1e>
 800d9d6:	4b24      	ldr	r3, [pc, #144]	; (800da68 <__swsetup_r+0xd8>)
 800d9d8:	429c      	cmp	r4, r3
 800d9da:	bf08      	it	eq
 800d9dc:	68ec      	ldreq	r4, [r5, #12]
 800d9de:	e7e6      	b.n	800d9ae <__swsetup_r+0x1e>
 800d9e0:	0758      	lsls	r0, r3, #29
 800d9e2:	d512      	bpl.n	800da0a <__swsetup_r+0x7a>
 800d9e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9e6:	b141      	cbz	r1, 800d9fa <__swsetup_r+0x6a>
 800d9e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9ec:	4299      	cmp	r1, r3
 800d9ee:	d002      	beq.n	800d9f6 <__swsetup_r+0x66>
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	f7fb f89f 	bl	8008b34 <_free_r>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	6363      	str	r3, [r4, #52]	; 0x34
 800d9fa:	89a3      	ldrh	r3, [r4, #12]
 800d9fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da00:	81a3      	strh	r3, [r4, #12]
 800da02:	2300      	movs	r3, #0
 800da04:	6063      	str	r3, [r4, #4]
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	f043 0308 	orr.w	r3, r3, #8
 800da10:	81a3      	strh	r3, [r4, #12]
 800da12:	6923      	ldr	r3, [r4, #16]
 800da14:	b94b      	cbnz	r3, 800da2a <__swsetup_r+0x9a>
 800da16:	89a3      	ldrh	r3, [r4, #12]
 800da18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da20:	d003      	beq.n	800da2a <__swsetup_r+0x9a>
 800da22:	4621      	mov	r1, r4
 800da24:	4630      	mov	r0, r6
 800da26:	f000 f84d 	bl	800dac4 <__smakebuf_r>
 800da2a:	89a0      	ldrh	r0, [r4, #12]
 800da2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da30:	f010 0301 	ands.w	r3, r0, #1
 800da34:	d00a      	beq.n	800da4c <__swsetup_r+0xbc>
 800da36:	2300      	movs	r3, #0
 800da38:	60a3      	str	r3, [r4, #8]
 800da3a:	6963      	ldr	r3, [r4, #20]
 800da3c:	425b      	negs	r3, r3
 800da3e:	61a3      	str	r3, [r4, #24]
 800da40:	6923      	ldr	r3, [r4, #16]
 800da42:	b943      	cbnz	r3, 800da56 <__swsetup_r+0xc6>
 800da44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da48:	d1ba      	bne.n	800d9c0 <__swsetup_r+0x30>
 800da4a:	bd70      	pop	{r4, r5, r6, pc}
 800da4c:	0781      	lsls	r1, r0, #30
 800da4e:	bf58      	it	pl
 800da50:	6963      	ldrpl	r3, [r4, #20]
 800da52:	60a3      	str	r3, [r4, #8]
 800da54:	e7f4      	b.n	800da40 <__swsetup_r+0xb0>
 800da56:	2000      	movs	r0, #0
 800da58:	e7f7      	b.n	800da4a <__swsetup_r+0xba>
 800da5a:	bf00      	nop
 800da5c:	2000007c 	.word	0x2000007c
 800da60:	080100ac 	.word	0x080100ac
 800da64:	080100cc 	.word	0x080100cc
 800da68:	0801008c 	.word	0x0801008c

0800da6c <abort>:
 800da6c:	b508      	push	{r3, lr}
 800da6e:	2006      	movs	r0, #6
 800da70:	f000 f898 	bl	800dba4 <raise>
 800da74:	2001      	movs	r0, #1
 800da76:	f7f5 fff1 	bl	8003a5c <_exit>

0800da7a <__swhatbuf_r>:
 800da7a:	b570      	push	{r4, r5, r6, lr}
 800da7c:	460e      	mov	r6, r1
 800da7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da82:	2900      	cmp	r1, #0
 800da84:	b096      	sub	sp, #88	; 0x58
 800da86:	4614      	mov	r4, r2
 800da88:	461d      	mov	r5, r3
 800da8a:	da08      	bge.n	800da9e <__swhatbuf_r+0x24>
 800da8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800da90:	2200      	movs	r2, #0
 800da92:	602a      	str	r2, [r5, #0]
 800da94:	061a      	lsls	r2, r3, #24
 800da96:	d410      	bmi.n	800daba <__swhatbuf_r+0x40>
 800da98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da9c:	e00e      	b.n	800dabc <__swhatbuf_r+0x42>
 800da9e:	466a      	mov	r2, sp
 800daa0:	f000 f89c 	bl	800dbdc <_fstat_r>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	dbf1      	blt.n	800da8c <__swhatbuf_r+0x12>
 800daa8:	9a01      	ldr	r2, [sp, #4]
 800daaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800daae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dab2:	425a      	negs	r2, r3
 800dab4:	415a      	adcs	r2, r3
 800dab6:	602a      	str	r2, [r5, #0]
 800dab8:	e7ee      	b.n	800da98 <__swhatbuf_r+0x1e>
 800daba:	2340      	movs	r3, #64	; 0x40
 800dabc:	2000      	movs	r0, #0
 800dabe:	6023      	str	r3, [r4, #0]
 800dac0:	b016      	add	sp, #88	; 0x58
 800dac2:	bd70      	pop	{r4, r5, r6, pc}

0800dac4 <__smakebuf_r>:
 800dac4:	898b      	ldrh	r3, [r1, #12]
 800dac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dac8:	079d      	lsls	r5, r3, #30
 800daca:	4606      	mov	r6, r0
 800dacc:	460c      	mov	r4, r1
 800dace:	d507      	bpl.n	800dae0 <__smakebuf_r+0x1c>
 800dad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	6123      	str	r3, [r4, #16]
 800dad8:	2301      	movs	r3, #1
 800dada:	6163      	str	r3, [r4, #20]
 800dadc:	b002      	add	sp, #8
 800dade:	bd70      	pop	{r4, r5, r6, pc}
 800dae0:	ab01      	add	r3, sp, #4
 800dae2:	466a      	mov	r2, sp
 800dae4:	f7ff ffc9 	bl	800da7a <__swhatbuf_r>
 800dae8:	9900      	ldr	r1, [sp, #0]
 800daea:	4605      	mov	r5, r0
 800daec:	4630      	mov	r0, r6
 800daee:	f7fb f88d 	bl	8008c0c <_malloc_r>
 800daf2:	b948      	cbnz	r0, 800db08 <__smakebuf_r+0x44>
 800daf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daf8:	059a      	lsls	r2, r3, #22
 800dafa:	d4ef      	bmi.n	800dadc <__smakebuf_r+0x18>
 800dafc:	f023 0303 	bic.w	r3, r3, #3
 800db00:	f043 0302 	orr.w	r3, r3, #2
 800db04:	81a3      	strh	r3, [r4, #12]
 800db06:	e7e3      	b.n	800dad0 <__smakebuf_r+0xc>
 800db08:	4b0d      	ldr	r3, [pc, #52]	; (800db40 <__smakebuf_r+0x7c>)
 800db0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	6020      	str	r0, [r4, #0]
 800db10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db14:	81a3      	strh	r3, [r4, #12]
 800db16:	9b00      	ldr	r3, [sp, #0]
 800db18:	6163      	str	r3, [r4, #20]
 800db1a:	9b01      	ldr	r3, [sp, #4]
 800db1c:	6120      	str	r0, [r4, #16]
 800db1e:	b15b      	cbz	r3, 800db38 <__smakebuf_r+0x74>
 800db20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db24:	4630      	mov	r0, r6
 800db26:	f000 f86b 	bl	800dc00 <_isatty_r>
 800db2a:	b128      	cbz	r0, 800db38 <__smakebuf_r+0x74>
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	f023 0303 	bic.w	r3, r3, #3
 800db32:	f043 0301 	orr.w	r3, r3, #1
 800db36:	81a3      	strh	r3, [r4, #12]
 800db38:	89a0      	ldrh	r0, [r4, #12]
 800db3a:	4305      	orrs	r5, r0
 800db3c:	81a5      	strh	r5, [r4, #12]
 800db3e:	e7cd      	b.n	800dadc <__smakebuf_r+0x18>
 800db40:	0800d411 	.word	0x0800d411

0800db44 <_malloc_usable_size_r>:
 800db44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db48:	1f18      	subs	r0, r3, #4
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	bfbc      	itt	lt
 800db4e:	580b      	ldrlt	r3, [r1, r0]
 800db50:	18c0      	addlt	r0, r0, r3
 800db52:	4770      	bx	lr

0800db54 <_raise_r>:
 800db54:	291f      	cmp	r1, #31
 800db56:	b538      	push	{r3, r4, r5, lr}
 800db58:	4604      	mov	r4, r0
 800db5a:	460d      	mov	r5, r1
 800db5c:	d904      	bls.n	800db68 <_raise_r+0x14>
 800db5e:	2316      	movs	r3, #22
 800db60:	6003      	str	r3, [r0, #0]
 800db62:	f04f 30ff 	mov.w	r0, #4294967295
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db6a:	b112      	cbz	r2, 800db72 <_raise_r+0x1e>
 800db6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db70:	b94b      	cbnz	r3, 800db86 <_raise_r+0x32>
 800db72:	4620      	mov	r0, r4
 800db74:	f000 f830 	bl	800dbd8 <_getpid_r>
 800db78:	462a      	mov	r2, r5
 800db7a:	4601      	mov	r1, r0
 800db7c:	4620      	mov	r0, r4
 800db7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db82:	f000 b817 	b.w	800dbb4 <_kill_r>
 800db86:	2b01      	cmp	r3, #1
 800db88:	d00a      	beq.n	800dba0 <_raise_r+0x4c>
 800db8a:	1c59      	adds	r1, r3, #1
 800db8c:	d103      	bne.n	800db96 <_raise_r+0x42>
 800db8e:	2316      	movs	r3, #22
 800db90:	6003      	str	r3, [r0, #0]
 800db92:	2001      	movs	r0, #1
 800db94:	e7e7      	b.n	800db66 <_raise_r+0x12>
 800db96:	2400      	movs	r4, #0
 800db98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db9c:	4628      	mov	r0, r5
 800db9e:	4798      	blx	r3
 800dba0:	2000      	movs	r0, #0
 800dba2:	e7e0      	b.n	800db66 <_raise_r+0x12>

0800dba4 <raise>:
 800dba4:	4b02      	ldr	r3, [pc, #8]	; (800dbb0 <raise+0xc>)
 800dba6:	4601      	mov	r1, r0
 800dba8:	6818      	ldr	r0, [r3, #0]
 800dbaa:	f7ff bfd3 	b.w	800db54 <_raise_r>
 800dbae:	bf00      	nop
 800dbb0:	2000007c 	.word	0x2000007c

0800dbb4 <_kill_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	4d07      	ldr	r5, [pc, #28]	; (800dbd4 <_kill_r+0x20>)
 800dbb8:	2300      	movs	r3, #0
 800dbba:	4604      	mov	r4, r0
 800dbbc:	4608      	mov	r0, r1
 800dbbe:	4611      	mov	r1, r2
 800dbc0:	602b      	str	r3, [r5, #0]
 800dbc2:	f7f5 ff3b 	bl	8003a3c <_kill>
 800dbc6:	1c43      	adds	r3, r0, #1
 800dbc8:	d102      	bne.n	800dbd0 <_kill_r+0x1c>
 800dbca:	682b      	ldr	r3, [r5, #0]
 800dbcc:	b103      	cbz	r3, 800dbd0 <_kill_r+0x1c>
 800dbce:	6023      	str	r3, [r4, #0]
 800dbd0:	bd38      	pop	{r3, r4, r5, pc}
 800dbd2:	bf00      	nop
 800dbd4:	20000b68 	.word	0x20000b68

0800dbd8 <_getpid_r>:
 800dbd8:	f7f5 bf28 	b.w	8003a2c <_getpid>

0800dbdc <_fstat_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d07      	ldr	r5, [pc, #28]	; (800dbfc <_fstat_r+0x20>)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	602b      	str	r3, [r5, #0]
 800dbea:	f7f5 ff86 	bl	8003afa <_fstat>
 800dbee:	1c43      	adds	r3, r0, #1
 800dbf0:	d102      	bne.n	800dbf8 <_fstat_r+0x1c>
 800dbf2:	682b      	ldr	r3, [r5, #0]
 800dbf4:	b103      	cbz	r3, 800dbf8 <_fstat_r+0x1c>
 800dbf6:	6023      	str	r3, [r4, #0]
 800dbf8:	bd38      	pop	{r3, r4, r5, pc}
 800dbfa:	bf00      	nop
 800dbfc:	20000b68 	.word	0x20000b68

0800dc00 <_isatty_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4d06      	ldr	r5, [pc, #24]	; (800dc1c <_isatty_r+0x1c>)
 800dc04:	2300      	movs	r3, #0
 800dc06:	4604      	mov	r4, r0
 800dc08:	4608      	mov	r0, r1
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	f7f5 ff85 	bl	8003b1a <_isatty>
 800dc10:	1c43      	adds	r3, r0, #1
 800dc12:	d102      	bne.n	800dc1a <_isatty_r+0x1a>
 800dc14:	682b      	ldr	r3, [r5, #0]
 800dc16:	b103      	cbz	r3, 800dc1a <_isatty_r+0x1a>
 800dc18:	6023      	str	r3, [r4, #0]
 800dc1a:	bd38      	pop	{r3, r4, r5, pc}
 800dc1c:	20000b68 	.word	0x20000b68

0800dc20 <pow>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	ed2d 8b02 	vpush	{d8}
 800dc26:	eeb0 8a40 	vmov.f32	s16, s0
 800dc2a:	eef0 8a60 	vmov.f32	s17, s1
 800dc2e:	ec55 4b11 	vmov	r4, r5, d1
 800dc32:	f000 f865 	bl	800dd00 <__ieee754_pow>
 800dc36:	4622      	mov	r2, r4
 800dc38:	462b      	mov	r3, r5
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	ec57 6b10 	vmov	r6, r7, d0
 800dc42:	f7f2 ff7b 	bl	8000b3c <__aeabi_dcmpun>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d13b      	bne.n	800dcc2 <pow+0xa2>
 800dc4a:	ec51 0b18 	vmov	r0, r1, d8
 800dc4e:	2200      	movs	r2, #0
 800dc50:	2300      	movs	r3, #0
 800dc52:	f7f2 ff41 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc56:	b1b8      	cbz	r0, 800dc88 <pow+0x68>
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	4629      	mov	r1, r5
 800dc60:	f7f2 ff3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d146      	bne.n	800dcf6 <pow+0xd6>
 800dc68:	ec45 4b10 	vmov	d0, r4, r5
 800dc6c:	f000 fe61 	bl	800e932 <finite>
 800dc70:	b338      	cbz	r0, 800dcc2 <pow+0xa2>
 800dc72:	2200      	movs	r2, #0
 800dc74:	2300      	movs	r3, #0
 800dc76:	4620      	mov	r0, r4
 800dc78:	4629      	mov	r1, r5
 800dc7a:	f7f2 ff37 	bl	8000aec <__aeabi_dcmplt>
 800dc7e:	b300      	cbz	r0, 800dcc2 <pow+0xa2>
 800dc80:	f7fa feee 	bl	8008a60 <__errno>
 800dc84:	2322      	movs	r3, #34	; 0x22
 800dc86:	e01b      	b.n	800dcc0 <pow+0xa0>
 800dc88:	ec47 6b10 	vmov	d0, r6, r7
 800dc8c:	f000 fe51 	bl	800e932 <finite>
 800dc90:	b9e0      	cbnz	r0, 800dccc <pow+0xac>
 800dc92:	eeb0 0a48 	vmov.f32	s0, s16
 800dc96:	eef0 0a68 	vmov.f32	s1, s17
 800dc9a:	f000 fe4a 	bl	800e932 <finite>
 800dc9e:	b1a8      	cbz	r0, 800dccc <pow+0xac>
 800dca0:	ec45 4b10 	vmov	d0, r4, r5
 800dca4:	f000 fe45 	bl	800e932 <finite>
 800dca8:	b180      	cbz	r0, 800dccc <pow+0xac>
 800dcaa:	4632      	mov	r2, r6
 800dcac:	463b      	mov	r3, r7
 800dcae:	4630      	mov	r0, r6
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	f7f2 ff43 	bl	8000b3c <__aeabi_dcmpun>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	d0e2      	beq.n	800dc80 <pow+0x60>
 800dcba:	f7fa fed1 	bl	8008a60 <__errno>
 800dcbe:	2321      	movs	r3, #33	; 0x21
 800dcc0:	6003      	str	r3, [r0, #0]
 800dcc2:	ecbd 8b02 	vpop	{d8}
 800dcc6:	ec47 6b10 	vmov	d0, r6, r7
 800dcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dccc:	2200      	movs	r2, #0
 800dcce:	2300      	movs	r3, #0
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	4639      	mov	r1, r7
 800dcd4:	f7f2 ff00 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d0f2      	beq.n	800dcc2 <pow+0xa2>
 800dcdc:	eeb0 0a48 	vmov.f32	s0, s16
 800dce0:	eef0 0a68 	vmov.f32	s1, s17
 800dce4:	f000 fe25 	bl	800e932 <finite>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d0ea      	beq.n	800dcc2 <pow+0xa2>
 800dcec:	ec45 4b10 	vmov	d0, r4, r5
 800dcf0:	f000 fe1f 	bl	800e932 <finite>
 800dcf4:	e7c3      	b.n	800dc7e <pow+0x5e>
 800dcf6:	4f01      	ldr	r7, [pc, #4]	; (800dcfc <pow+0xdc>)
 800dcf8:	2600      	movs	r6, #0
 800dcfa:	e7e2      	b.n	800dcc2 <pow+0xa2>
 800dcfc:	3ff00000 	.word	0x3ff00000

0800dd00 <__ieee754_pow>:
 800dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	ed2d 8b06 	vpush	{d8-d10}
 800dd08:	b089      	sub	sp, #36	; 0x24
 800dd0a:	ed8d 1b00 	vstr	d1, [sp]
 800dd0e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800dd12:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800dd16:	ea58 0102 	orrs.w	r1, r8, r2
 800dd1a:	ec57 6b10 	vmov	r6, r7, d0
 800dd1e:	d115      	bne.n	800dd4c <__ieee754_pow+0x4c>
 800dd20:	19b3      	adds	r3, r6, r6
 800dd22:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800dd26:	4152      	adcs	r2, r2
 800dd28:	4299      	cmp	r1, r3
 800dd2a:	4b89      	ldr	r3, [pc, #548]	; (800df50 <__ieee754_pow+0x250>)
 800dd2c:	4193      	sbcs	r3, r2
 800dd2e:	f080 84d2 	bcs.w	800e6d6 <__ieee754_pow+0x9d6>
 800dd32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd36:	4630      	mov	r0, r6
 800dd38:	4639      	mov	r1, r7
 800dd3a:	f7f2 faaf 	bl	800029c <__adddf3>
 800dd3e:	ec41 0b10 	vmov	d0, r0, r1
 800dd42:	b009      	add	sp, #36	; 0x24
 800dd44:	ecbd 8b06 	vpop	{d8-d10}
 800dd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4c:	4b81      	ldr	r3, [pc, #516]	; (800df54 <__ieee754_pow+0x254>)
 800dd4e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800dd52:	429c      	cmp	r4, r3
 800dd54:	ee10 aa10 	vmov	sl, s0
 800dd58:	463d      	mov	r5, r7
 800dd5a:	dc06      	bgt.n	800dd6a <__ieee754_pow+0x6a>
 800dd5c:	d101      	bne.n	800dd62 <__ieee754_pow+0x62>
 800dd5e:	2e00      	cmp	r6, #0
 800dd60:	d1e7      	bne.n	800dd32 <__ieee754_pow+0x32>
 800dd62:	4598      	cmp	r8, r3
 800dd64:	dc01      	bgt.n	800dd6a <__ieee754_pow+0x6a>
 800dd66:	d10f      	bne.n	800dd88 <__ieee754_pow+0x88>
 800dd68:	b172      	cbz	r2, 800dd88 <__ieee754_pow+0x88>
 800dd6a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800dd6e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800dd72:	ea55 050a 	orrs.w	r5, r5, sl
 800dd76:	d1dc      	bne.n	800dd32 <__ieee754_pow+0x32>
 800dd78:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dd7c:	18db      	adds	r3, r3, r3
 800dd7e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dd82:	4152      	adcs	r2, r2
 800dd84:	429d      	cmp	r5, r3
 800dd86:	e7d0      	b.n	800dd2a <__ieee754_pow+0x2a>
 800dd88:	2d00      	cmp	r5, #0
 800dd8a:	da3b      	bge.n	800de04 <__ieee754_pow+0x104>
 800dd8c:	4b72      	ldr	r3, [pc, #456]	; (800df58 <__ieee754_pow+0x258>)
 800dd8e:	4598      	cmp	r8, r3
 800dd90:	dc51      	bgt.n	800de36 <__ieee754_pow+0x136>
 800dd92:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dd96:	4598      	cmp	r8, r3
 800dd98:	f340 84ac 	ble.w	800e6f4 <__ieee754_pow+0x9f4>
 800dd9c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dda0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dda4:	2b14      	cmp	r3, #20
 800dda6:	dd0f      	ble.n	800ddc8 <__ieee754_pow+0xc8>
 800dda8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ddac:	fa22 f103 	lsr.w	r1, r2, r3
 800ddb0:	fa01 f303 	lsl.w	r3, r1, r3
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	f040 849d 	bne.w	800e6f4 <__ieee754_pow+0x9f4>
 800ddba:	f001 0101 	and.w	r1, r1, #1
 800ddbe:	f1c1 0302 	rsb	r3, r1, #2
 800ddc2:	9304      	str	r3, [sp, #16]
 800ddc4:	b182      	cbz	r2, 800dde8 <__ieee754_pow+0xe8>
 800ddc6:	e05f      	b.n	800de88 <__ieee754_pow+0x188>
 800ddc8:	2a00      	cmp	r2, #0
 800ddca:	d15b      	bne.n	800de84 <__ieee754_pow+0x184>
 800ddcc:	f1c3 0314 	rsb	r3, r3, #20
 800ddd0:	fa48 f103 	asr.w	r1, r8, r3
 800ddd4:	fa01 f303 	lsl.w	r3, r1, r3
 800ddd8:	4543      	cmp	r3, r8
 800ddda:	f040 8488 	bne.w	800e6ee <__ieee754_pow+0x9ee>
 800ddde:	f001 0101 	and.w	r1, r1, #1
 800dde2:	f1c1 0302 	rsb	r3, r1, #2
 800dde6:	9304      	str	r3, [sp, #16]
 800dde8:	4b5c      	ldr	r3, [pc, #368]	; (800df5c <__ieee754_pow+0x25c>)
 800ddea:	4598      	cmp	r8, r3
 800ddec:	d132      	bne.n	800de54 <__ieee754_pow+0x154>
 800ddee:	f1b9 0f00 	cmp.w	r9, #0
 800ddf2:	f280 8478 	bge.w	800e6e6 <__ieee754_pow+0x9e6>
 800ddf6:	4959      	ldr	r1, [pc, #356]	; (800df5c <__ieee754_pow+0x25c>)
 800ddf8:	4632      	mov	r2, r6
 800ddfa:	463b      	mov	r3, r7
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	f7f2 fd2d 	bl	800085c <__aeabi_ddiv>
 800de02:	e79c      	b.n	800dd3e <__ieee754_pow+0x3e>
 800de04:	2300      	movs	r3, #0
 800de06:	9304      	str	r3, [sp, #16]
 800de08:	2a00      	cmp	r2, #0
 800de0a:	d13d      	bne.n	800de88 <__ieee754_pow+0x188>
 800de0c:	4b51      	ldr	r3, [pc, #324]	; (800df54 <__ieee754_pow+0x254>)
 800de0e:	4598      	cmp	r8, r3
 800de10:	d1ea      	bne.n	800dde8 <__ieee754_pow+0xe8>
 800de12:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800de16:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800de1a:	ea53 030a 	orrs.w	r3, r3, sl
 800de1e:	f000 845a 	beq.w	800e6d6 <__ieee754_pow+0x9d6>
 800de22:	4b4f      	ldr	r3, [pc, #316]	; (800df60 <__ieee754_pow+0x260>)
 800de24:	429c      	cmp	r4, r3
 800de26:	dd08      	ble.n	800de3a <__ieee754_pow+0x13a>
 800de28:	f1b9 0f00 	cmp.w	r9, #0
 800de2c:	f2c0 8457 	blt.w	800e6de <__ieee754_pow+0x9de>
 800de30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de34:	e783      	b.n	800dd3e <__ieee754_pow+0x3e>
 800de36:	2302      	movs	r3, #2
 800de38:	e7e5      	b.n	800de06 <__ieee754_pow+0x106>
 800de3a:	f1b9 0f00 	cmp.w	r9, #0
 800de3e:	f04f 0000 	mov.w	r0, #0
 800de42:	f04f 0100 	mov.w	r1, #0
 800de46:	f6bf af7a 	bge.w	800dd3e <__ieee754_pow+0x3e>
 800de4a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800de4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800de52:	e774      	b.n	800dd3e <__ieee754_pow+0x3e>
 800de54:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800de58:	d106      	bne.n	800de68 <__ieee754_pow+0x168>
 800de5a:	4632      	mov	r2, r6
 800de5c:	463b      	mov	r3, r7
 800de5e:	4630      	mov	r0, r6
 800de60:	4639      	mov	r1, r7
 800de62:	f7f2 fbd1 	bl	8000608 <__aeabi_dmul>
 800de66:	e76a      	b.n	800dd3e <__ieee754_pow+0x3e>
 800de68:	4b3e      	ldr	r3, [pc, #248]	; (800df64 <__ieee754_pow+0x264>)
 800de6a:	4599      	cmp	r9, r3
 800de6c:	d10c      	bne.n	800de88 <__ieee754_pow+0x188>
 800de6e:	2d00      	cmp	r5, #0
 800de70:	db0a      	blt.n	800de88 <__ieee754_pow+0x188>
 800de72:	ec47 6b10 	vmov	d0, r6, r7
 800de76:	b009      	add	sp, #36	; 0x24
 800de78:	ecbd 8b06 	vpop	{d8-d10}
 800de7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de80:	f000 bc6c 	b.w	800e75c <__ieee754_sqrt>
 800de84:	2300      	movs	r3, #0
 800de86:	9304      	str	r3, [sp, #16]
 800de88:	ec47 6b10 	vmov	d0, r6, r7
 800de8c:	f000 fd48 	bl	800e920 <fabs>
 800de90:	ec51 0b10 	vmov	r0, r1, d0
 800de94:	f1ba 0f00 	cmp.w	sl, #0
 800de98:	d129      	bne.n	800deee <__ieee754_pow+0x1ee>
 800de9a:	b124      	cbz	r4, 800dea6 <__ieee754_pow+0x1a6>
 800de9c:	4b2f      	ldr	r3, [pc, #188]	; (800df5c <__ieee754_pow+0x25c>)
 800de9e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d123      	bne.n	800deee <__ieee754_pow+0x1ee>
 800dea6:	f1b9 0f00 	cmp.w	r9, #0
 800deaa:	da05      	bge.n	800deb8 <__ieee754_pow+0x1b8>
 800deac:	4602      	mov	r2, r0
 800deae:	460b      	mov	r3, r1
 800deb0:	2000      	movs	r0, #0
 800deb2:	492a      	ldr	r1, [pc, #168]	; (800df5c <__ieee754_pow+0x25c>)
 800deb4:	f7f2 fcd2 	bl	800085c <__aeabi_ddiv>
 800deb8:	2d00      	cmp	r5, #0
 800deba:	f6bf af40 	bge.w	800dd3e <__ieee754_pow+0x3e>
 800debe:	9b04      	ldr	r3, [sp, #16]
 800dec0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dec4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dec8:	4323      	orrs	r3, r4
 800deca:	d108      	bne.n	800dede <__ieee754_pow+0x1de>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	4610      	mov	r0, r2
 800ded2:	4619      	mov	r1, r3
 800ded4:	f7f2 f9e0 	bl	8000298 <__aeabi_dsub>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	e78f      	b.n	800ddfe <__ieee754_pow+0xfe>
 800dede:	9b04      	ldr	r3, [sp, #16]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	f47f af2c 	bne.w	800dd3e <__ieee754_pow+0x3e>
 800dee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800deea:	4619      	mov	r1, r3
 800deec:	e727      	b.n	800dd3e <__ieee754_pow+0x3e>
 800deee:	0feb      	lsrs	r3, r5, #31
 800def0:	3b01      	subs	r3, #1
 800def2:	9306      	str	r3, [sp, #24]
 800def4:	9a06      	ldr	r2, [sp, #24]
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	4313      	orrs	r3, r2
 800defa:	d102      	bne.n	800df02 <__ieee754_pow+0x202>
 800defc:	4632      	mov	r2, r6
 800defe:	463b      	mov	r3, r7
 800df00:	e7e6      	b.n	800ded0 <__ieee754_pow+0x1d0>
 800df02:	4b19      	ldr	r3, [pc, #100]	; (800df68 <__ieee754_pow+0x268>)
 800df04:	4598      	cmp	r8, r3
 800df06:	f340 80fb 	ble.w	800e100 <__ieee754_pow+0x400>
 800df0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800df0e:	4598      	cmp	r8, r3
 800df10:	4b13      	ldr	r3, [pc, #76]	; (800df60 <__ieee754_pow+0x260>)
 800df12:	dd0c      	ble.n	800df2e <__ieee754_pow+0x22e>
 800df14:	429c      	cmp	r4, r3
 800df16:	dc0f      	bgt.n	800df38 <__ieee754_pow+0x238>
 800df18:	f1b9 0f00 	cmp.w	r9, #0
 800df1c:	da0f      	bge.n	800df3e <__ieee754_pow+0x23e>
 800df1e:	2000      	movs	r0, #0
 800df20:	b009      	add	sp, #36	; 0x24
 800df22:	ecbd 8b06 	vpop	{d8-d10}
 800df26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2a:	f000 bcf0 	b.w	800e90e <__math_oflow>
 800df2e:	429c      	cmp	r4, r3
 800df30:	dbf2      	blt.n	800df18 <__ieee754_pow+0x218>
 800df32:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <__ieee754_pow+0x25c>)
 800df34:	429c      	cmp	r4, r3
 800df36:	dd19      	ble.n	800df6c <__ieee754_pow+0x26c>
 800df38:	f1b9 0f00 	cmp.w	r9, #0
 800df3c:	dcef      	bgt.n	800df1e <__ieee754_pow+0x21e>
 800df3e:	2000      	movs	r0, #0
 800df40:	b009      	add	sp, #36	; 0x24
 800df42:	ecbd 8b06 	vpop	{d8-d10}
 800df46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4a:	f000 bcd7 	b.w	800e8fc <__math_uflow>
 800df4e:	bf00      	nop
 800df50:	fff00000 	.word	0xfff00000
 800df54:	7ff00000 	.word	0x7ff00000
 800df58:	433fffff 	.word	0x433fffff
 800df5c:	3ff00000 	.word	0x3ff00000
 800df60:	3fefffff 	.word	0x3fefffff
 800df64:	3fe00000 	.word	0x3fe00000
 800df68:	41e00000 	.word	0x41e00000
 800df6c:	4b60      	ldr	r3, [pc, #384]	; (800e0f0 <__ieee754_pow+0x3f0>)
 800df6e:	2200      	movs	r2, #0
 800df70:	f7f2 f992 	bl	8000298 <__aeabi_dsub>
 800df74:	a354      	add	r3, pc, #336	; (adr r3, 800e0c8 <__ieee754_pow+0x3c8>)
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	4604      	mov	r4, r0
 800df7c:	460d      	mov	r5, r1
 800df7e:	f7f2 fb43 	bl	8000608 <__aeabi_dmul>
 800df82:	a353      	add	r3, pc, #332	; (adr r3, 800e0d0 <__ieee754_pow+0x3d0>)
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	4606      	mov	r6, r0
 800df8a:	460f      	mov	r7, r1
 800df8c:	4620      	mov	r0, r4
 800df8e:	4629      	mov	r1, r5
 800df90:	f7f2 fb3a 	bl	8000608 <__aeabi_dmul>
 800df94:	4b57      	ldr	r3, [pc, #348]	; (800e0f4 <__ieee754_pow+0x3f4>)
 800df96:	4682      	mov	sl, r0
 800df98:	468b      	mov	fp, r1
 800df9a:	2200      	movs	r2, #0
 800df9c:	4620      	mov	r0, r4
 800df9e:	4629      	mov	r1, r5
 800dfa0:	f7f2 fb32 	bl	8000608 <__aeabi_dmul>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	a14b      	add	r1, pc, #300	; (adr r1, 800e0d8 <__ieee754_pow+0x3d8>)
 800dfaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfae:	f7f2 f973 	bl	8000298 <__aeabi_dsub>
 800dfb2:	4622      	mov	r2, r4
 800dfb4:	462b      	mov	r3, r5
 800dfb6:	f7f2 fb27 	bl	8000608 <__aeabi_dmul>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	494d      	ldr	r1, [pc, #308]	; (800e0f8 <__ieee754_pow+0x3f8>)
 800dfc2:	f7f2 f969 	bl	8000298 <__aeabi_dsub>
 800dfc6:	4622      	mov	r2, r4
 800dfc8:	4680      	mov	r8, r0
 800dfca:	4689      	mov	r9, r1
 800dfcc:	462b      	mov	r3, r5
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	f7f2 fb19 	bl	8000608 <__aeabi_dmul>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	460b      	mov	r3, r1
 800dfda:	4640      	mov	r0, r8
 800dfdc:	4649      	mov	r1, r9
 800dfde:	f7f2 fb13 	bl	8000608 <__aeabi_dmul>
 800dfe2:	a33f      	add	r3, pc, #252	; (adr r3, 800e0e0 <__ieee754_pow+0x3e0>)
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f7f2 fb0e 	bl	8000608 <__aeabi_dmul>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	4650      	mov	r0, sl
 800dff2:	4659      	mov	r1, fp
 800dff4:	f7f2 f950 	bl	8000298 <__aeabi_dsub>
 800dff8:	4602      	mov	r2, r0
 800dffa:	460b      	mov	r3, r1
 800dffc:	4680      	mov	r8, r0
 800dffe:	4689      	mov	r9, r1
 800e000:	4630      	mov	r0, r6
 800e002:	4639      	mov	r1, r7
 800e004:	f7f2 f94a 	bl	800029c <__adddf3>
 800e008:	2000      	movs	r0, #0
 800e00a:	4632      	mov	r2, r6
 800e00c:	463b      	mov	r3, r7
 800e00e:	4604      	mov	r4, r0
 800e010:	460d      	mov	r5, r1
 800e012:	f7f2 f941 	bl	8000298 <__aeabi_dsub>
 800e016:	4602      	mov	r2, r0
 800e018:	460b      	mov	r3, r1
 800e01a:	4640      	mov	r0, r8
 800e01c:	4649      	mov	r1, r9
 800e01e:	f7f2 f93b 	bl	8000298 <__aeabi_dsub>
 800e022:	9b04      	ldr	r3, [sp, #16]
 800e024:	9a06      	ldr	r2, [sp, #24]
 800e026:	3b01      	subs	r3, #1
 800e028:	4313      	orrs	r3, r2
 800e02a:	4682      	mov	sl, r0
 800e02c:	468b      	mov	fp, r1
 800e02e:	f040 81e7 	bne.w	800e400 <__ieee754_pow+0x700>
 800e032:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e0e8 <__ieee754_pow+0x3e8>
 800e036:	eeb0 8a47 	vmov.f32	s16, s14
 800e03a:	eef0 8a67 	vmov.f32	s17, s15
 800e03e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e042:	2600      	movs	r6, #0
 800e044:	4632      	mov	r2, r6
 800e046:	463b      	mov	r3, r7
 800e048:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e04c:	f7f2 f924 	bl	8000298 <__aeabi_dsub>
 800e050:	4622      	mov	r2, r4
 800e052:	462b      	mov	r3, r5
 800e054:	f7f2 fad8 	bl	8000608 <__aeabi_dmul>
 800e058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e05c:	4680      	mov	r8, r0
 800e05e:	4689      	mov	r9, r1
 800e060:	4650      	mov	r0, sl
 800e062:	4659      	mov	r1, fp
 800e064:	f7f2 fad0 	bl	8000608 <__aeabi_dmul>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4640      	mov	r0, r8
 800e06e:	4649      	mov	r1, r9
 800e070:	f7f2 f914 	bl	800029c <__adddf3>
 800e074:	4632      	mov	r2, r6
 800e076:	463b      	mov	r3, r7
 800e078:	4680      	mov	r8, r0
 800e07a:	4689      	mov	r9, r1
 800e07c:	4620      	mov	r0, r4
 800e07e:	4629      	mov	r1, r5
 800e080:	f7f2 fac2 	bl	8000608 <__aeabi_dmul>
 800e084:	460b      	mov	r3, r1
 800e086:	4604      	mov	r4, r0
 800e088:	460d      	mov	r5, r1
 800e08a:	4602      	mov	r2, r0
 800e08c:	4649      	mov	r1, r9
 800e08e:	4640      	mov	r0, r8
 800e090:	f7f2 f904 	bl	800029c <__adddf3>
 800e094:	4b19      	ldr	r3, [pc, #100]	; (800e0fc <__ieee754_pow+0x3fc>)
 800e096:	4299      	cmp	r1, r3
 800e098:	ec45 4b19 	vmov	d9, r4, r5
 800e09c:	4606      	mov	r6, r0
 800e09e:	460f      	mov	r7, r1
 800e0a0:	468b      	mov	fp, r1
 800e0a2:	f340 82f1 	ble.w	800e688 <__ieee754_pow+0x988>
 800e0a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e0aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e0ae:	4303      	orrs	r3, r0
 800e0b0:	f000 81e4 	beq.w	800e47c <__ieee754_pow+0x77c>
 800e0b4:	ec51 0b18 	vmov	r0, r1, d8
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	f7f2 fd16 	bl	8000aec <__aeabi_dcmplt>
 800e0c0:	3800      	subs	r0, #0
 800e0c2:	bf18      	it	ne
 800e0c4:	2001      	movne	r0, #1
 800e0c6:	e72b      	b.n	800df20 <__ieee754_pow+0x220>
 800e0c8:	60000000 	.word	0x60000000
 800e0cc:	3ff71547 	.word	0x3ff71547
 800e0d0:	f85ddf44 	.word	0xf85ddf44
 800e0d4:	3e54ae0b 	.word	0x3e54ae0b
 800e0d8:	55555555 	.word	0x55555555
 800e0dc:	3fd55555 	.word	0x3fd55555
 800e0e0:	652b82fe 	.word	0x652b82fe
 800e0e4:	3ff71547 	.word	0x3ff71547
 800e0e8:	00000000 	.word	0x00000000
 800e0ec:	bff00000 	.word	0xbff00000
 800e0f0:	3ff00000 	.word	0x3ff00000
 800e0f4:	3fd00000 	.word	0x3fd00000
 800e0f8:	3fe00000 	.word	0x3fe00000
 800e0fc:	408fffff 	.word	0x408fffff
 800e100:	4bd5      	ldr	r3, [pc, #852]	; (800e458 <__ieee754_pow+0x758>)
 800e102:	402b      	ands	r3, r5
 800e104:	2200      	movs	r2, #0
 800e106:	b92b      	cbnz	r3, 800e114 <__ieee754_pow+0x414>
 800e108:	4bd4      	ldr	r3, [pc, #848]	; (800e45c <__ieee754_pow+0x75c>)
 800e10a:	f7f2 fa7d 	bl	8000608 <__aeabi_dmul>
 800e10e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e112:	460c      	mov	r4, r1
 800e114:	1523      	asrs	r3, r4, #20
 800e116:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e11a:	4413      	add	r3, r2
 800e11c:	9305      	str	r3, [sp, #20]
 800e11e:	4bd0      	ldr	r3, [pc, #832]	; (800e460 <__ieee754_pow+0x760>)
 800e120:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e124:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e128:	429c      	cmp	r4, r3
 800e12a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e12e:	dd08      	ble.n	800e142 <__ieee754_pow+0x442>
 800e130:	4bcc      	ldr	r3, [pc, #816]	; (800e464 <__ieee754_pow+0x764>)
 800e132:	429c      	cmp	r4, r3
 800e134:	f340 8162 	ble.w	800e3fc <__ieee754_pow+0x6fc>
 800e138:	9b05      	ldr	r3, [sp, #20]
 800e13a:	3301      	adds	r3, #1
 800e13c:	9305      	str	r3, [sp, #20]
 800e13e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e142:	2400      	movs	r4, #0
 800e144:	00e3      	lsls	r3, r4, #3
 800e146:	9307      	str	r3, [sp, #28]
 800e148:	4bc7      	ldr	r3, [pc, #796]	; (800e468 <__ieee754_pow+0x768>)
 800e14a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e14e:	ed93 7b00 	vldr	d7, [r3]
 800e152:	4629      	mov	r1, r5
 800e154:	ec53 2b17 	vmov	r2, r3, d7
 800e158:	eeb0 9a47 	vmov.f32	s18, s14
 800e15c:	eef0 9a67 	vmov.f32	s19, s15
 800e160:	4682      	mov	sl, r0
 800e162:	f7f2 f899 	bl	8000298 <__aeabi_dsub>
 800e166:	4652      	mov	r2, sl
 800e168:	4606      	mov	r6, r0
 800e16a:	460f      	mov	r7, r1
 800e16c:	462b      	mov	r3, r5
 800e16e:	ec51 0b19 	vmov	r0, r1, d9
 800e172:	f7f2 f893 	bl	800029c <__adddf3>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	2000      	movs	r0, #0
 800e17c:	49bb      	ldr	r1, [pc, #748]	; (800e46c <__ieee754_pow+0x76c>)
 800e17e:	f7f2 fb6d 	bl	800085c <__aeabi_ddiv>
 800e182:	ec41 0b1a 	vmov	d10, r0, r1
 800e186:	4602      	mov	r2, r0
 800e188:	460b      	mov	r3, r1
 800e18a:	4630      	mov	r0, r6
 800e18c:	4639      	mov	r1, r7
 800e18e:	f7f2 fa3b 	bl	8000608 <__aeabi_dmul>
 800e192:	2300      	movs	r3, #0
 800e194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e198:	9302      	str	r3, [sp, #8]
 800e19a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e19e:	46ab      	mov	fp, r5
 800e1a0:	106d      	asrs	r5, r5, #1
 800e1a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e1a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e1aa:	ec41 0b18 	vmov	d8, r0, r1
 800e1ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	4640      	mov	r0, r8
 800e1b6:	4649      	mov	r1, r9
 800e1b8:	4614      	mov	r4, r2
 800e1ba:	461d      	mov	r5, r3
 800e1bc:	f7f2 fa24 	bl	8000608 <__aeabi_dmul>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	4630      	mov	r0, r6
 800e1c6:	4639      	mov	r1, r7
 800e1c8:	f7f2 f866 	bl	8000298 <__aeabi_dsub>
 800e1cc:	ec53 2b19 	vmov	r2, r3, d9
 800e1d0:	4606      	mov	r6, r0
 800e1d2:	460f      	mov	r7, r1
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	f7f2 f85e 	bl	8000298 <__aeabi_dsub>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	460b      	mov	r3, r1
 800e1e0:	4650      	mov	r0, sl
 800e1e2:	4659      	mov	r1, fp
 800e1e4:	f7f2 f858 	bl	8000298 <__aeabi_dsub>
 800e1e8:	4642      	mov	r2, r8
 800e1ea:	464b      	mov	r3, r9
 800e1ec:	f7f2 fa0c 	bl	8000608 <__aeabi_dmul>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4630      	mov	r0, r6
 800e1f6:	4639      	mov	r1, r7
 800e1f8:	f7f2 f84e 	bl	8000298 <__aeabi_dsub>
 800e1fc:	ec53 2b1a 	vmov	r2, r3, d10
 800e200:	f7f2 fa02 	bl	8000608 <__aeabi_dmul>
 800e204:	ec53 2b18 	vmov	r2, r3, d8
 800e208:	ec41 0b19 	vmov	d9, r0, r1
 800e20c:	ec51 0b18 	vmov	r0, r1, d8
 800e210:	f7f2 f9fa 	bl	8000608 <__aeabi_dmul>
 800e214:	a37c      	add	r3, pc, #496	; (adr r3, 800e408 <__ieee754_pow+0x708>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	4604      	mov	r4, r0
 800e21c:	460d      	mov	r5, r1
 800e21e:	f7f2 f9f3 	bl	8000608 <__aeabi_dmul>
 800e222:	a37b      	add	r3, pc, #492	; (adr r3, 800e410 <__ieee754_pow+0x710>)
 800e224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e228:	f7f2 f838 	bl	800029c <__adddf3>
 800e22c:	4622      	mov	r2, r4
 800e22e:	462b      	mov	r3, r5
 800e230:	f7f2 f9ea 	bl	8000608 <__aeabi_dmul>
 800e234:	a378      	add	r3, pc, #480	; (adr r3, 800e418 <__ieee754_pow+0x718>)
 800e236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23a:	f7f2 f82f 	bl	800029c <__adddf3>
 800e23e:	4622      	mov	r2, r4
 800e240:	462b      	mov	r3, r5
 800e242:	f7f2 f9e1 	bl	8000608 <__aeabi_dmul>
 800e246:	a376      	add	r3, pc, #472	; (adr r3, 800e420 <__ieee754_pow+0x720>)
 800e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24c:	f7f2 f826 	bl	800029c <__adddf3>
 800e250:	4622      	mov	r2, r4
 800e252:	462b      	mov	r3, r5
 800e254:	f7f2 f9d8 	bl	8000608 <__aeabi_dmul>
 800e258:	a373      	add	r3, pc, #460	; (adr r3, 800e428 <__ieee754_pow+0x728>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 f81d 	bl	800029c <__adddf3>
 800e262:	4622      	mov	r2, r4
 800e264:	462b      	mov	r3, r5
 800e266:	f7f2 f9cf 	bl	8000608 <__aeabi_dmul>
 800e26a:	a371      	add	r3, pc, #452	; (adr r3, 800e430 <__ieee754_pow+0x730>)
 800e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e270:	f7f2 f814 	bl	800029c <__adddf3>
 800e274:	4622      	mov	r2, r4
 800e276:	4606      	mov	r6, r0
 800e278:	460f      	mov	r7, r1
 800e27a:	462b      	mov	r3, r5
 800e27c:	4620      	mov	r0, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	f7f2 f9c2 	bl	8000608 <__aeabi_dmul>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	4630      	mov	r0, r6
 800e28a:	4639      	mov	r1, r7
 800e28c:	f7f2 f9bc 	bl	8000608 <__aeabi_dmul>
 800e290:	4642      	mov	r2, r8
 800e292:	4604      	mov	r4, r0
 800e294:	460d      	mov	r5, r1
 800e296:	464b      	mov	r3, r9
 800e298:	ec51 0b18 	vmov	r0, r1, d8
 800e29c:	f7f1 fffe 	bl	800029c <__adddf3>
 800e2a0:	ec53 2b19 	vmov	r2, r3, d9
 800e2a4:	f7f2 f9b0 	bl	8000608 <__aeabi_dmul>
 800e2a8:	4622      	mov	r2, r4
 800e2aa:	462b      	mov	r3, r5
 800e2ac:	f7f1 fff6 	bl	800029c <__adddf3>
 800e2b0:	4642      	mov	r2, r8
 800e2b2:	4682      	mov	sl, r0
 800e2b4:	468b      	mov	fp, r1
 800e2b6:	464b      	mov	r3, r9
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	4649      	mov	r1, r9
 800e2bc:	f7f2 f9a4 	bl	8000608 <__aeabi_dmul>
 800e2c0:	4b6b      	ldr	r3, [pc, #428]	; (800e470 <__ieee754_pow+0x770>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	4606      	mov	r6, r0
 800e2c6:	460f      	mov	r7, r1
 800e2c8:	f7f1 ffe8 	bl	800029c <__adddf3>
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	465b      	mov	r3, fp
 800e2d0:	f7f1 ffe4 	bl	800029c <__adddf3>
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	460d      	mov	r5, r1
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	4640      	mov	r0, r8
 800e2e0:	4649      	mov	r1, r9
 800e2e2:	f7f2 f991 	bl	8000608 <__aeabi_dmul>
 800e2e6:	4b62      	ldr	r3, [pc, #392]	; (800e470 <__ieee754_pow+0x770>)
 800e2e8:	4680      	mov	r8, r0
 800e2ea:	4689      	mov	r9, r1
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	f7f1 ffd1 	bl	8000298 <__aeabi_dsub>
 800e2f6:	4632      	mov	r2, r6
 800e2f8:	463b      	mov	r3, r7
 800e2fa:	f7f1 ffcd 	bl	8000298 <__aeabi_dsub>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	4650      	mov	r0, sl
 800e304:	4659      	mov	r1, fp
 800e306:	f7f1 ffc7 	bl	8000298 <__aeabi_dsub>
 800e30a:	ec53 2b18 	vmov	r2, r3, d8
 800e30e:	f7f2 f97b 	bl	8000608 <__aeabi_dmul>
 800e312:	4622      	mov	r2, r4
 800e314:	4606      	mov	r6, r0
 800e316:	460f      	mov	r7, r1
 800e318:	462b      	mov	r3, r5
 800e31a:	ec51 0b19 	vmov	r0, r1, d9
 800e31e:	f7f2 f973 	bl	8000608 <__aeabi_dmul>
 800e322:	4602      	mov	r2, r0
 800e324:	460b      	mov	r3, r1
 800e326:	4630      	mov	r0, r6
 800e328:	4639      	mov	r1, r7
 800e32a:	f7f1 ffb7 	bl	800029c <__adddf3>
 800e32e:	4606      	mov	r6, r0
 800e330:	460f      	mov	r7, r1
 800e332:	4602      	mov	r2, r0
 800e334:	460b      	mov	r3, r1
 800e336:	4640      	mov	r0, r8
 800e338:	4649      	mov	r1, r9
 800e33a:	f7f1 ffaf 	bl	800029c <__adddf3>
 800e33e:	a33e      	add	r3, pc, #248	; (adr r3, 800e438 <__ieee754_pow+0x738>)
 800e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e344:	2000      	movs	r0, #0
 800e346:	4604      	mov	r4, r0
 800e348:	460d      	mov	r5, r1
 800e34a:	f7f2 f95d 	bl	8000608 <__aeabi_dmul>
 800e34e:	4642      	mov	r2, r8
 800e350:	ec41 0b18 	vmov	d8, r0, r1
 800e354:	464b      	mov	r3, r9
 800e356:	4620      	mov	r0, r4
 800e358:	4629      	mov	r1, r5
 800e35a:	f7f1 ff9d 	bl	8000298 <__aeabi_dsub>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4630      	mov	r0, r6
 800e364:	4639      	mov	r1, r7
 800e366:	f7f1 ff97 	bl	8000298 <__aeabi_dsub>
 800e36a:	a335      	add	r3, pc, #212	; (adr r3, 800e440 <__ieee754_pow+0x740>)
 800e36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e370:	f7f2 f94a 	bl	8000608 <__aeabi_dmul>
 800e374:	a334      	add	r3, pc, #208	; (adr r3, 800e448 <__ieee754_pow+0x748>)
 800e376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37a:	4606      	mov	r6, r0
 800e37c:	460f      	mov	r7, r1
 800e37e:	4620      	mov	r0, r4
 800e380:	4629      	mov	r1, r5
 800e382:	f7f2 f941 	bl	8000608 <__aeabi_dmul>
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	4630      	mov	r0, r6
 800e38c:	4639      	mov	r1, r7
 800e38e:	f7f1 ff85 	bl	800029c <__adddf3>
 800e392:	9a07      	ldr	r2, [sp, #28]
 800e394:	4b37      	ldr	r3, [pc, #220]	; (800e474 <__ieee754_pow+0x774>)
 800e396:	4413      	add	r3, r2
 800e398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39c:	f7f1 ff7e 	bl	800029c <__adddf3>
 800e3a0:	4682      	mov	sl, r0
 800e3a2:	9805      	ldr	r0, [sp, #20]
 800e3a4:	468b      	mov	fp, r1
 800e3a6:	f7f2 f8c5 	bl	8000534 <__aeabi_i2d>
 800e3aa:	9a07      	ldr	r2, [sp, #28]
 800e3ac:	4b32      	ldr	r3, [pc, #200]	; (800e478 <__ieee754_pow+0x778>)
 800e3ae:	4413      	add	r3, r2
 800e3b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3b4:	4606      	mov	r6, r0
 800e3b6:	460f      	mov	r7, r1
 800e3b8:	4652      	mov	r2, sl
 800e3ba:	465b      	mov	r3, fp
 800e3bc:	ec51 0b18 	vmov	r0, r1, d8
 800e3c0:	f7f1 ff6c 	bl	800029c <__adddf3>
 800e3c4:	4642      	mov	r2, r8
 800e3c6:	464b      	mov	r3, r9
 800e3c8:	f7f1 ff68 	bl	800029c <__adddf3>
 800e3cc:	4632      	mov	r2, r6
 800e3ce:	463b      	mov	r3, r7
 800e3d0:	f7f1 ff64 	bl	800029c <__adddf3>
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	4632      	mov	r2, r6
 800e3d8:	463b      	mov	r3, r7
 800e3da:	4604      	mov	r4, r0
 800e3dc:	460d      	mov	r5, r1
 800e3de:	f7f1 ff5b 	bl	8000298 <__aeabi_dsub>
 800e3e2:	4642      	mov	r2, r8
 800e3e4:	464b      	mov	r3, r9
 800e3e6:	f7f1 ff57 	bl	8000298 <__aeabi_dsub>
 800e3ea:	ec53 2b18 	vmov	r2, r3, d8
 800e3ee:	f7f1 ff53 	bl	8000298 <__aeabi_dsub>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	4650      	mov	r0, sl
 800e3f8:	4659      	mov	r1, fp
 800e3fa:	e610      	b.n	800e01e <__ieee754_pow+0x31e>
 800e3fc:	2401      	movs	r4, #1
 800e3fe:	e6a1      	b.n	800e144 <__ieee754_pow+0x444>
 800e400:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e450 <__ieee754_pow+0x750>
 800e404:	e617      	b.n	800e036 <__ieee754_pow+0x336>
 800e406:	bf00      	nop
 800e408:	4a454eef 	.word	0x4a454eef
 800e40c:	3fca7e28 	.word	0x3fca7e28
 800e410:	93c9db65 	.word	0x93c9db65
 800e414:	3fcd864a 	.word	0x3fcd864a
 800e418:	a91d4101 	.word	0xa91d4101
 800e41c:	3fd17460 	.word	0x3fd17460
 800e420:	518f264d 	.word	0x518f264d
 800e424:	3fd55555 	.word	0x3fd55555
 800e428:	db6fabff 	.word	0xdb6fabff
 800e42c:	3fdb6db6 	.word	0x3fdb6db6
 800e430:	33333303 	.word	0x33333303
 800e434:	3fe33333 	.word	0x3fe33333
 800e438:	e0000000 	.word	0xe0000000
 800e43c:	3feec709 	.word	0x3feec709
 800e440:	dc3a03fd 	.word	0xdc3a03fd
 800e444:	3feec709 	.word	0x3feec709
 800e448:	145b01f5 	.word	0x145b01f5
 800e44c:	be3e2fe0 	.word	0xbe3e2fe0
 800e450:	00000000 	.word	0x00000000
 800e454:	3ff00000 	.word	0x3ff00000
 800e458:	7ff00000 	.word	0x7ff00000
 800e45c:	43400000 	.word	0x43400000
 800e460:	0003988e 	.word	0x0003988e
 800e464:	000bb679 	.word	0x000bb679
 800e468:	080100f0 	.word	0x080100f0
 800e46c:	3ff00000 	.word	0x3ff00000
 800e470:	40080000 	.word	0x40080000
 800e474:	08010110 	.word	0x08010110
 800e478:	08010100 	.word	0x08010100
 800e47c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e754 <__ieee754_pow+0xa54>)
 800e47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e482:	4640      	mov	r0, r8
 800e484:	4649      	mov	r1, r9
 800e486:	f7f1 ff09 	bl	800029c <__adddf3>
 800e48a:	4622      	mov	r2, r4
 800e48c:	ec41 0b1a 	vmov	d10, r0, r1
 800e490:	462b      	mov	r3, r5
 800e492:	4630      	mov	r0, r6
 800e494:	4639      	mov	r1, r7
 800e496:	f7f1 feff 	bl	8000298 <__aeabi_dsub>
 800e49a:	4602      	mov	r2, r0
 800e49c:	460b      	mov	r3, r1
 800e49e:	ec51 0b1a 	vmov	r0, r1, d10
 800e4a2:	f7f2 fb41 	bl	8000b28 <__aeabi_dcmpgt>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f47f ae04 	bne.w	800e0b4 <__ieee754_pow+0x3b4>
 800e4ac:	4aa4      	ldr	r2, [pc, #656]	; (800e740 <__ieee754_pow+0xa40>)
 800e4ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	f340 8108 	ble.w	800e6c8 <__ieee754_pow+0x9c8>
 800e4b8:	151b      	asrs	r3, r3, #20
 800e4ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e4be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e4c2:	fa4a f303 	asr.w	r3, sl, r3
 800e4c6:	445b      	add	r3, fp
 800e4c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e4cc:	4e9d      	ldr	r6, [pc, #628]	; (800e744 <__ieee754_pow+0xa44>)
 800e4ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e4d2:	4116      	asrs	r6, r2
 800e4d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e4d8:	2000      	movs	r0, #0
 800e4da:	ea23 0106 	bic.w	r1, r3, r6
 800e4de:	f1c2 0214 	rsb	r2, r2, #20
 800e4e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e4e6:	fa4a fa02 	asr.w	sl, sl, r2
 800e4ea:	f1bb 0f00 	cmp.w	fp, #0
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	bfb8      	it	lt
 800e4f8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e4fc:	f7f1 fecc 	bl	8000298 <__aeabi_dsub>
 800e500:	ec41 0b19 	vmov	d9, r0, r1
 800e504:	4642      	mov	r2, r8
 800e506:	464b      	mov	r3, r9
 800e508:	ec51 0b19 	vmov	r0, r1, d9
 800e50c:	f7f1 fec6 	bl	800029c <__adddf3>
 800e510:	a37b      	add	r3, pc, #492	; (adr r3, 800e700 <__ieee754_pow+0xa00>)
 800e512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e516:	2000      	movs	r0, #0
 800e518:	4604      	mov	r4, r0
 800e51a:	460d      	mov	r5, r1
 800e51c:	f7f2 f874 	bl	8000608 <__aeabi_dmul>
 800e520:	ec53 2b19 	vmov	r2, r3, d9
 800e524:	4606      	mov	r6, r0
 800e526:	460f      	mov	r7, r1
 800e528:	4620      	mov	r0, r4
 800e52a:	4629      	mov	r1, r5
 800e52c:	f7f1 feb4 	bl	8000298 <__aeabi_dsub>
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	4640      	mov	r0, r8
 800e536:	4649      	mov	r1, r9
 800e538:	f7f1 feae 	bl	8000298 <__aeabi_dsub>
 800e53c:	a372      	add	r3, pc, #456	; (adr r3, 800e708 <__ieee754_pow+0xa08>)
 800e53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e542:	f7f2 f861 	bl	8000608 <__aeabi_dmul>
 800e546:	a372      	add	r3, pc, #456	; (adr r3, 800e710 <__ieee754_pow+0xa10>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	4680      	mov	r8, r0
 800e54e:	4689      	mov	r9, r1
 800e550:	4620      	mov	r0, r4
 800e552:	4629      	mov	r1, r5
 800e554:	f7f2 f858 	bl	8000608 <__aeabi_dmul>
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	4640      	mov	r0, r8
 800e55e:	4649      	mov	r1, r9
 800e560:	f7f1 fe9c 	bl	800029c <__adddf3>
 800e564:	4604      	mov	r4, r0
 800e566:	460d      	mov	r5, r1
 800e568:	4602      	mov	r2, r0
 800e56a:	460b      	mov	r3, r1
 800e56c:	4630      	mov	r0, r6
 800e56e:	4639      	mov	r1, r7
 800e570:	f7f1 fe94 	bl	800029c <__adddf3>
 800e574:	4632      	mov	r2, r6
 800e576:	463b      	mov	r3, r7
 800e578:	4680      	mov	r8, r0
 800e57a:	4689      	mov	r9, r1
 800e57c:	f7f1 fe8c 	bl	8000298 <__aeabi_dsub>
 800e580:	4602      	mov	r2, r0
 800e582:	460b      	mov	r3, r1
 800e584:	4620      	mov	r0, r4
 800e586:	4629      	mov	r1, r5
 800e588:	f7f1 fe86 	bl	8000298 <__aeabi_dsub>
 800e58c:	4642      	mov	r2, r8
 800e58e:	4606      	mov	r6, r0
 800e590:	460f      	mov	r7, r1
 800e592:	464b      	mov	r3, r9
 800e594:	4640      	mov	r0, r8
 800e596:	4649      	mov	r1, r9
 800e598:	f7f2 f836 	bl	8000608 <__aeabi_dmul>
 800e59c:	a35e      	add	r3, pc, #376	; (adr r3, 800e718 <__ieee754_pow+0xa18>)
 800e59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	460d      	mov	r5, r1
 800e5a6:	f7f2 f82f 	bl	8000608 <__aeabi_dmul>
 800e5aa:	a35d      	add	r3, pc, #372	; (adr r3, 800e720 <__ieee754_pow+0xa20>)
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	f7f1 fe72 	bl	8000298 <__aeabi_dsub>
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	f7f2 f826 	bl	8000608 <__aeabi_dmul>
 800e5bc:	a35a      	add	r3, pc, #360	; (adr r3, 800e728 <__ieee754_pow+0xa28>)
 800e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c2:	f7f1 fe6b 	bl	800029c <__adddf3>
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	462b      	mov	r3, r5
 800e5ca:	f7f2 f81d 	bl	8000608 <__aeabi_dmul>
 800e5ce:	a358      	add	r3, pc, #352	; (adr r3, 800e730 <__ieee754_pow+0xa30>)
 800e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d4:	f7f1 fe60 	bl	8000298 <__aeabi_dsub>
 800e5d8:	4622      	mov	r2, r4
 800e5da:	462b      	mov	r3, r5
 800e5dc:	f7f2 f814 	bl	8000608 <__aeabi_dmul>
 800e5e0:	a355      	add	r3, pc, #340	; (adr r3, 800e738 <__ieee754_pow+0xa38>)
 800e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e6:	f7f1 fe59 	bl	800029c <__adddf3>
 800e5ea:	4622      	mov	r2, r4
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	f7f2 f80b 	bl	8000608 <__aeabi_dmul>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	f7f1 fe4d 	bl	8000298 <__aeabi_dsub>
 800e5fe:	4604      	mov	r4, r0
 800e600:	460d      	mov	r5, r1
 800e602:	4602      	mov	r2, r0
 800e604:	460b      	mov	r3, r1
 800e606:	4640      	mov	r0, r8
 800e608:	4649      	mov	r1, r9
 800e60a:	f7f1 fffd 	bl	8000608 <__aeabi_dmul>
 800e60e:	2200      	movs	r2, #0
 800e610:	ec41 0b19 	vmov	d9, r0, r1
 800e614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e618:	4620      	mov	r0, r4
 800e61a:	4629      	mov	r1, r5
 800e61c:	f7f1 fe3c 	bl	8000298 <__aeabi_dsub>
 800e620:	4602      	mov	r2, r0
 800e622:	460b      	mov	r3, r1
 800e624:	ec51 0b19 	vmov	r0, r1, d9
 800e628:	f7f2 f918 	bl	800085c <__aeabi_ddiv>
 800e62c:	4632      	mov	r2, r6
 800e62e:	4604      	mov	r4, r0
 800e630:	460d      	mov	r5, r1
 800e632:	463b      	mov	r3, r7
 800e634:	4640      	mov	r0, r8
 800e636:	4649      	mov	r1, r9
 800e638:	f7f1 ffe6 	bl	8000608 <__aeabi_dmul>
 800e63c:	4632      	mov	r2, r6
 800e63e:	463b      	mov	r3, r7
 800e640:	f7f1 fe2c 	bl	800029c <__adddf3>
 800e644:	4602      	mov	r2, r0
 800e646:	460b      	mov	r3, r1
 800e648:	4620      	mov	r0, r4
 800e64a:	4629      	mov	r1, r5
 800e64c:	f7f1 fe24 	bl	8000298 <__aeabi_dsub>
 800e650:	4642      	mov	r2, r8
 800e652:	464b      	mov	r3, r9
 800e654:	f7f1 fe20 	bl	8000298 <__aeabi_dsub>
 800e658:	460b      	mov	r3, r1
 800e65a:	4602      	mov	r2, r0
 800e65c:	493a      	ldr	r1, [pc, #232]	; (800e748 <__ieee754_pow+0xa48>)
 800e65e:	2000      	movs	r0, #0
 800e660:	f7f1 fe1a 	bl	8000298 <__aeabi_dsub>
 800e664:	ec41 0b10 	vmov	d0, r0, r1
 800e668:	ee10 3a90 	vmov	r3, s1
 800e66c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e674:	da2b      	bge.n	800e6ce <__ieee754_pow+0x9ce>
 800e676:	4650      	mov	r0, sl
 800e678:	f000 f966 	bl	800e948 <scalbn>
 800e67c:	ec51 0b10 	vmov	r0, r1, d0
 800e680:	ec53 2b18 	vmov	r2, r3, d8
 800e684:	f7ff bbed 	b.w	800de62 <__ieee754_pow+0x162>
 800e688:	4b30      	ldr	r3, [pc, #192]	; (800e74c <__ieee754_pow+0xa4c>)
 800e68a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e68e:	429e      	cmp	r6, r3
 800e690:	f77f af0c 	ble.w	800e4ac <__ieee754_pow+0x7ac>
 800e694:	4b2e      	ldr	r3, [pc, #184]	; (800e750 <__ieee754_pow+0xa50>)
 800e696:	440b      	add	r3, r1
 800e698:	4303      	orrs	r3, r0
 800e69a:	d009      	beq.n	800e6b0 <__ieee754_pow+0x9b0>
 800e69c:	ec51 0b18 	vmov	r0, r1, d8
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	f7f2 fa22 	bl	8000aec <__aeabi_dcmplt>
 800e6a8:	3800      	subs	r0, #0
 800e6aa:	bf18      	it	ne
 800e6ac:	2001      	movne	r0, #1
 800e6ae:	e447      	b.n	800df40 <__ieee754_pow+0x240>
 800e6b0:	4622      	mov	r2, r4
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	f7f1 fdf0 	bl	8000298 <__aeabi_dsub>
 800e6b8:	4642      	mov	r2, r8
 800e6ba:	464b      	mov	r3, r9
 800e6bc:	f7f2 fa2a 	bl	8000b14 <__aeabi_dcmpge>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	f43f aef3 	beq.w	800e4ac <__ieee754_pow+0x7ac>
 800e6c6:	e7e9      	b.n	800e69c <__ieee754_pow+0x99c>
 800e6c8:	f04f 0a00 	mov.w	sl, #0
 800e6cc:	e71a      	b.n	800e504 <__ieee754_pow+0x804>
 800e6ce:	ec51 0b10 	vmov	r0, r1, d0
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	e7d4      	b.n	800e680 <__ieee754_pow+0x980>
 800e6d6:	491c      	ldr	r1, [pc, #112]	; (800e748 <__ieee754_pow+0xa48>)
 800e6d8:	2000      	movs	r0, #0
 800e6da:	f7ff bb30 	b.w	800dd3e <__ieee754_pow+0x3e>
 800e6de:	2000      	movs	r0, #0
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	f7ff bb2c 	b.w	800dd3e <__ieee754_pow+0x3e>
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	4639      	mov	r1, r7
 800e6ea:	f7ff bb28 	b.w	800dd3e <__ieee754_pow+0x3e>
 800e6ee:	9204      	str	r2, [sp, #16]
 800e6f0:	f7ff bb7a 	b.w	800dde8 <__ieee754_pow+0xe8>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f7ff bb64 	b.w	800ddc2 <__ieee754_pow+0xc2>
 800e6fa:	bf00      	nop
 800e6fc:	f3af 8000 	nop.w
 800e700:	00000000 	.word	0x00000000
 800e704:	3fe62e43 	.word	0x3fe62e43
 800e708:	fefa39ef 	.word	0xfefa39ef
 800e70c:	3fe62e42 	.word	0x3fe62e42
 800e710:	0ca86c39 	.word	0x0ca86c39
 800e714:	be205c61 	.word	0xbe205c61
 800e718:	72bea4d0 	.word	0x72bea4d0
 800e71c:	3e663769 	.word	0x3e663769
 800e720:	c5d26bf1 	.word	0xc5d26bf1
 800e724:	3ebbbd41 	.word	0x3ebbbd41
 800e728:	af25de2c 	.word	0xaf25de2c
 800e72c:	3f11566a 	.word	0x3f11566a
 800e730:	16bebd93 	.word	0x16bebd93
 800e734:	3f66c16c 	.word	0x3f66c16c
 800e738:	5555553e 	.word	0x5555553e
 800e73c:	3fc55555 	.word	0x3fc55555
 800e740:	3fe00000 	.word	0x3fe00000
 800e744:	000fffff 	.word	0x000fffff
 800e748:	3ff00000 	.word	0x3ff00000
 800e74c:	4090cbff 	.word	0x4090cbff
 800e750:	3f6f3400 	.word	0x3f6f3400
 800e754:	652b82fe 	.word	0x652b82fe
 800e758:	3c971547 	.word	0x3c971547

0800e75c <__ieee754_sqrt>:
 800e75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e760:	ec55 4b10 	vmov	r4, r5, d0
 800e764:	4e55      	ldr	r6, [pc, #340]	; (800e8bc <__ieee754_sqrt+0x160>)
 800e766:	43ae      	bics	r6, r5
 800e768:	ee10 0a10 	vmov	r0, s0
 800e76c:	ee10 3a10 	vmov	r3, s0
 800e770:	462a      	mov	r2, r5
 800e772:	4629      	mov	r1, r5
 800e774:	d110      	bne.n	800e798 <__ieee754_sqrt+0x3c>
 800e776:	ee10 2a10 	vmov	r2, s0
 800e77a:	462b      	mov	r3, r5
 800e77c:	f7f1 ff44 	bl	8000608 <__aeabi_dmul>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	4620      	mov	r0, r4
 800e786:	4629      	mov	r1, r5
 800e788:	f7f1 fd88 	bl	800029c <__adddf3>
 800e78c:	4604      	mov	r4, r0
 800e78e:	460d      	mov	r5, r1
 800e790:	ec45 4b10 	vmov	d0, r4, r5
 800e794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e798:	2d00      	cmp	r5, #0
 800e79a:	dc10      	bgt.n	800e7be <__ieee754_sqrt+0x62>
 800e79c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e7a0:	4330      	orrs	r0, r6
 800e7a2:	d0f5      	beq.n	800e790 <__ieee754_sqrt+0x34>
 800e7a4:	b15d      	cbz	r5, 800e7be <__ieee754_sqrt+0x62>
 800e7a6:	ee10 2a10 	vmov	r2, s0
 800e7aa:	462b      	mov	r3, r5
 800e7ac:	ee10 0a10 	vmov	r0, s0
 800e7b0:	f7f1 fd72 	bl	8000298 <__aeabi_dsub>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	f7f2 f850 	bl	800085c <__aeabi_ddiv>
 800e7bc:	e7e6      	b.n	800e78c <__ieee754_sqrt+0x30>
 800e7be:	1512      	asrs	r2, r2, #20
 800e7c0:	d074      	beq.n	800e8ac <__ieee754_sqrt+0x150>
 800e7c2:	07d4      	lsls	r4, r2, #31
 800e7c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e7c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e7cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e7d0:	bf5e      	ittt	pl
 800e7d2:	0fda      	lsrpl	r2, r3, #31
 800e7d4:	005b      	lslpl	r3, r3, #1
 800e7d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e7da:	2400      	movs	r4, #0
 800e7dc:	0fda      	lsrs	r2, r3, #31
 800e7de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e7e2:	107f      	asrs	r7, r7, #1
 800e7e4:	005b      	lsls	r3, r3, #1
 800e7e6:	2516      	movs	r5, #22
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e7ee:	1886      	adds	r6, r0, r2
 800e7f0:	428e      	cmp	r6, r1
 800e7f2:	bfde      	ittt	le
 800e7f4:	1b89      	suble	r1, r1, r6
 800e7f6:	18b0      	addle	r0, r6, r2
 800e7f8:	18a4      	addle	r4, r4, r2
 800e7fa:	0049      	lsls	r1, r1, #1
 800e7fc:	3d01      	subs	r5, #1
 800e7fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e802:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e806:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e80a:	d1f0      	bne.n	800e7ee <__ieee754_sqrt+0x92>
 800e80c:	462a      	mov	r2, r5
 800e80e:	f04f 0e20 	mov.w	lr, #32
 800e812:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e816:	4281      	cmp	r1, r0
 800e818:	eb06 0c05 	add.w	ip, r6, r5
 800e81c:	dc02      	bgt.n	800e824 <__ieee754_sqrt+0xc8>
 800e81e:	d113      	bne.n	800e848 <__ieee754_sqrt+0xec>
 800e820:	459c      	cmp	ip, r3
 800e822:	d811      	bhi.n	800e848 <__ieee754_sqrt+0xec>
 800e824:	f1bc 0f00 	cmp.w	ip, #0
 800e828:	eb0c 0506 	add.w	r5, ip, r6
 800e82c:	da43      	bge.n	800e8b6 <__ieee754_sqrt+0x15a>
 800e82e:	2d00      	cmp	r5, #0
 800e830:	db41      	blt.n	800e8b6 <__ieee754_sqrt+0x15a>
 800e832:	f100 0801 	add.w	r8, r0, #1
 800e836:	1a09      	subs	r1, r1, r0
 800e838:	459c      	cmp	ip, r3
 800e83a:	bf88      	it	hi
 800e83c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e840:	eba3 030c 	sub.w	r3, r3, ip
 800e844:	4432      	add	r2, r6
 800e846:	4640      	mov	r0, r8
 800e848:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e84c:	f1be 0e01 	subs.w	lr, lr, #1
 800e850:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e854:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e858:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e85c:	d1db      	bne.n	800e816 <__ieee754_sqrt+0xba>
 800e85e:	430b      	orrs	r3, r1
 800e860:	d006      	beq.n	800e870 <__ieee754_sqrt+0x114>
 800e862:	1c50      	adds	r0, r2, #1
 800e864:	bf13      	iteet	ne
 800e866:	3201      	addne	r2, #1
 800e868:	3401      	addeq	r4, #1
 800e86a:	4672      	moveq	r2, lr
 800e86c:	f022 0201 	bicne.w	r2, r2, #1
 800e870:	1063      	asrs	r3, r4, #1
 800e872:	0852      	lsrs	r2, r2, #1
 800e874:	07e1      	lsls	r1, r4, #31
 800e876:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e87a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e87e:	bf48      	it	mi
 800e880:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e884:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e888:	4614      	mov	r4, r2
 800e88a:	e781      	b.n	800e790 <__ieee754_sqrt+0x34>
 800e88c:	0ad9      	lsrs	r1, r3, #11
 800e88e:	3815      	subs	r0, #21
 800e890:	055b      	lsls	r3, r3, #21
 800e892:	2900      	cmp	r1, #0
 800e894:	d0fa      	beq.n	800e88c <__ieee754_sqrt+0x130>
 800e896:	02cd      	lsls	r5, r1, #11
 800e898:	d50a      	bpl.n	800e8b0 <__ieee754_sqrt+0x154>
 800e89a:	f1c2 0420 	rsb	r4, r2, #32
 800e89e:	fa23 f404 	lsr.w	r4, r3, r4
 800e8a2:	1e55      	subs	r5, r2, #1
 800e8a4:	4093      	lsls	r3, r2
 800e8a6:	4321      	orrs	r1, r4
 800e8a8:	1b42      	subs	r2, r0, r5
 800e8aa:	e78a      	b.n	800e7c2 <__ieee754_sqrt+0x66>
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	e7f0      	b.n	800e892 <__ieee754_sqrt+0x136>
 800e8b0:	0049      	lsls	r1, r1, #1
 800e8b2:	3201      	adds	r2, #1
 800e8b4:	e7ef      	b.n	800e896 <__ieee754_sqrt+0x13a>
 800e8b6:	4680      	mov	r8, r0
 800e8b8:	e7bd      	b.n	800e836 <__ieee754_sqrt+0xda>
 800e8ba:	bf00      	nop
 800e8bc:	7ff00000 	.word	0x7ff00000

0800e8c0 <with_errno>:
 800e8c0:	b570      	push	{r4, r5, r6, lr}
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	460d      	mov	r5, r1
 800e8c6:	4616      	mov	r6, r2
 800e8c8:	f7fa f8ca 	bl	8008a60 <__errno>
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	6006      	str	r6, [r0, #0]
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	bd70      	pop	{r4, r5, r6, pc}

0800e8d4 <xflow>:
 800e8d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8d6:	4614      	mov	r4, r2
 800e8d8:	461d      	mov	r5, r3
 800e8da:	b108      	cbz	r0, 800e8e0 <xflow+0xc>
 800e8dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e8e0:	e9cd 2300 	strd	r2, r3, [sp]
 800e8e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	f7f1 fe8c 	bl	8000608 <__aeabi_dmul>
 800e8f0:	2222      	movs	r2, #34	; 0x22
 800e8f2:	b003      	add	sp, #12
 800e8f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8f8:	f7ff bfe2 	b.w	800e8c0 <with_errno>

0800e8fc <__math_uflow>:
 800e8fc:	b508      	push	{r3, lr}
 800e8fe:	2200      	movs	r2, #0
 800e900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e904:	f7ff ffe6 	bl	800e8d4 <xflow>
 800e908:	ec41 0b10 	vmov	d0, r0, r1
 800e90c:	bd08      	pop	{r3, pc}

0800e90e <__math_oflow>:
 800e90e:	b508      	push	{r3, lr}
 800e910:	2200      	movs	r2, #0
 800e912:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e916:	f7ff ffdd 	bl	800e8d4 <xflow>
 800e91a:	ec41 0b10 	vmov	d0, r0, r1
 800e91e:	bd08      	pop	{r3, pc}

0800e920 <fabs>:
 800e920:	ec51 0b10 	vmov	r0, r1, d0
 800e924:	ee10 2a10 	vmov	r2, s0
 800e928:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e92c:	ec43 2b10 	vmov	d0, r2, r3
 800e930:	4770      	bx	lr

0800e932 <finite>:
 800e932:	b082      	sub	sp, #8
 800e934:	ed8d 0b00 	vstr	d0, [sp]
 800e938:	9801      	ldr	r0, [sp, #4]
 800e93a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e93e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e942:	0fc0      	lsrs	r0, r0, #31
 800e944:	b002      	add	sp, #8
 800e946:	4770      	bx	lr

0800e948 <scalbn>:
 800e948:	b570      	push	{r4, r5, r6, lr}
 800e94a:	ec55 4b10 	vmov	r4, r5, d0
 800e94e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e952:	4606      	mov	r6, r0
 800e954:	462b      	mov	r3, r5
 800e956:	b99a      	cbnz	r2, 800e980 <scalbn+0x38>
 800e958:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e95c:	4323      	orrs	r3, r4
 800e95e:	d036      	beq.n	800e9ce <scalbn+0x86>
 800e960:	4b39      	ldr	r3, [pc, #228]	; (800ea48 <scalbn+0x100>)
 800e962:	4629      	mov	r1, r5
 800e964:	ee10 0a10 	vmov	r0, s0
 800e968:	2200      	movs	r2, #0
 800e96a:	f7f1 fe4d 	bl	8000608 <__aeabi_dmul>
 800e96e:	4b37      	ldr	r3, [pc, #220]	; (800ea4c <scalbn+0x104>)
 800e970:	429e      	cmp	r6, r3
 800e972:	4604      	mov	r4, r0
 800e974:	460d      	mov	r5, r1
 800e976:	da10      	bge.n	800e99a <scalbn+0x52>
 800e978:	a32b      	add	r3, pc, #172	; (adr r3, 800ea28 <scalbn+0xe0>)
 800e97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97e:	e03a      	b.n	800e9f6 <scalbn+0xae>
 800e980:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e984:	428a      	cmp	r2, r1
 800e986:	d10c      	bne.n	800e9a2 <scalbn+0x5a>
 800e988:	ee10 2a10 	vmov	r2, s0
 800e98c:	4620      	mov	r0, r4
 800e98e:	4629      	mov	r1, r5
 800e990:	f7f1 fc84 	bl	800029c <__adddf3>
 800e994:	4604      	mov	r4, r0
 800e996:	460d      	mov	r5, r1
 800e998:	e019      	b.n	800e9ce <scalbn+0x86>
 800e99a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e99e:	460b      	mov	r3, r1
 800e9a0:	3a36      	subs	r2, #54	; 0x36
 800e9a2:	4432      	add	r2, r6
 800e9a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e9a8:	428a      	cmp	r2, r1
 800e9aa:	dd08      	ble.n	800e9be <scalbn+0x76>
 800e9ac:	2d00      	cmp	r5, #0
 800e9ae:	a120      	add	r1, pc, #128	; (adr r1, 800ea30 <scalbn+0xe8>)
 800e9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9b4:	da1c      	bge.n	800e9f0 <scalbn+0xa8>
 800e9b6:	a120      	add	r1, pc, #128	; (adr r1, 800ea38 <scalbn+0xf0>)
 800e9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9bc:	e018      	b.n	800e9f0 <scalbn+0xa8>
 800e9be:	2a00      	cmp	r2, #0
 800e9c0:	dd08      	ble.n	800e9d4 <scalbn+0x8c>
 800e9c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9ce:	ec45 4b10 	vmov	d0, r4, r5
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e9d8:	da19      	bge.n	800ea0e <scalbn+0xc6>
 800e9da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e9de:	429e      	cmp	r6, r3
 800e9e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e9e4:	dd0a      	ble.n	800e9fc <scalbn+0xb4>
 800e9e6:	a112      	add	r1, pc, #72	; (adr r1, 800ea30 <scalbn+0xe8>)
 800e9e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1e2      	bne.n	800e9b6 <scalbn+0x6e>
 800e9f0:	a30f      	add	r3, pc, #60	; (adr r3, 800ea30 <scalbn+0xe8>)
 800e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f6:	f7f1 fe07 	bl	8000608 <__aeabi_dmul>
 800e9fa:	e7cb      	b.n	800e994 <scalbn+0x4c>
 800e9fc:	a10a      	add	r1, pc, #40	; (adr r1, 800ea28 <scalbn+0xe0>)
 800e9fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0b8      	beq.n	800e978 <scalbn+0x30>
 800ea06:	a10e      	add	r1, pc, #56	; (adr r1, 800ea40 <scalbn+0xf8>)
 800ea08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea0c:	e7b4      	b.n	800e978 <scalbn+0x30>
 800ea0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea12:	3236      	adds	r2, #54	; 0x36
 800ea14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	4b0c      	ldr	r3, [pc, #48]	; (800ea50 <scalbn+0x108>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	e7e8      	b.n	800e9f6 <scalbn+0xae>
 800ea24:	f3af 8000 	nop.w
 800ea28:	c2f8f359 	.word	0xc2f8f359
 800ea2c:	01a56e1f 	.word	0x01a56e1f
 800ea30:	8800759c 	.word	0x8800759c
 800ea34:	7e37e43c 	.word	0x7e37e43c
 800ea38:	8800759c 	.word	0x8800759c
 800ea3c:	fe37e43c 	.word	0xfe37e43c
 800ea40:	c2f8f359 	.word	0xc2f8f359
 800ea44:	81a56e1f 	.word	0x81a56e1f
 800ea48:	43500000 	.word	0x43500000
 800ea4c:	ffff3cb0 	.word	0xffff3cb0
 800ea50:	3c900000 	.word	0x3c900000

0800ea54 <_init>:
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	bf00      	nop
 800ea58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5a:	bc08      	pop	{r3}
 800ea5c:	469e      	mov	lr, r3
 800ea5e:	4770      	bx	lr

0800ea60 <_fini>:
 800ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea62:	bf00      	nop
 800ea64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea66:	bc08      	pop	{r3}
 800ea68:	469e      	mov	lr, r3
 800ea6a:	4770      	bx	lr
